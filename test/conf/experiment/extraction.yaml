data:
    _target_: deckard.base.data.Data
    generate:
        name: classification
        n_samples: 100
        n_features: 20
        n_classes: 3
        n_clusters_per_class: 1
        n_informative: 20
        n_redundant: 0
        n_repeated: 0
    sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state : 0
            stratify: True
            train_size : .8
            test_size : .2
model:
    data : ${data}
    init:
        _target_: deckard.base.model.ModelInitializer
        name: torch_example.LogisticRegression
        input_dim :
            - ${data.generate.n_features}
        output_dim :
             - ${data.generate.n_classes}
    _target_: deckard.base.model.Model
    trainer:
        nb_epoch: 1
        batch_size: 1024
    library : torch
    art:
        library : torch
        _target_ : deckard.base.model.art_pipeline.ArtPipeline
        initialize:
            criterion:
                name : "torch.nn.CrossEntropyLoss"
            optimizer:
                name : "torch.optim.SGD"
                lr : 0.01
                momentum : 0.9
attack:
    data : ${data}
    model : ${model}
    _target_ : deckard.base.attack.Attack
    init:
        name: art.attacks.extraction.KnockoffNets
        model: ${model}
    kwargs:
        extract:
            thieved_classifier:
                data : ${data}
                init:
                    _target_: deckard.base.model.ModelInitializer
                    name: torch_example.LogisticRegression
                    input_dim : ${data.generate.n_features}
                    output_dim : ${data.generate.n_classes}
                _target_: deckard.base.model.Model
                trainer:
                    nb_epoch: 1
                    batch_size: 1024
                library : torch
                art:
                    library : torch
                    _target_ : deckard.base.model.art_pipeline.ArtPipeline
                    initialize:
                        criterion:
                            name : "torch.nn.CrossEntropyLoss"
                        optimizer:
                            name : "torch.optim.SGD"
                            lr : 0.01
                            momentum : 0.9
    attack_size : 10
    method : extraction
files:
    data_dir : data
    model_dir : model
    attack_dir : attack
    report_dir : report
    directory : ???
    data_file : data.pkl
    model_file : model.pkl
    attack_file : attack.pkl
    score_dict_file : score_dict.json
scorers:
    accuracy:
        name: sklearn.metrics.accuracy_score
        direction: maximize
        normalize: True
    log_loss:
        name: sklearn.metrics.log_loss
        direction: minimize
        normalize: True
_target_: deckard.base.experiment.Experiment
