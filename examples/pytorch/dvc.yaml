vars:
  - conf/plots.yaml:line_plot
  - conf/plots.yaml:scatter_plot
  - conf/plots.yaml:cat_plot
  - conf/afr.yaml:covariates
  - conf/afr.yaml:weibull
  - conf/afr.yaml:log_logistic
  - conf/afr.yaml:log_normal
  - conf/clean.yaml:attacks
  - conf/clean.yaml:defences
  - conf/clean.yaml:params
  - conf/clean.yaml:fillna
stages:
  parse:
    cmd: python -m deckard.layers.parse --config_file ${dataset}.yaml
    deps:
      - conf/data
      - conf/model
      - conf/attack
      - conf/scorers
      - conf/files
      - conf/${dataset}.yaml
    outs:
      - params.yaml :
          cache: True
          persist: True
  train:
    cmd: python -m deckard.layers.experiment train --config_file ${dataset}.yaml
    params:
      - data
      - model
      - scorers
      - files
      - def_name
      - atk_name
      - dataset
      - device_id
    outs:
      - ${files.directory}/${files.model_dir}/${files.model_file}${files.model_type}
      - ${files.directory}/${files.model_dir}/${files.model_file}.optimizer${files.model_type}
      # - ${files.directory}/${files.reports}/train/${files.name}/${files.params_file}
      # - ${files.directory}/${files.reports}/train/${files.name}/${files.test_labels_file} # Omit to save space
      - ${files.directory}/${files.reports}/train/${files.name}/${files.predictions_file}  # logit outputs for our model
      # - ${files.directory}/${files.reports}/train/${files.name}/${files.probabilities_file} # Omit to save space
    metrics:
      - ${files.directory}/${files.reports}/train/${files.name}/${files.score_dict_file}
  attack:
    cmd: python -m deckard.layers.experiment attack --config_file ${dataset}.yaml
    params:
      - data
      - model
      - attack
      - scorers
      - files
      - def_name
      - atk_name
      - dataset
      - device_id
    outs:
      - ${files.directory}/${files.attack_dir}/${files.attack_file}${files.attack_type}
      - ${files.directory}/${files.reports}/attack/${files.name}/${files.adv_predictions_file}
      # - ${files.directory}/${files.reports}/attack/${files.name}/${files.params_file}
    deps:
      - ${files.directory}/${files.model_dir}/${files.model_file}${files.model_type}
    metrics:
      - ${files.directory}/${files.reports}/attack/${files.name}/${files.score_dict_file}
        ##############################################################################
  # models: # This is a loop over the ResNet models
  #   foreach:
  #     - ResNet18
  #     # - ResNet34
  #     # - ResNet50
  #     # - ResNet101
  #     # - ResNet152
  #   do: # This script configures each defence
  #     cmd: >-
  #       bash models.sh 
  #       hydra.sweeper.n_jobs=8
  #       ++model.init.name=torch_example.${item} 
  #       ~attack
  #       atk_name="Benign"
  #       model_name=${item}
  #       stage=train 
  #       --config-name ${dataset}.yaml 
  #     deps:
  #     - models.sh
  #     - ${files.directory}/${files.model_dir}/${files.model_file}${files.model_type}
  #     - ${files.directory}/${files.model_dir}/${files.model_file}.optimizer${files.model_type}
  #     outs:
  #     - ${files.directory}/logs/train/${item}
  attacks:
    foreach: # This is a loop over the ResNet models
      - ResNet18
      # - ResNet34
      # - ResNet50
      # - ResNet101
      # - ResNet152
    do:
      cmd: >- 
        bash attacks.sh 
        ++model.init.name=torch_example.${item} 
        stage=attack 
        model_name=${item}
        hydra.sweeper.n_jobs=8
        attack.attack_size=100
        +direction="[maximize,maximize]"
        +optimizers="[accuracy,adv_accuracy]"
        --config-name ${dataset}.yaml
      deps:
      - models.sh # This script configures each defence
      - attacks.sh # This script configures each attack
      - ${files.directory}/${files.reports}/attack/${files.name}/${files.score_dict_file} # This is here just to ensure it runs after the attack stage
      - ${files.directory}/${files.reports}/train/${files.name}/${files.score_dict_file}
      outs:
      - ${files.directory}/logs/attack/${item}
  compile:
    foreach: # iterates through each stage
      - train 
      - attack
    do:
      cmd: python -m deckard.layers.compile --report_folder ${files.directory}/${files.reports}/${item} --results_file ${files.directory}/${files.reports}/${item}.csv
      deps:
      - ${files.directory}/${files.reports}/${item}/
      - ${dataset}.db
      # - ${files.directory}/${files.reports}/${item}/ResNet152.db
      outs:
      - ${files.directory}/${files.reports}/${item}.csv
  clean:
    foreach: # iterates through each stage
      # - train 
      - attack
    do:
      cmd: python -m deckard.layers.clean_data -i ${files.directory}/${files.reports}/${item}.csv -o ${files.directory}/${files.reports}/clean_${item}.csv -c conf/clean.yaml
      deps:
      - ${files.directory}/${files.reports}/${item}.csv
      outs:
      - ${files.directory}/${files.reports}/clean_${item}.csv
      params:
        - files.directory
        - files.reports
        - conf/clean.yaml:
          - attacks
          - defences
          - params
          - fillna
  # plot:
  #   cmd : python -m deckard.layers.plots --path ${files.directory}/plots/ --file ${files.directory}/${files.reports}/clean_attack.csv -c conf/plots.yaml
  #   deps:
  #     - ${files.directory}/${files.reports}/clean_attack.csv
  #   plots:
  #     - ${files.directory}/plots/${cat_plot[0].file}
  #     - ${files.directory}/plots/${cat_plot[1].file}
  #     - ${files.directory}/plots/${cat_plot[2].file}
  #     - ${files.directory}/plots/${cat_plot[3].file}
  #     - ${files.directory}/plots/${cat_plot[4].file}
  #     - ${files.directory}/plots/${cat_plot[5].file}
  #     - ${files.directory}/plots/${cat_plot[6].file}
  #     - ${files.directory}/plots/${cat_plot[7].file}
  #     - ${files.directory}/plots/${line_plot[0].file}
  #     - ${files.directory}/plots/${line_plot[1].file}
  #     - ${files.directory}/plots/${line_plot[2].file}
  #     - ${files.directory}/plots/${line_plot[3].file}
  #     - ${files.directory}/plots/${scatter_plot[0].file}
  #   params:
  #     - files.directory
  #     - files.reports
  #     - conf/plots.yaml:
  #       - line_plot
  #       - scatter_plot
  #       - cat_plot
  # afr:
  #   cmd: python -m deckard.layers.afr --dataset ${files.directory} --data_file ${files.directory}/${files.reports}/clean_attack.csv  --target adv_accuracy --duration_col predict_time --dataset cifar100 --config_file conf/afr.yaml --plots_folder ${files.directory}/plots/
  #   deps:
  #     - ${files.directory}/${files.reports}/clean_attack.csv
  #   plots:
  #     - ${files.directory}/plots/weibull_aft.eps
  #     - ${files.directory}/plots/weibull_epochs_partial_effect.eps
  #     - ${files.directory}/plots/weibull_layers_partial_effect.eps
  #     - ${files.directory}/plots/log_logistic_aft.eps
  #     - ${files.directory}/plots/log_logistic_epochs_partial_effect.eps
  #     - ${files.directory}/plots/log_logistic_layers_partial_effect.eps
  #     - ${files.directory}/plots/log_normal_aft.eps
  #     - ${files.directory}/plots/log_normal_epochs_partial_effect.eps
  #     - ${files.directory}/plots/log_normal_layers_partial_effect.eps
  #   metrics:
  #     - ${files.directory}/plots/aft_comparison.csv
  #   outs:
  #     - ${files.directory}/plots/aft_comparison.tex
  #   params:
  #     - files.directory
  #     - conf/afr.yaml:
  #       - covariates
  #       - weibull
  #       - log_logistic
  #       - log_normal
  # copy_results:
  #     cmd: mkdir -p ~/ml_afr/cifar100 &&  cp -r ${files.directory}/plots/* ~/ml_afr/cifar100
  #     deps:
  #       - ${files.directory}/plots/