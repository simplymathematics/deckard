stages:
  parse:
    foreach:  
      - mnist
      - cifar
      - cifar100
    do:
      cmd: python -m deckard.layers.parse --config_file ${item}.yaml --params_file ${item}.yaml
      deps:
        - conf/data
        - conf/model
        - conf/attack
        - conf/scorers
        - conf/files
        - conf/${item}.yaml
      outs:
        - ${item}.yaml :
            cache: True
            persist: True
  train:
    foreach:
      - mnist
      - cifar
      - cifar100
    do:
      cmd: python -m deckard.layers.experiment train@${item} --config_file ${item}.yaml --params_file ${item}.yaml
      params:
        - data
        - model
        - scorers
        - files
        - def_name
        - atk_name
        - device_id
      outs:
        - ${item}/${files.model_dir}/${files.model_file}${files.model_type}
        - ${item}/${files.model_dir}/${files.model_file}.optimizer${files.model_type}
      metrics:
        - ${item}/${files.reports}/train/${files.name}/${files.score_dict_file}
      deps:
        - ${item}.yaml
  attack:
    foreach:
      - mnist
      - cifar
      - cifar100
    do:
      cmd: python -m deckard.layers.experiment attack@${item} --config_file ${item}.yaml --params_file ${item}.yaml
      params:
        - data
        - model
        - attack
        - scorers
        - files
        - def_name
        - atk_name
        - dataset
        - device_id
      outs:
        - ${item}/${files.attack_dir}/${files.attack_file}${files.attack_type}
      deps:
        - ${item}/${files.model_dir}/${files.model_file}${files.model_type}
        - ${item}/${files.model_dir}/${files.model_file}.optimizer${files.model_type}
      metrics:
        - ${item}/${files.reports}/attack/${files.name}/${files.score_dict_file}
        ##############################################################################
  # models: # This is a loop over the ResNet models
  #   matrix:
  #     model : [ResNet18, ResNet34, ResNet50, ResNet101, ResNet152]
  #     dataset : [mnist, cifar, cifar100]
  #   cmd: >-
  #     bash models.sh 
  #     hydra.sweeper.n_jobs=8
  #     ++model.init.name=torch_example.${item.model} 
  #     ~attack
  #     atk_name="Benign"
  #     model_name=${item.model}
  #     dataset=${item.dataset}
  #     data=${item.dataset}
  #     stage=train
  #     --config-name ${item.dataset}.yaml
  #   deps:
  #     - models.sh
  #     - ${item.dataset}/${files.reports}/train/${files.name}/${files.score_dict_file}
  #   outs:
  #     - ${item.dataset}/${files.reports}/train/${item.model}/
  attacks:
    matrix:
      atk_name : [FGM, PGD, Deep, Pixel, Thresh, HSJ]
      dataset : [mnist, cifar, cifar100]
      model : [ResNet18, ResNet34, ResNet50, ResNet101, ResNet152]
      epochs : [1, 10, 20, 30, 50, 100] #
    cmd: >- 
      bash scripts/${item.atk_name}.sh 
      ++model.init.name=torch_example.${item.model} 
      stage=attack
      model_name=${item.model}
      attack.attack_size=100
      model.trainer.nb_epochs=${item.epochs}
      data=torch_${item.dataset}
      model=torch_${item.dataset}
      +direction="[maximize,maximize,minimize]"
      ++optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name ${item.dataset}.yaml
    deps:
      - ${item.dataset}/${files.reports}/attack/${files.name}/${files.score_dict_file} # This is here just to ensure it runs after the attack stage
      - ${item.dataset}/${files.reports}/train/${files.name}/${files.score_dict_file}
      - scripts/${item.atk_name}.sh
      - scripts/models.sh
    outs:
      - ${item.dataset}/logs/attack/${item.model}/${item.atk_name}/${item.epochs}/:
          cache: True
          persist: True
  compile:
    matrix:
      dataset : [mnist, cifar, cifar100]
      stage : [attack]
    cmd: python -m deckard.layers.compile --report_folder ${item.dataset}/${files.reports}/${item.stage} --results_file ${item.dataset}/${files.reports}/${item.stage}.csv
    deps:
    - ${item.dataset}/reports/${item.stage}/
    - ${item.dataset}/logs/${item.stage}/
    outs:
    - ${item.dataset}/${files.reports}/${item.stage}.csv
  prepare_plot_folder:
    matrix:
      dataset: [mnist, cifar, cifar100]
      stage: [attack]
    cmd:  cp ${item.dataset}/${files.reports}/${item.stage}.csv plots/data/${item.stage}_${item.dataset}.csv
    deps:
      - ${item.dataset}/${files.reports}/${item.stage}.csv
    outs:
      - plots/data/${item.stage}_${item.dataset}.csv
