schema: '2.0'
stages:
  train@mnist:
    cmd: python -m deckard.layers.experiment train@mnist --config_file mnist.yaml
      --params_file mnist.yaml
    deps:
    - path: mnist.yaml
      hash: md5
      md5: 494df904ccf4eb077c0642efde302fee
      size: 6005
    params:
      params.yaml:
        atk_name: hsj
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 4096
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/models/model.optimizer.pt
      hash: md5
      md5: 819be7ee1356bc05118c412a9cd5cfaf
      size: 44781294
    - path: mnist/models/model.pt
      hash: md5
      md5: b35eed5e7919110dbafd89f302763119
      size: 44787138
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: f360441e2ece595105e607ff7606f817
      size: 513
  train@cifar:
    cmd: python -m deckard.layers.experiment train@cifar --config_file cifar.yaml
      --params_file cifar.yaml
    deps:
    - path: cifar.yaml
      hash: md5
      md5: 3d8ae172bf881902533add08c3320f22
      size: 5037
    params:
      params.yaml:
        atk_name: hsj
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 4096
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/models/model.optimizer.pt
      hash: md5
      md5: ae49c7fab3d672633b81ffdb3686da7c
      size: 44781294
    - path: cifar/models/model.pt
      hash: md5
      md5: deb827ff6572444cd38e5c665f68cf86
      size: 44787138
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 6de506b5586db5819216f27787f02602
      size: 517
  train@cifar100:
    cmd: python -m deckard.layers.experiment train@cifar100 --config_file cifar100.yaml
      --params_file cifar100.yaml
    deps:
    - path: cifar100.yaml
      hash: md5
      md5: 6789c3487460b36eba8b1fcce1c53bdf
      size: 5286
    params:
      params.yaml:
        atk_name: hsj
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 4096
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/models/model.optimizer.pt
      hash: md5
      md5: 9a8373a0c4f720033311a7af8928cd20
      size: 44781294
    - path: cifar100/models/model.pt
      hash: md5
      md5: ca0763af9f104ca29fd73cd4e2505f46
      size: 44787138
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 2828de0759bcbc0b85177da75af2ef34
      size: 517
  attack@mnist:
    cmd: python -m deckard.layers.experiment attack@mnist --config_file mnist.yaml
      --params_file mnist.yaml
    deps:
    - path: mnist/models/model.optimizer.pt
      hash: md5
      md5: 819be7ee1356bc05118c412a9cd5cfaf
      size: 44781294
    - path: mnist/models/model.pt
      hash: md5
      md5: b35eed5e7919110dbafd89f302763119
      size: 44787138
    params:
      params.yaml:
        atk_name: hsj
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 128
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 4096
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 12000
                    train_size: 48000
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 4096
                nb_epochs: 1
                verbose: true
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 4096
              nb_epochs: 1
              verbose: true
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        dataset: mnist
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 4096
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/attacks/attack.pkl
      hash: md5
      md5: 2dadc586730977c9c09d8ae3e85b9260
      size: 401574
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: 7ef1746c619bcd38777b3d8fe2493db1
      size: 847
  parse@mnist:
    cmd: python -m deckard.layers.parse --config_file mnist.yaml --params_file mnist.yaml
    deps:
    - path: conf/attack
      hash: md5
      md5: f5637e0106257966dd59bca49db76523.dir
      size: 268
      nfiles: 1
    - path: conf/data
      hash: md5
      md5: ab878db613853b9479b012b228a00d50.dir
      size: 643
      nfiles: 4
    - path: conf/files
      hash: md5
      md5: b10c002322e63c5ed04e88dda4f5b9fa.dir
      size: 1530
      nfiles: 3
    - path: conf/mnist.yaml
      hash: md5
      md5: 0bbf6f3ec44e817e9ba0a183e6011f14
      size: 1417
    - path: conf/model
      hash: md5
      md5: ea1de23c4f814b6091cec3063d25ac62.dir
      size: 2094
      nfiles: 10
    - path: conf/scorers
      hash: md5
      md5: 1316006b6b9fbc05fd8ed56d46e15718.dir
      size: 279
      nfiles: 1
    outs:
    - path: mnist.yaml
      hash: md5
      md5: 494df904ccf4eb077c0642efde302fee
      size: 6005
  parse@cifar:
    cmd: python -m deckard.layers.parse --config_file cifar.yaml --params_file cifar.yaml
    deps:
    - path: conf/attack
      hash: md5
      md5: f5637e0106257966dd59bca49db76523.dir
      size: 268
      nfiles: 1
    - path: conf/cifar.yaml
      hash: md5
      md5: 17424e1d0a929e12e4c6a1a423eaee92
      size: 1418
    - path: conf/data
      hash: md5
      md5: ab878db613853b9479b012b228a00d50.dir
      size: 643
      nfiles: 4
    - path: conf/files
      hash: md5
      md5: b10c002322e63c5ed04e88dda4f5b9fa.dir
      size: 1530
      nfiles: 3
    - path: conf/model
      hash: md5
      md5: ea1de23c4f814b6091cec3063d25ac62.dir
      size: 2094
      nfiles: 10
    - path: conf/scorers
      hash: md5
      md5: 1316006b6b9fbc05fd8ed56d46e15718.dir
      size: 279
      nfiles: 1
    outs:
    - path: cifar.yaml
      hash: md5
      md5: 3d8ae172bf881902533add08c3320f22
      size: 5037
  parse@cifar100:
    cmd: python -m deckard.layers.parse --config_file cifar100.yaml --params_file
      cifar100.yaml
    deps:
    - path: conf/attack
      hash: md5
      md5: f5637e0106257966dd59bca49db76523.dir
      size: 268
      nfiles: 1
    - path: conf/cifar100.yaml
      hash: md5
      md5: 52bfb1f6eb415c8fadf298ee169ca12c
      size: 1405
    - path: conf/data
      hash: md5
      md5: ab878db613853b9479b012b228a00d50.dir
      size: 643
      nfiles: 4
    - path: conf/files
      hash: md5
      md5: b10c002322e63c5ed04e88dda4f5b9fa.dir
      size: 1530
      nfiles: 3
    - path: conf/model
      hash: md5
      md5: ea1de23c4f814b6091cec3063d25ac62.dir
      size: 2094
      nfiles: 10
    - path: conf/scorers
      hash: md5
      md5: 1316006b6b9fbc05fd8ed56d46e15718.dir
      size: 279
      nfiles: 1
    outs:
    - path: cifar100.yaml
      hash: md5
      md5: 6789c3487460b36eba8b1fcce1c53bdf
      size: 5286
  attack@cifar:
    cmd: python -m deckard.layers.experiment attack@cifar --config_file cifar.yaml
      --params_file cifar.yaml
    deps:
    - path: cifar/models/model.optimizer.pt
      hash: md5
      md5: ae49c7fab3d672633b81ffdb3686da7c
      size: 44781294
    - path: cifar/models/model.pt
      hash: md5
      md5: deb827ff6572444cd38e5c665f68cf86
      size: 44787138
    params:
      params.yaml:
        atk_name: hsj
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 128
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 4096
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 12000
                    train_size: 48000
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 4096
                nb_epochs: 1
                verbose: true
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 4096
              nb_epochs: 1
              verbose: true
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        dataset: mnist
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 4096
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/attacks/attack.pkl
      hash: md5
      md5: 696d40f25342635e34e08f6d6968f97d
      size: 401574
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 75d524f2d2aa5ea5a375211e99879b70
      size: 865
  attack@cifar100:
    cmd: python -m deckard.layers.experiment attack@cifar100 --config_file cifar100.yaml
      --params_file cifar100.yaml
    deps:
    - path: cifar100/models/model.optimizer.pt
      hash: md5
      md5: 9a8373a0c4f720033311a7af8928cd20
      size: 44781294
    - path: cifar100/models/model.pt
      hash: md5
      md5: ca0763af9f104ca29fd73cd4e2505f46
      size: 44787138
    params:
      params.yaml:
        atk_name: hsj
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 128
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 4096
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 12000
                    train_size: 48000
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 4096
                nb_epochs: 1
                verbose: true
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 4096
              nb_epochs: 1
              verbose: true
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        dataset: mnist
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 4096
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/attacks/attack.pkl
      hash: md5
      md5: 9064e08de19a8d40d39c9bbec8780a86
      size: 401574
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: 007cce41b2d429b67b174b3aa30cac30
      size: 865
