schema: '2.0'
stages:
  train@mnist:
    cmd: python -m deckard.layers.experiment train@mnist --config_file mnist.yaml
      --params_file mnist.yaml
    deps:
    - path: mnist.yaml
      hash: md5
      md5: 494df904ccf4eb077c0642efde302fee
      size: 6005
    params:
      params.yaml:
        atk_name: hsj
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/models/model.optimizer.pt
      hash: md5
      md5: ba33d30facc5b91aba2d608d37ba771f
      size: 44781294
    - path: mnist/models/model.pt
      hash: md5
      md5: a6ae9e91474793326c6a3c139866292f
      size: 44787138
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: 1f33102e4833438d6a2151c8eb49d4e7
      size: 525
  train@cifar:
    cmd: python -m deckard.layers.experiment train@cifar --config_file cifar.yaml
      --params_file cifar.yaml
    deps:
    - path: cifar.yaml
      hash: md5
      md5: 15fc7cec034cfea8e390c77f0ebd2d26
      size: 5037
    params:
      params.yaml:
        atk_name: hsj
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/models/model.optimizer.pt
      hash: md5
      md5: 48311974bdb089e3912a018165e588f1
      size: 44781294
    - path: cifar/models/model.pt
      hash: md5
      md5: 65ee5487dd484d5bb26fde29dd7a6311
      size: 44787138
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 5f47af0c6e48142318d161e0dae6eb06
      size: 526
  train@cifar100:
    cmd: python -m deckard.layers.experiment train@cifar100 --config_file cifar100.yaml
      --params_file cifar100.yaml
    deps:
    - path: cifar100.yaml
      hash: md5
      md5: deb1b04848c71b5819cf21880b4368f0
      size: 5282
    params:
      params.yaml:
        atk_name: hsj
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/models/model.optimizer.pt
      hash: md5
      md5: 1cc5f1335ddd96097060130f3508c04f
      size: 44781294
    - path: cifar100/models/model.pt
      hash: md5
      md5: 926a0e9bfe98ceef42fb9bc060c54218
      size: 44787138
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 8871d4ed73592450b4ceaa09fdfb4c0f
      size: 513
  attack@mnist:
    cmd: python -m deckard.layers.experiment attack@mnist --config_file mnist.yaml
      --params_file mnist.yaml
    deps:
    - path: mnist/models/model.optimizer.pt
      hash: md5
      md5: ba33d30facc5b91aba2d608d37ba771f
      size: 44781294
    - path: mnist/models/model.pt
      hash: md5
      md5: a6ae9e91474793326c6a3c139866292f
      size: 44787138
    params:
      params.yaml:
        atk_name: hsj
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 100
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 1024
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 12000
                    train_size: 48000
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epochs: 1
                verbose: true
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epochs: 1
              verbose: true
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        dataset: mnist
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: mnist/attacks/attack.pkl
      hash: md5
      md5: 0d9b4dcaaffbc077dec93a4ae8c69171
      size: 313766
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: d38a998a2b08eff46f3bab06e7c77d64
      size: 851
  parse@mnist:
    cmd: python -m deckard.layers.parse --config_file mnist.yaml --params_file mnist.yaml
    deps:
    - path: conf/attack
      hash: md5
      md5: f5637e0106257966dd59bca49db76523.dir
      size: 268
      nfiles: 1
    - path: conf/data
      hash: md5
      md5: eafea1e119e2f54e9788ee46101afc79.dir
      size: 645
      nfiles: 4
    - path: conf/files
      hash: md5
      md5: b10c002322e63c5ed04e88dda4f5b9fa.dir
      size: 1530
      nfiles: 3
    - path: conf/mnist.yaml
      hash: md5
      md5: dcb8138852b41741f53abad0130349d9
      size: 1680
    - path: conf/model
      hash: md5
      md5: eb0d17ad4826334ac8488c1683106580.dir
      size: 2095
      nfiles: 10
    - path: conf/scorers
      hash: md5
      md5: 1316006b6b9fbc05fd8ed56d46e15718.dir
      size: 279
      nfiles: 1
    outs:
    - path: mnist.yaml
      hash: md5
      md5: 494df904ccf4eb077c0642efde302fee
      size: 6005
  parse@cifar:
    cmd: python -m deckard.layers.parse --config_file cifar.yaml --params_file cifar.yaml
    deps:
    - path: conf/attack
      hash: md5
      md5: f5637e0106257966dd59bca49db76523.dir
      size: 268
      nfiles: 1
    - path: conf/cifar.yaml
      hash: md5
      md5: 5871fbfbf464a20531b7f4807df68964
      size: 1689
    - path: conf/data
      hash: md5
      md5: eafea1e119e2f54e9788ee46101afc79.dir
      size: 645
      nfiles: 4
    - path: conf/files
      hash: md5
      md5: b10c002322e63c5ed04e88dda4f5b9fa.dir
      size: 1530
      nfiles: 3
    - path: conf/model
      hash: md5
      md5: eb0d17ad4826334ac8488c1683106580.dir
      size: 2095
      nfiles: 10
    - path: conf/scorers
      hash: md5
      md5: 1316006b6b9fbc05fd8ed56d46e15718.dir
      size: 279
      nfiles: 1
    outs:
    - path: cifar.yaml
      hash: md5
      md5: 15fc7cec034cfea8e390c77f0ebd2d26
      size: 5037
  parse@cifar100:
    cmd: python -m deckard.layers.parse --config_file cifar100.yaml --params_file
      cifar100.yaml
    deps:
    - path: conf/attack
      hash: md5
      md5: f5637e0106257966dd59bca49db76523.dir
      size: 268
      nfiles: 1
    - path: conf/cifar100.yaml
      hash: md5
      md5: 0cf155c7b7dcddd465fd57133a054562
      size: 1692
    - path: conf/data
      hash: md5
      md5: eafea1e119e2f54e9788ee46101afc79.dir
      size: 645
      nfiles: 4
    - path: conf/files
      hash: md5
      md5: b10c002322e63c5ed04e88dda4f5b9fa.dir
      size: 1530
      nfiles: 3
    - path: conf/model
      hash: md5
      md5: eb0d17ad4826334ac8488c1683106580.dir
      size: 2095
      nfiles: 10
    - path: conf/scorers
      hash: md5
      md5: 1316006b6b9fbc05fd8ed56d46e15718.dir
      size: 279
      nfiles: 1
    outs:
    - path: cifar100.yaml
      hash: md5
      md5: deb1b04848c71b5819cf21880b4368f0
      size: 5282
  attack@cifar:
    cmd: python -m deckard.layers.experiment attack@cifar --config_file cifar.yaml
      --params_file cifar.yaml
    deps:
    - path: cifar/models/model.optimizer.pt
      hash: md5
      md5: 48311974bdb089e3912a018165e588f1
      size: 44781294
    - path: cifar/models/model.pt
      hash: md5
      md5: 65ee5487dd484d5bb26fde29dd7a6311
      size: 44787138
    params:
      params.yaml:
        atk_name: hsj
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 100
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 1024
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 12000
                    train_size: 48000
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epochs: 1
                verbose: true
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epochs: 1
              verbose: true
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        dataset: mnist
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar/attacks/attack.pkl
      hash: md5
      md5: 974de8139d9ce86187cf824f00e80d95
      size: 313766
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 46802563046219bac6f958866dda96f5
      size: 852
  attack@cifar100:
    cmd: python -m deckard.layers.experiment attack@cifar100 --config_file cifar100.yaml
      --params_file cifar100.yaml
    deps:
    - path: cifar100/models/model.optimizer.pt
      hash: md5
      md5: 1cc5f1335ddd96097060130f3508c04f
      size: 44781294
    - path: cifar100/models/model.pt
      hash: md5
      md5: 926a0e9bfe98ceef42fb9bc060c54218
      size: 44787138
    params:
      params.yaml:
        atk_name: hsj
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 100
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 1024
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                    test_size: 12000
                    train_size: 48000
                initialize:
                  clip_values:
                  - 0
                  - 255
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
                num_classes: 10
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epochs: 1
                verbose: true
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                  test_size: 12000
                  train_size: 48000
              initialize:
                clip_values:
                - 0
                - 255
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
              num_classes: 10
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epochs: 1
              verbose: true
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 12000
            train_size: 48000
        dataset: mnist
        def_name: control
        device_id: gpu
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          directory: mnist
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            clip_values:
            - 0
            - 255
            criterion:
              name: torch.nn.CrossEntropyLoss
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
                test_size: 12000
                train_size: 48000
            initialize:
              clip_values:
              - 0
              - 255
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
            optimizer:
              lr: 0.01
              momentum: 0.9
              name: torch.optim.SGD
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 12000
              train_size: 48000
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
            num_classes: 10
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epochs: 1
            verbose: true
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: cifar100/attacks/attack.pkl
      hash: md5
      md5: 7b3384f27a7edde0d3813ffb297e4123
      size: 313766
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: c2f9e1e3db07148a510a2dd237d22218
      size: 828
  attacks@mnist-ResNet18:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet18  stage=attack model_name=ResNet18
      attack.attack_size=100 data=torch_mnist model=torch_mnist +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name mnist.yaml
    deps:
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: d38a998a2b08eff46f3bab06e7c77d64
      size: 851
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: 1f33102e4833438d6a2151c8eb49d4e7
      size: 525
    outs:
    - path: mnist/logs/attack/ResNet18/
      hash: md5
      md5: 21ccd321fb271ef569c8e2844d3a580c.dir
      size: 539921753
      nfiles: 61569
  attacks@mnist-ResNet50:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet50  stage=attack model_name=ResNet50
      attack.attack_size=100 data=torch_mnist model=torch_mnist +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name mnist.yaml
    deps:
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: d38a998a2b08eff46f3bab06e7c77d64
      size: 851
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: 1f33102e4833438d6a2151c8eb49d4e7
      size: 525
    outs:
    - path: mnist/logs/attack/ResNet50/
      hash: md5
      md5: 31a2f23ef4d25e0fb50579ddc5b6a111.dir
      size: 238399439
      nfiles: 28729
  attacks@mnist-ResNet152:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet152  stage=attack
      model_name=ResNet152 attack.attack_size=100 data=torch_mnist model=torch_mnist
      +direction="[maximize,maximize,minimize]" +optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name mnist.yaml
    deps:
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: b63b8d925ab6db88e3b707ec025800d3
      size: 834
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: f55673763c20d36336fc1a23bd057a5f
      size: 515
    outs:
    - path: mnist/logs/attack/ResNet152/
      hash: md5
      md5: caf83ba317d2b12ecc75f638dc07e7fb.dir
      size: 152486967
      nfiles: 7681
  attacks@mnist-ResNet101:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet101  stage=attack
      model_name=ResNet101 attack.attack_size=100 data=torch_mnist model=torch_mnist
      +direction="[maximize,maximize,minimize]" +optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name mnist.yaml
    deps:
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: d38a998a2b08eff46f3bab06e7c77d64
      size: 851
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: 1f33102e4833438d6a2151c8eb49d4e7
      size: 525
    outs:
    - path: mnist/logs/attack/ResNet101/
      hash: md5
      md5: 14ed49640893e98063aa73c996db5652.dir
      size: 259212024
      nfiles: 25349
  attacks@mnist-ResNet34:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet34  stage=attack model_name=ResNet34
      attack.attack_size=100 data=torch_mnist model=torch_mnist +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name mnist.yaml
    deps:
    - path: mnist/reports/attack/default/score_dict.json
      hash: md5
      md5: d38a998a2b08eff46f3bab06e7c77d64
      size: 851
    - path: mnist/reports/train/default/score_dict.json
      hash: md5
      md5: 1f33102e4833438d6a2151c8eb49d4e7
      size: 525
    outs:
    - path: mnist/logs/attack/ResNet34/
      hash: md5
      md5: f18222865d4ced43dff21f5086e83c3c.dir
      size: 258848998
      nfiles: 31817
  attacks@cifar-ResNet18:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet18  stage=attack model_name=ResNet18
      attack.attack_size=100 data=torch_cifar model=torch_cifar +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name cifar.yaml
    deps:
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 6aae48892e49e75742b1d67a5e1ec276
      size: 838
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 73c3315c8f9def00a519bdf6bb9998e2
      size: 508
    outs:
    - path: cifar/logs/attack/ResNet18/
      hash: md5
      md5: 1f8b0fd2b4e94d6e67d017d9ae9d4ea0.dir
      size: 66807197
      nfiles: 9345
  attacks@cifar-ResNet34:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet34  stage=attack model_name=ResNet34
      attack.attack_size=100 data=torch_cifar model=torch_cifar +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name cifar.yaml
    deps:
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 6aae48892e49e75742b1d67a5e1ec276
      size: 838
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 73c3315c8f9def00a519bdf6bb9998e2
      size: 508
    outs:
    - path: cifar/logs/attack/ResNet34/
      hash: md5
      md5: ca652fb37adbb2bc48c785d3db8cb90e.dir
      size: 57831382
      nfiles: 7681
  attacks@cifar-ResNet50:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet50  stage=attack model_name=ResNet50
      attack.attack_size=100 data=torch_cifar model=torch_cifar +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name cifar.yaml
    deps:
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 6aae48892e49e75742b1d67a5e1ec276
      size: 838
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 73c3315c8f9def00a519bdf6bb9998e2
      size: 508
    outs:
    - path: cifar/logs/attack/ResNet50/
      hash: md5
      md5: 63b0e940b64d9b941c4877ff05ceb4e6.dir
      size: 61565958
      nfiles: 7681
  attacks@cifar-ResNet101:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet101  stage=attack
      model_name=ResNet101 attack.attack_size=100 data=torch_cifar model=torch_cifar
      +direction="[maximize,maximize,minimize]" +optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name cifar.yaml
    deps:
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 6aae48892e49e75742b1d67a5e1ec276
      size: 838
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 73c3315c8f9def00a519bdf6bb9998e2
      size: 508
    outs:
    - path: cifar/logs/attack/ResNet101/
      hash: md5
      md5: 6899712a5e067be74511fd4b85c5531b.dir
      size: 80647437
      nfiles: 7681
  attacks@cifar-ResNet152:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet152  stage=attack
      model_name=ResNet152 attack.attack_size=100 data=torch_cifar model=torch_cifar
      +direction="[maximize,maximize,minimize]" +optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name cifar.yaml
    deps:
    - path: cifar/reports/attack/default/score_dict.json
      hash: md5
      md5: 6aae48892e49e75742b1d67a5e1ec276
      size: 838
    - path: cifar/reports/train/default/score_dict.json
      hash: md5
      md5: 73c3315c8f9def00a519bdf6bb9998e2
      size: 508
    outs:
    - path: cifar/logs/attack/ResNet152/
      hash: md5
      md5: 08cbdcd3ef354342a69c7bbd361ab6f4.dir
      size: 101987846
      nfiles: 7681
  attacks@cifar100-ResNet18:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet18  stage=attack model_name=ResNet18
      attack.attack_size=100 data=torch_cifar100 model=torch_cifar100 +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name cifar100.yaml
    deps:
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: 7396ec38b31f7ff9ae1fcab467a98c6c
      size: 854
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 41191be9e2760b49f21bfe27ccef654c
      size: 514
    outs:
    - path: cifar100/logs/attack/ResNet18/
      hash: md5
      md5: f6fc033b064588576514c93b8901f040.dir
      size: 84069191
      nfiles: 10469
  attacks@cifar100-ResNet34:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet34  stage=attack model_name=ResNet34
      attack.attack_size=100 data=torch_cifar100 model=torch_cifar100 +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name cifar100.yaml
    deps:
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: 7396ec38b31f7ff9ae1fcab467a98c6c
      size: 854
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 41191be9e2760b49f21bfe27ccef654c
      size: 514
    outs:
    - path: cifar100/logs/attack/ResNet34/
      hash: md5
      md5: 40ab74741f8f446b09778c55522e0d23.dir
      size: 45326629
      nfiles: 7681
  attacks@cifar100-ResNet50:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet50  stage=attack model_name=ResNet50
      attack.attack_size=100 data=torch_cifar100 model=torch_cifar100 +direction="[maximize,maximize,minimize]"
      +optimizers="[accuracy,adv_accuracy,adv_success]" --config-name cifar100.yaml
    deps:
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: 7396ec38b31f7ff9ae1fcab467a98c6c
      size: 854
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 41191be9e2760b49f21bfe27ccef654c
      size: 514
    outs:
    - path: cifar100/logs/attack/ResNet50/
      hash: md5
      md5: d74f031721b03ab0b6d0eeab26fdfba3.dir
      size: 46511652
      nfiles: 7681
  attacks@cifar100-ResNet101:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet101  stage=attack
      model_name=ResNet101 attack.attack_size=100 data=torch_cifar100 model=torch_cifar100
      +direction="[maximize,maximize,minimize]" +optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name cifar100.yaml
    deps:
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: 7396ec38b31f7ff9ae1fcab467a98c6c
      size: 854
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 41191be9e2760b49f21bfe27ccef654c
      size: 514
    outs:
    - path: cifar100/logs/attack/ResNet101/
      hash: md5
      md5: 57911c3eaeeb3888a220a1fcf12e8442.dir
      size: 63892972
      nfiles: 7681
  attacks@cifar100-ResNet152:
    cmd: bash attacks.sh  ++model.init.name=torch_example.ResNet152  stage=attack
      model_name=ResNet152 attack.attack_size=100 data=torch_cifar100 model=torch_cifar100
      +direction="[maximize,maximize,minimize]" +optimizers="[accuracy,adv_accuracy,adv_success]"
      --config-name cifar100.yaml
    deps:
    - path: cifar100/reports/attack/default/score_dict.json
      hash: md5
      md5: 7396ec38b31f7ff9ae1fcab467a98c6c
      size: 854
    - path: cifar100/reports/train/default/score_dict.json
      hash: md5
      md5: 41191be9e2760b49f21bfe27ccef654c
      size: 514
    outs:
    - path: cifar100/logs/attack/ResNet152/
      hash: md5
      md5: bef4f0ac68bc29e2b41bd35ee86e5def.dir
      size: 80996700
      nfiles: 7681
  compile@cifar-attack:
    cmd: python -m deckard.layers.compile --report_folder cifar/reports/attack --results_file
      cifar/reports/attack.csv
    deps:
    - path: cifar/logs/attack/
      hash: md5
      md5: 2365da0ad0ddc771391b58f29e0629d9.dir
      size: 368839872
      nfiles: 40070
    - path: cifar/reports/attack/
      hash: md5
      md5: d162737d6cb4cea1828a6d43783cea48.dir
      size: 138500150
      nfiles: 39165
    outs:
    - path: cifar/reports/attack.csv
      hash: md5
      md5: 43c91a97b8255cbdf7c99dd57d79d632
      size: 56925281
  compile@cifar100-attack:
    cmd: python -m deckard.layers.compile --report_folder cifar100/reports/attack
      --results_file cifar100/reports/attack.csv
    deps:
    - path: cifar100/logs/attack/
      hash: md5
      md5: 4450a5fdfd61e8121aabe0558de24e8c.dir
      size: 320797185
      nfiles: 41194
    - path: cifar100/reports/attack/
      hash: md5
      md5: 28cbe7f2be076419d3012e530c2d777a.dir
      size: 94247583
      nfiles: 28251
    outs:
    - path: cifar100/reports/attack.csv
      hash: md5
      md5: 42ed97e251611c15b831dc79f442589f
      size: 45770242
  prepare_plot_folder@cifar100-attack:
    cmd: cp cifar100/reports/attack.csv plots/data/attack_cifar100.csv
    deps:
    - path: cifar100/reports/attack.csv
      hash: md5
      md5: 42ed97e251611c15b831dc79f442589f
      size: 45770242
    outs:
    - path: plots/data/attack_cifar100.csv
      hash: md5
      md5: 42ed97e251611c15b831dc79f442589f
      size: 45770242
  prepare_plot_folder@cifar-attack:
    cmd: cp cifar/reports/attack.csv plots/data/attack_cifar.csv
    deps:
    - path: cifar/reports/attack.csv
      hash: md5
      md5: 43c91a97b8255cbdf7c99dd57d79d632
      size: 56925281
    outs:
    - path: plots/data/attack_cifar.csv
      hash: md5
      md5: 43c91a97b8255cbdf7c99dd57d79d632
      size: 56925281
