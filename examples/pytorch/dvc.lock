schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: torch_mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
          sklearn_pipeline:
            _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: output
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 1.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 20
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: output/data/data.pkl
      md5: de934a5f5157970e5f30b8f3f1856a68
      size: 222320311
    - path: output/models/model.pt
      md5: 35e6acec22b8542c13d4fb2ddf7d4939
      size: 44785941
    - path: output/reports/train/default/params.yaml
      md5: eedabd38cbbfce21b879b647497174da
      size: 2148
    - path: output/reports/train/default/predictions.json
      md5: 3f657fe19090e1bd62209ac130544f93
      size: 2884704
    - path: output/reports/train/default/score_dict.json
      md5: f19e5106d12c8fcf19eb48edf861d949
      size: 401
  attack:
    cmd: python -m deckard.layers.experiment attack
    deps:
    - path: output/data/data.pkl
      md5: de934a5f5157970e5f30b8f3f1856a68
      size: 222320311
    - path: output/models/model.pt
      md5: 38451da384fb8f787707a2b39b8418de
      size: 44786389
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 100
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 100
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                data:
                  _target_: deckard.base.data.Data
                  generate:
                    _target_: deckard.base.data.generator.DataGenerator
                    name: torch_mnist
                  sample:
                    _target_: deckard.base.data.sampler.SklearnDataSampler
                    random_state: 0
                    stratify: true
                  sklearn_pipeline:
                    _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                    preprocessor:
                      name: sklearn.preprocessing.StandardScaler
                      with_mean: true
                      with_std: true
                initialize:
                  clip_values:
                  - 0.0
                  - 1.0
                  criterion:
                    name: torch.nn.CrossEntropyLoss
                  optimizer:
                    lr: 0.01
                    momentum: 0.9
                    name: torch.optim.SGD
                library: pytorch
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                name: torch_example.ResNet18
                num_channels: 1
              library: pytorch
              trainer:
                batch_size: 1024
                nb_epoch: 20
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: torch_mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              initialize:
                clip_values:
                - 0.0
                - 1.0
                criterion:
                  name: torch.nn.CrossEntropyLoss
                optimizer:
                  lr: 0.01
                  momentum: 0.9
                  name: torch.optim.SGD
              library: pytorch
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              name: torch_example.ResNet18
              num_channels: 1
            library: pytorch
            trainer:
              batch_size: 1024
              nb_epoch: 20
        data.generate:
          _target_: deckard.base.data.generator.DataGenerator
          name: torch_mnist
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: output
          model_dir: models
          model_file: model
          model_type: .pt
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: torch_mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            initialize:
              clip_values:
              - 0.0
              - 1.0
              criterion:
                name: torch.nn.CrossEntropyLoss
              optimizer:
                lr: 0.01
                momentum: 0.9
                name: torch.optim.SGD
            library: pytorch
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: torch_mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            name: torch_example.ResNet18
            num_channels: 1
          library: pytorch
          trainer:
            batch_size: 1024
            nb_epoch: 20
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: output/attacks/attack.pkl
      md5: 54345e430aed9ed56a7230ac348900e2
      size: 313766
    - path: output/reports/attack/default/adv_predictions.json
      md5: 1d2980ec86fa5cd4513473630186c9b5
      size: 21523
    - path: output/reports/attack/default/params.yaml
      md5: daf26103182da19d13d5b73113c5688c
      size: 4956
    - path: output/reports/attack/default/score_dict.json
      md5: 39ecdefe26af87802dfaed0e3bcd98b3
      size: 528
  models:
    cmd: bash models.sh
      ++model.init.name=torch_example.ResNet18,torch_example.ResNet34,torch_example.ResNet50
      --config-name grid.yaml
    deps:
    - path: output/data/data.pkl
      md5: de934a5f5157970e5f30b8f3f1856a68
      size: 222320311
    - path: output/models/model.pt
      md5: 38451da384fb8f787707a2b39b8418de
      size: 44786389
    outs:
    - path: model.db
      md5: d1eac324650402da6e3de1aebe0e3b3c
      size: 237568
  attacks:
    cmd: bash attacks.sh
      ++model.init.name=torch_example.ResNet18,torch_example.ResNet34,torch_example.ResNet50
      ++stage=attack --config-name grid.yaml
    deps:
    - path: model.db
      md5: d1eac324650402da6e3de1aebe0e3b3c
      size: 237568
    - path: output/data/data.pkl
      md5: de934a5f5157970e5f30b8f3f1856a68
      size: 222320311
    - path: output/models/model.pt
      md5: 38451da384fb8f787707a2b39b8418de
      size: 44786389
    outs:
    - path: attack.db
      md5: c9f920c7233802e9c46e4051c2da78e6
      size: 307200
  compile_train:
    cmd: python -m deckard.layers.compile --report_folder output/reports/train/ --results_file
      output/reports/train.csv
    deps:
    - path: model.db
      md5: e5dc2d529f4841baf9cccedd7b417988
      size: 110592
    - path: output/data/
      md5: 0078b738d3ac5d26c4c487d9c43903da.dir
      size: 1111601555
      nfiles: 5
    - path: output/models/
      md5: 2dc57f423c263fa18830ef6d532f592f.dir
      size: 1074846
      nfiles: 14
    outs:
    - path: output/reports/train.csv
      md5: 54707302f1ee42d25231d73ee2c03cf3
      size: 12177
  compile_attack:
    cmd: python -m deckard.layers.compile --report_folder output/reports/attack/ --results_file
      output/reports/attack.csv
    deps:
    - path: attack.db
      md5: 576e07b1a496218659b7a425a812412b
      size: 319488
    - path: output/attacks/
      md5: f6967d943832917c2b1e0db449d514f7.dir
      size: 336979704
      nfiles: 1044
    - path: output/data/
      md5: 837a1c3acf188d7955e48419b38d8135.dir
      size: 2445523421
      nfiles: 11
    - path: output/models/
      md5: 33fa241d9672dfc7f7f27927869d4948.dir
      size: 160466396
      nfiles: 2088
    outs:
    - path: output/reports/attack.csv
      md5: 36ffafc8cb80eb6fbed190be9d420ef7
      size: 3674355
  compile@attack:
    cmd: python -m deckard.layers.compile --report_folder output/reports/attack --results_file
      output/reports/attack.csv
    deps:
    - path: attack.db
      md5: c9f920c7233802e9c46e4051c2da78e6
      size: 307200
    - path: model.db
      md5: d1eac324650402da6e3de1aebe0e3b3c
      size: 237568
    - path: output/reports/attack/
      md5: 2e8a51d2322c52e5cb0ea4f98ddff9f3.dir
      size: 1723539519
      nfiles: 3555
    outs:
    - path: output/reports/attack.csv
      md5: bfc77e2b24b86aa390485f2fd60a65c2
      size: 2472144
  compile@train:
    cmd: python -m deckard.layers.compile --report_folder output/reports/train --results_file
      output/reports/train.csv
    deps:
    - path: attack.db
      md5: c9f920c7233802e9c46e4051c2da78e6
      size: 307200
    - path: model.db
      md5: d1eac324650402da6e3de1aebe0e3b3c
      size: 237568
    - path: output/reports/train/
      md5: bb02cab436e3969d65066c5058939207.dir
      size: 395685799
      nfiles: 655
    outs:
    - path: output/reports/train.csv
      md5: 922fa64743aa481feb79213a056c816e
      size: 363649
