##############################################################################
  # These stages use the hydra API to run multiple experiments in series
  # data:
  #   # This stage reads from the conf/ folder directly as per the hydra API
  #   # As we can see, the data stage is a foreach loop that runs the data layer,
  #   # saving the output to the data files directory with a specified type,
  #   # with a given name.
  #   # This can be used to define a stage that runs a single experiment, or a stage for the
  #   # optimisation using the optimise.py script and the hydrasweeper API
  #   foreach:
  #     small:
  #       data: conf/data/small.yaml:data
  #     medium:
  #       data: conf/data/medium.yaml:data
  #     large:
  #       data: conf/data/large.yaml:data
  #   do:
  #     cmd : python -m deckard.layers.data --data_config_name ${key}
  #     params :
  #         - data
  #         - files
  #     outs :
  #         - ${files.directory}/${files.data_dir}/${key}${files.data_type}
  # models:
  #   # This stage reads from the conf/ folder directly as per the hydra API
  #   # As we can see, the model stage is a foreach loop that runs the model layer,
  #   # saving the output to the model files directory with a specified type,
  #   # with a given name. It also takes the data file as an input, so that it
  #   # can easily be varied independently of the data layer.
  #   foreach:
  #     linear:
  #       model : conf/model/linear.yaml:model
  #       data_file : small
  #     rbf:
  #       model : conf/model/rbf.yaml:model
  #       data_file : small
  #     poly:
  #       model : conf/model/poly.yaml:model
  #       data_file : small
  #   do:
  #     cmd: python -m deckard.layers.model --model_config_name ${key}  --overrides=files.data_file=${item.data_file}
  #     deps:
  #     - ${files.directory}/${files.data_dir}/${item.data_file}${files.data_type}
  #     outs:
  #     - ${files.directory}/${files.model_dir}/${key}${files.model_type}
  #     params:
  #     - data
  #     - model
  #     - files
  # attacks:
  #   # This stage reads from the conf/ folder directly as per the hydra API
  #   # As we can see, the attack stage is a foreach loop that runs the attack layer,
  #   # saving the output to the attack files directory with a specified type,
  #   # with a given name. It also takes the data and model files as inputs, so that it
  #   # can easily be varied independently of the data and model layers. You can also
  #   # vary the attacks as above.
  #   foreach:
  #     linear:
  #       model : conf/model/linear.yaml:model
  #       data: conf/model/small.yaml:data
  #       attack : conf/attack/hsj.yaml:attack
  #       attack_file : hsj
  #       data_file : small
  #       model_file : linear
  #     rbf:
  #       model : conf/model/rbf.yaml:model
  #       data: conf/model/small.yaml:data
  #       attack : conf/attack/hsj.yaml:attack
  #       attack_file : hsj
  #       data_file : small
  #       model_file : rbf
  #     poly:
  #       model : conf/model/poly.yaml:model
  #       data: conf/model/small.yaml:data
  #       attack : conf/attack/hsj.yaml:attack
  #       attack_file : hsj
  #       data_file : small
  #       model_file : poly
  #   do:
  #     cmd: python -m deckard.layers.attack --model_config_name ${key} --overrides=files.model_file=${item.model_file},files.data_file=${item.data_file},files.attack_file=${key},attack=${item.attack_file}
  #     deps:
  #     - ${files.directory}/${files.data_dir}/${item.data_file}${files.data_type}
  #     - ${files.directory}/${files.model_dir}/${key}${files.model_type}
  #     outs:
  #     - ${files.directory}/${files.attack_dir}/${key}${files.attack_type}
  #     params:
  #     - data
  #     - model
  #     - attack
  #     - files
