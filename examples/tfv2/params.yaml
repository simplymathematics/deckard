attack:
  _target_: deckard.base.attack.Attack
  attack_size: 10
  data:
    _target_: deckard.base.data.Data
    generate:
      _target_: deckard.base.data.generator.DataGenerator
      name: mnist
    sample:
      _target_: deckard.base.data.sampler.SklearnDataSampler
      random_state: 0
      stratify: true
    sklearn_pipeline:
      _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
      preprocessor:
        name: sklearn.preprocessing.StandardScaler
        with_mean: true
        with_std: true
  init:
    _target_: deckard.base.attack.AttackInitializer
    batch_size: 1024
    init_eval: 10
    max_eval: 10
    max_iter: 10
    model:
      _target_: deckard.base.model.Model
      art:
        _target_: deckard.base.model.art_pipeline.ArtPipeline
        initialize: null
        library: tensorflow
      data:
        _target_: deckard.base.data.Data
        generate:
          _target_: deckard.base.data.generator.DataGenerator
          name: mnist
        sample:
          _target_: deckard.base.data.sampler.SklearnDataSampler
          random_state: 0
          stratify: true
        sklearn_pipeline:
          _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
          preprocessor:
            name: sklearn.preprocessing.StandardScaler
            with_mean: true
            with_std: true
      init:
        _target_: deckard.base.model.ModelInitializer
        loss_object:
          class_name: CategoricalCrossentropy
          config:
            from_logits: true
        name: tfv2_example.TFNet
        optimizer:
          class_name: SGD
          config:
            learning_rate: 0.001
      library: tensorflow
      trainer:
        batch_size: 1024
        nb_epoch: 20
        verbose: true
    name: art.attacks.evasion.HopSkipJump
  method: evasion
  model:
    _target_: deckard.base.model.Model
    art:
      _target_: deckard.base.model.art_pipeline.ArtPipeline
      initialize: null
      library: tensorflow
    data:
      _target_: deckard.base.data.Data
      generate:
        _target_: deckard.base.data.generator.DataGenerator
        name: mnist
      sample:
        _target_: deckard.base.data.sampler.SklearnDataSampler
        random_state: 0
        stratify: true
      sklearn_pipeline:
        _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
        preprocessor:
          name: sklearn.preprocessing.StandardScaler
          with_mean: true
          with_std: true
    init:
      _target_: deckard.base.model.ModelInitializer
      loss_object:
        class_name: CategoricalCrossentropy
        config:
          from_logits: true
      name: tfv2_example.TFNet
      optimizer:
        class_name: SGD
        config:
          learning_rate: 0.001
    library: tensorflow
    trainer:
      batch_size: 1024
      nb_epoch: 20
      verbose: true
data:
  _target_: deckard.base.data.Data
  generate:
    _target_: deckard.base.data.generator.DataGenerator
    name: mnist
  sample:
    _target_: deckard.base.data.sampler.SklearnDataSampler
    random_state: 0
    stratify: true
  sklearn_pipeline:
    _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
    preprocessor:
      name: sklearn.preprocessing.StandardScaler
      with_mean: true
      with_std: true
files:
  _target_: deckard.base.files.FileConfig
  adv_predictions_file: adv_predictions.json
  adv_probabilities_file: adv_probabilities.json
  attack_dir: attacks
  attack_file: attack
  attack_type: .pkl
  data_dir: data
  data_file: data
  data_type: .pkl
  directory: output
  model_dir: models
  model_file: model
  model_type: .tf
  params_file: params.yaml
  predictions_file: predictions.json
  probabilities_file: probabilities.json
  reports: reports
  score_dict_file: score_dict.json
  test_labels_file: test_labels.json
  train_labels_file: train_labels.json
model:
  _target_: deckard.base.model.Model
  art:
    _target_: deckard.base.model.art_pipeline.ArtPipeline
    initialize: null
    library: tensorflow
  data:
    _target_: deckard.base.data.Data
    generate:
      _target_: deckard.base.data.generator.DataGenerator
      name: mnist
    sample:
      _target_: deckard.base.data.sampler.SklearnDataSampler
      random_state: 0
      stratify: true
    sklearn_pipeline:
      _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
      preprocessor:
        name: sklearn.preprocessing.StandardScaler
        with_mean: true
        with_std: true
  init:
    _target_: deckard.base.model.ModelInitializer
    loss_object:
      class_name: CategoricalCrossentropy
      config:
        from_logits: true
    name: tfv2_example.TFNet
    optimizer:
      class_name: SGD
      config:
        learning_rate: 0.001
  library: tensorflow
  trainer:
    batch_size: 1024
    nb_epoch: 20
    verbose: true
scorers:
  _target_: deckard.base.scorer.ScorerDict
  accuracy:
    _target_: deckard.base.scorer.ScorerConfig
    direction: maximize
    name: sklearn.metrics.accuracy_score
  log_loss:
    _target_: deckard.base.scorer.ScorerConfig
    direction: minimize
    name: sklearn.metrics.log_loss
