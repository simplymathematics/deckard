schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            _target_: deckard.base.data.generator.DataGenerator
            name: mnist
          sample:
            _target_: deckard.base.data.sampler.SklearnDataSampler
            random_state: 0
            stratify: true
          sklearn_pipeline:
            _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          adv_probabilities_file: adv_probabilities.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: output
          model_dir: models
          model_file: model
          model_type: .tf
          params_file: params.yaml
          predictions_file: predictions.json
          probabilities_file: probabilities.json
          reports: reports
          score_dict_file: score_dict.json
          test_labels_file: test_labels.json
          train_labels_file: train_labels.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
            library: tensorflow
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            loss_object:
              class_name: CategoricalCrossentropy
              config:
                from_logits: true
            name: tfv2_example.TFNet
            optimizer:
              class_name: SGD
              config:
                learning_rate: 0.001
          library: tensorflow
          trainer:
            batch_size: 64
            nb_epoch: 1
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: output/data/data.pkl
      md5: 8b80b882758b381c2a461d1e9b9b2439
      size: 441840345
    - path: output/models/model.tf
      md5: 265fd4f79a403c523a2b2353ec6e6cab.dir
      size: 167515
      nfiles: 5
    - path: output/reports/train/predictions.json
      md5: d30043c1764a5e2545830ebf0a9c2d5d
      size: 2853811
    - path: output/reports/train/probabilities.json
      md5: d30043c1764a5e2545830ebf0a9c2d5d
      size: 2853811
    - path: output/reports/train/score_dict.json
      md5: 110432525713e4e1b2d74f2083cd4a86
      size: 394
    - path: output/reports/train/test_labels.json
      md5: f26b1ad6bd01a70de4290c6ae713e2c7
      size: 728000
    - path: output/reports/train/train_labels.json
      md5: b78e69f96f37e36ba2cf279422642325
      size: 2912000
  attack:
    cmd: python -m deckard.layers.experiment attack
    deps:
    - path: output/data/data.pkl
      md5: 8b80b882758b381c2a461d1e9b9b2439
      size: 441840345
    - path: output/models/model.tf
      md5: bab0a96c07a8dd4284d2ae89cf1561cd.dir
      size: 148092
      nfiles: 5
    params:
      params.yaml:
        attack:
          _target_: deckard.base.attack.Attack
          attack_size: 10
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.attack.AttackInitializer
            batch_size: 64
            init_eval: 10
            max_eval: 10
            max_iter: 10
            model:
              _target_: deckard.base.model.Model
              art:
                _target_: deckard.base.model.art_pipeline.ArtPipeline
                initialize:
                library: tensorflow
              data:
                _target_: deckard.base.data.Data
                generate:
                  _target_: deckard.base.data.generator.DataGenerator
                  name: mnist
                sample:
                  _target_: deckard.base.data.sampler.SklearnDataSampler
                  random_state: 0
                  stratify: true
                sklearn_pipeline:
                  _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                  preprocessor:
                    name: sklearn.preprocessing.StandardScaler
                    with_mean: true
                    with_std: true
              init:
                _target_: deckard.base.model.ModelInitializer
                loss_object:
                  class_name: CategoricalCrossentropy
                  config:
                    from_logits: true
                name: tfv2_example.TFNet
                optimizer:
                  class_name: SGD
                  config:
                    learning_rate: 0.001
              library: tensorflow
              trainer:
                batch_size: 64
                nb_epoch: 1
            name: art.attacks.evasion.HopSkipJump
          method: evasion
          model:
            _target_: deckard.base.model.Model
            art:
              _target_: deckard.base.model.art_pipeline.ArtPipeline
              initialize:
              library: tensorflow
            data:
              _target_: deckard.base.data.Data
              generate:
                _target_: deckard.base.data.generator.DataGenerator
                name: mnist
              sample:
                _target_: deckard.base.data.sampler.SklearnDataSampler
                random_state: 0
                stratify: true
              sklearn_pipeline:
                _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
                preprocessor:
                  name: sklearn.preprocessing.StandardScaler
                  with_mean: true
                  with_std: true
            init:
              _target_: deckard.base.model.ModelInitializer
              loss_object:
                class_name: CategoricalCrossentropy
                config:
                  from_logits: true
              name: tfv2_example.TFNet
              optimizer:
                class_name: SGD
                config:
                  learning_rate: 0.001
            library: tensorflow
            trainer:
              batch_size: 64
              nb_epoch: 1
        data.generate:
          _target_: deckard.base.data.generator.DataGenerator
          name: mnist
        files:
          _target_: deckard.base.files.FileConfig
          adv_predictions_file: adv_predictions.json
          adv_probabilities_file: adv_probabilities.json
          attack_dir: attacks
          attack_file: attack
          attack_type: .pkl
          data_dir: data
          data_file: data
          data_type: .pkl
          directory: output
          model_dir: models
          model_file: model
          model_type: .tf
          params_file: params.yaml
          predictions_file: predictions.json
          probabilities_file: probabilities.json
          reports: reports
          score_dict_file: score_dict.json
          test_labels_file: test_labels.json
          train_labels_file: train_labels.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
            library: tensorflow
          data:
            _target_: deckard.base.data.Data
            generate:
              _target_: deckard.base.data.generator.DataGenerator
              name: mnist
            sample:
              _target_: deckard.base.data.sampler.SklearnDataSampler
              random_state: 0
              stratify: true
            sklearn_pipeline:
              _target_: deckard.base.data.sklearn_pipeline.SklearnDataPipeline
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            loss_object:
              class_name: CategoricalCrossentropy
              config:
                from_logits: true
            name: tfv2_example.TFNet
            optimizer:
              class_name: SGD
              config:
                learning_rate: 0.001
          library: tensorflow
          trainer:
            batch_size: 64
            nb_epoch: 1
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: output/attacks/attack.pkl
      md5: 6e05db6a7eb04e5033e5452df75d714d
      size: 31517
    - path: output/reports/attack/adv_predictions.json
      md5: 958ba8e2e66058200a9caac5c2335aa0
      size: 2104
    - path: output/reports/attack/adv_probabilities.json
      md5: 958ba8e2e66058200a9caac5c2335aa0
      size: 2104
    - path: output/reports/attack/score_dict.json
      md5: ba1f43095378c8d03ef5edbc008818d3
      size: 506
