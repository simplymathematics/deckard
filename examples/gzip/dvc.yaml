vars:
  - conf/default.yaml:hydra
stages:
  ##############################################################################
  # These stages use the dvc API to run a single experiment at a time using a
  # deckard.Experiment object. This parses this file, saves the default hydra configuration
  # to params.yaml, and then runs the experiment with the given parameters.
  # This can be used to define a stage that runs a single experiment, or a stage for the
  # optimisation using the optimise.py script and the hydrasweeper API. This API is primarily used for
  # development and testing, as it is easier to run a single experiment at a time and debug it using
  # DVC's git-like features to track changes and minimise run time.
  ##############################################################################
  train:
    cmd: python -m deckard.layers.experiment train
    metrics:
    - ${files.directory}/${files.reports}/train/${files.name}/${files.score_dict_file}
    outs:
    # - ${files.directory}/${files.data_dir}/${files.data_file}${files.data_type}
    # - ${files.directory}/${files.model_dir}/${files.model_file}${files.model_type}
    - ${files.directory}/${files.reports}/train/${files.name}/${files.predictions_file}
    params:
    - data
    - model
    - scorers
    - files
    - dataset
    - model_name
  ##############################################################################
  test_each_method:
    matrix:
      method: [knn, svc, medoid, sum, random]
      dataset : [kdd_nsl, truthseeker]
    cmd : >-
      python -m deckard.layers.optimise 
      stage=train 
      model.init.method=${item.method} 
      model.init.m=10 
      files.name=${item.method}
      files.directory=${item.dataset}
      data=${item.dataset}
      dataset=${item.dataset}
      model_name=${model_name}
      model.init.distance_matrix=${item.dataset}/${files.model_dir}/${model_name}/${model.init.compressor}/${item.method}.npz
      ++raise_exception=True 
    deps:
    - params.yaml
    - ${files.directory}/${files.reports}/train/default/${files.score_dict_file}
    outs:
    - ${item.dataset}/${files.reports}/train/${item.method}/${files.score_dict_file}
    params:
      - data
      - model
      - scorers
      - files
      - dataset
      - model_name
      - device_id
  ##############################################################################
  prepare_distance_matrices:
    matrix:
      random_state: [0,1,2,3,4,5,6,7,8,9]
      train_size: [100,1000]
      dataset : [kdd_nsl, truthseeker]
    cmd: >-
      python -m deckard.layers.optimise 
      files.name=${item.random_state}-${item.train_size}
      stage=train 
      data=${item.dataset}
      dataset=${item.dataset}
      data.sample.random_state=${item.random_state}
      data.sample.train_size=${item.train_size}
      dataset=${dataset}
      files.directory=${item.dataset}
      model_name=${model_name}
      model=${model_name}
      model.init.distance_matrix=${item.dataset}/${files.model_dir}/${model_name}/${model.init.compressor}/${item.random_state}-${item.train_size}.npz
      model.init.method=random 
      model.init.m=100
      ++raise_exception=True
    deps:
    - ${files.directory}/${files.reports}/train/default/${files.score_dict_file}
    outs:
    - ${item.dataset}/${files.model_dir}/${model_name}/${model.init.compressor}/${item.random_state}-${item.train_size}.npz:
        cache: true
        persist: true
    - ${item.dataset}/${files.reports}/train/${item.random_state}-${item.train_size}/${files.score_dict_file}
    params:
    - data
    - model
    - scorers
    - files
    - dataset
    - model_name
    - device_id
  # attack:
  #   cmd: python -m deckard.layers.experiment attack
  #   deps:
  #   - ${files.directory}/${files.data_dir}/${files.data_file}${files.data_type}
  #   - ${files.directory}/${files.model_dir}/${files.model_file}${files.model_type}
  #   metrics:
  #   - ${files.directory}/${files.reports}/attack/${files.name}/${files.score_dict_file}
  #   outs:
  #   - ${files.directory}/${files.reports}/attack/${files.name}/${files.adv_probabilities_file}
  #   params:
  #   - data
  #   - model
  #   - attack
  #   - scorers
  #   - files
  ##############################################################################
  model_optimise_k:
    matrix:
      dataset : [kdd_nsl, truthseeker]
      model_name : [gzip_classifier]
    cmd: >-
      python -m deckard.layers.optimise  
      data.sample.random_state=0,1,2,3,4,5,6,7,8,9
      data.sample.train_size=100,1000,.8
      dataset=${item.dataset} 
      data=${item.dataset} 
      model=${item.model_name} 
      model_name=${item.model_name} 
      model.init.k=1,3,5,7
      files.name=${item.model_name}
      files.directory=${item.dataset}
      hydra.sweep.dir=${item.dataset}/logs/k/${item.model_name} 
      hydra.sweeper.study_name=${item.model_name}_${item.dataset}_k 
      hydra.sweeper.n_trials=120 
      hydra.sweeper.n_jobs=128
      --multirun 
    # n_trials = random_state * train_size * k
    deps:
    - ${dataset}/${files.reports}/train/${files.name}/${files.score_dict_file}
    outs:
    - ${item.dataset}/logs/k/${item.model_name}
    # Also creates a database at ./optuna.db, but I don't want to track this because DVC won't let me use the same DB for multiple stages. Instead, we append to this if we need to run more trials.
    params:
    - conf/default.yaml:
      - hydra
    - dataset
    - model_name
  find_best_k:
    matrix:
      dataset : [kdd_nsl, truthseeker]
      model_name : [gzip_classifier]
    cmd: >-
      python -m deckard.layers.find_best 
      --params_file best_k_${item.model_name} 
      --config_folder conf
      --default_config default.yaml
      --study_name ${item.model_name}_${item.dataset}_k
      --config_subdir model  
      --study_csv ${item.dataset}/${files.reports}/summaries/${item.model_name}_${item.dataset}.csv  
      --study_name=${item.model_name}_${item.dataset}_k
      --storage_name=sqlite:///optuna.db
    deps:
    - ${item.dataset}/logs/k/${item.model_name}
    outs:
    -  conf/model/best_k_${item.model_name}_${item.dataset}.yaml
    params:
    - conf/default.yaml:
      - hydra
    - model_name
    - dataset
  model_optimise_m:
    cmd: >-
      python -m deckard.layers.optimise  
      data.sample.random_state=0,1,2,3,4,5,6,7,8,9 
      data.sample.train_size=10,100,1000,.8 dataset=${dataset} 
      data=${dataset} 
      model=best_k_${model_name}.yaml 
      model_name=${model_name} 
      model.init.m=10,20,50,100,200,500,1000  
      model.init.method="random","svc","medoid","sum" 
      hydra.sweep.dir=${files.directory}/logs/m/${dataset}/${model_name} 
      hydra.sweeper.study_name=${model_name}_${dataset}_m --multirun 
    deps:
    - ${files.directory}/${files.reports}/train/${files.name}/${files.score_dict_file}
    - conf/model/best_k_${model_name}.yaml
    outs:
    - ${files.directory}/logs/m/${dataset}/${model_name}
    params:
    - conf/default.yaml:
      - hydra
    - dataset
    - model_name
  find_best_m:
    matrix:
      dataset : [kdd_nsl, truthseeker]
      model_name : [gzip_classifier]
    cmd: >-
      python -m deckard.layers.find_best 
      --study_name ${item.model_name}_${item.dataset}_m 
      --config_folder conf  
      --config_subdir model  
      --params_file best_m_${item.model_name}_${item.dataset}
      --study_csv ${item.dataset}/${files.reports}/summaries/${model_name}_${item.dataset}.csv
      --storage_name=sqlite:///optuna.db
    deps:
    - ${item.dataset}/logs/m/${item.model_name}
    outs:
    - conf/model/best_m_${item.model_name}_${item.dataset}.yaml
    params:
    - conf/default.yaml:
      - hydra
    - model_name
    - dataset
  ##############################################################################
  # attack_optimise:
  #   cmd: python -m deckard.layers.optimise +stage=attack +optimizers=adv_accuracy model=best --multirun --config-name attack
  #   deps:
  #   - ${files.directory}/${files.data_dir}/${files.data_file}${files.data_type}
  #   - ${files.directory}/${files.model_dir}/${files.model_file}${files.model_type}
  #   - conf/model/best.yaml
  #   outs:
  #   - attack.db
  #   params:
  #   - conf/attack.yaml:
  #     - hydra
  # find_best_attack:
  #   cmd: python -m deckard.layers.find_best attack.yaml
  #   deps:
  #   - attack.db
  #   outs:
  #   - conf/attack/best.yaml
  ##############################################################################
  # defend:study_n
  #   cmd : bash models.sh
  #   deps:
  #   - model.db
  #   outs:
  #   - multirun
  # attack-again:
  #   cmd : bash attacks.sh
  #   deps:
  #   - attack.db