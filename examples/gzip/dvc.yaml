vars:
  - conf/knn.yaml:hydra
  - conf/plots.yaml:line_plot
  - conf/plots.yaml:cat_plot
  # - conf/condensed_plots.yaml:line_plot
  # - conf/clean.yaml:params
  - conf/clean.yaml:fillna
  - conf/clean.yaml:replace
stages:
  ##############################################################################
  # These stages use the dvc API to run a single experiment at a time using a
  # deckard.Experiment object. This parses this file, saves the default hydra configuration
  # to params.yaml, and then runs the experiment with the given parameters.
  # This can be used to define a stage that runs a single experiment, or a stage for the
  # optimisation using the optimise.py script and the hydrasweeper API. This API is primarily used for
  # development and testing, as it is easier to run a single experiment at a time and debug it using
  # DVC's git-like features to track changes and minimise run time. 

  # This stage will parse the conf/knn.yaml file and save it to params.yaml
  # In addition, it will define a schema stage that will will 
  # 1. Determine the file paths for the data and model files (if specified)
  # 2. Run the experiment with the given parameters
  # 3. Save the results to the given file paths (will always save a score_dict_file, and a params_file to files.directory/files.reports/stage/)
  # 4. Save a 'params.yaml' file with the scores (Always)
  # 5. Save the predictions to the given file paths (if specified)
  # 6. Save the probabilities to the given file paths (if specified)
  # 7. Save the (final) losses to the given file paths (if specified)
  # 8. Save the train/test labels to the given file paths (if specified)

  # You can arbitrarily define parameters in the 'conf' folder.
  # To parse the parameters, you can use the 'hydra' API to define a schema for the parameters
  # Or run `deckard.layers.parse` to parse the parameters and save them to a file.  
  ##############################################################################
  data:
    desc: "This stage will parse the conf/knn.yaml file and save it to params.yaml"
    cmd: python data_prep.py
    outs:
      - raw_data/
    deps:
      - data_prep.py
  parse_params:
    cmd: python -m deckard.layers.parse  --config_file knn
    deps:
      - conf/data
      - conf/model
      - conf/files
      - conf/scorers
      - conf/knn.yaml
    outs:
      - params.yaml:
          cache: true
          desc : "Parsed parameters for the experiment"
          persist: true
          push : true
  train:
    cmd: python -m deckard.layers.experiment train
    metrics:
    - ${files.directory}/${files.reports}/train/${files.name}/${files.score_dict_file}
    outs:
    - ${files.directory}/${files.reports}/train/${files.name}/${files.predictions_file}
    - ${files.directory}/${files.data_dir}/${files.data_file}${files.data_type}/:
        cache: true
        persist: true
        push: true
    params:
    - data
    - model
    - scorers
    - files
    - dataset
    - model_name
    - algorithm
    deps:
    - params.yaml # The default configuration file, as defined in the 'parse_params' stage
    - raw_data/ # Raw data
  ##############################################################################
  grid_search_precompute:
    matrix: 
      train_size: [1000] 
      dataset : [ddos] # , kdd_nsl, sms_spam, truthseeker
      metric : [gzip, bz2, brotli, levenshtein, ratio, hamming]
      fold : [0, 1, 2, 3, 4]
      algorithm : # modified, symmetric, name
        - [False, False, "Vanilla"]
        - [False, True, "Assumed"] 
        - [True, True, "Enforced"]
        - [True, False, "Average"]
    cmd: >-
      python -m deckard.layers.optimise
      stage=train
      algorithm="${item.algorithm[2]}"
      data=${item.dataset}
      data.sample.test_size=200
      data.sample.train_size=${item.train_size}
      dataset=${item.dataset}
      data.sample.fold=${item.fold}
      model_name=knn
      model=ncd_knn
      model.init.symmetric=${item.algorithm[1]}
      model.init.modified=${item.algorithm[0]}
      model.init.metric=${item.metric}
      model.init.transform=None
      model.init.distance_matrix_train=output/${item.dataset}/distance_matrix/${item.metric}/${item.algorithm[2]}/train-${item.train_size}-${data.sample.test_size}-${data.sample.random_state}${item.fold}.npz
      model.init.distance_matrix_test=output/${item.dataset}/distance_matrix/${item.metric}/${item.algorithm[2]}/test-${item.train_size}-${data.sample.test_size}-${data.sample.random_state}${item.fold}.npz
      files.directory=output/${item.dataset}
      files.reports=reports/precomputed/knn/${item.algorithm[2]}/${item.train_size}/${item.fold}/${item.metric}/
      hydra.sweeper.n_trials=1
      --config-name knn
    deps:
      - conf/knn.yaml # Only needs one distance matrix per fold/metric/algorithm to tune all the models
      - params.yaml
      - raw_data/
    outs:
        - output/${item.dataset}/distance_matrix/${item.metric}/${item.algorithm[2]}/train-${item.train_size}-${data.sample.test_size}-${data.sample.random_state}${item.fold}.npz:
            cache: true
            persist: true
            push: true
        - output/${item.dataset}/distance_matrix/${item.metric}/${item.algorithm[2]}/test-${item.train_size}-${data.sample.test_size}-${data.sample.random_state}${item.fold}.npz:
            cache: true
            persist: true
            push: true
        - output/${item.dataset}/logs/precomputed/knn/${item.algorithm[2]}/${item.train_size}/${item.fold}/${item.metric}/:
            cache: true
            persist: true
            push: true
        - output/${item.dataset}/reports/precomputed/knn/${item.algorithm[2]}/${item.train_size}/${item.fold}/${item.metric}/:
            cache: true
            persist: true
            push: true
    params:
      - conf/knn.yaml:
          - hydra
  ##############################################################################
  grid_search:
    matrix: 
      train_size: [1000] # 10, 20, 35, 60, 100, 200, 500  200, 500
      dataset : [ddos] # , kdd_nsl, sms_spam, truthseeker
      model_name : [knn,logistic, svc] # knn, svc, logistic
      algorithm : # modified, symmetric, name
        - [False, False, "Vanilla"]
        - [False, True, "Assumed"] 
        - [True, True, "Enforced"]
        - [True, False, "Average"]
    cmd: >-
      python -m deckard.layers.optimise
      stage=train
      data=${item.dataset}
      data.sample.test_size=200
      data.sample.train_size=${item.train_size}
      dataset=${item.dataset}
      model_name=${item.model_name}
      model.init.symmetric=${item.algorithm[1]}
      model.init.modified=${item.algorithm[0]}
      files.directory=output/${item.dataset}
      hydra.sweeper.n_jobs=32
      hydra.launcher.n_jobs=1
      algorithm="${item.algorithm[2]}"
      --config-name ${item.model_name}
      --multirun
    deps:
      - conf/${item.model_name}.yaml
      - params.yaml
      - raw_data/
      - output/${item.dataset}/distance_matrix/
    outs:
        - output/${item.dataset}/logs/search/${item.model_name}/${item.algorithm[2]}/${item.train_size}/:
            cache: true
            persist: true
            push: true
        - output/${item.dataset}/reports/search/${item.model_name}/${item.algorithm[2]}/${item.train_size}/:
            cache: true
            persist: true
            push: true
    params:
      - conf/${item.model_name}.yaml:
          - hydra
  ##############################################################################
  compile:
    matrix:
      dataset : [ddos] # , kdd_nsl, sms_spam, truthseeker
      model : [knn, svc, logistic, ] #condense/knn, condense/svc, condense/logistic
      stage : [search]
    deps:
      - output/${item.dataset}/${files.reports}/${item.stage}/${item.model}/
    outs:
    - output/${item.dataset}/${files.reports}/${item.stage}/${item.model}.csv
    cmd: >-
      python -m deckard.layers.compile 
      --report_folder output/${item.dataset}/${files.reports}/${item.stage}/${item.model} 
      --results_file output/${item.dataset}/${files.reports}/${item.stage}/${item.model}.csv
  ##############################################################################
  clean:
    matrix:
      dataset : [ddos] # , kdd_nsl, sms_spam, truthseeker
      model : [knn, svc, logistic,] # condense/knn, condense/svc, condense/logistic
      stage : [search]
    deps: 
      - output/${item.dataset}/${files.reports}/${item.stage}/${item.model}.csv
    cmd: >-
      python -m deckard.layers.clean_data 
      -i output/${item.dataset}/${files.reports}/${item.stage}/${item.model}.csv
      -o output/${item.dataset}/plots//${item.stage}/${item.model}.csv
      -c conf/clean.yaml
    outs:
      - output/${item.dataset}/plots//${item.stage}/${item.model}.csv
    params:
      - conf/clean.yaml:
        - replace
        - drop_values
        - replace_cols
        - fillna
  ##############################################################################
  merge:
    matrix:
      dataset : [ddos] # , kdd_nsl, sms_spam, truthseeker
    deps:
      - output/${item.dataset}/plots/clean/knn.csv
      - output/${item.dataset}/plots/clean/logistic.csv
      - output/${item.dataset}/plots/clean/svc.csv
    cmd: >-
      python merge.py
      --big_dir output/${item.dataset}/plots/
      --data_file clean/knn.csv
      --little_dir_data_file clean/logistic.csv clean/svc.csv
      --output_folder output/${item.dataset}/plots
      --output_file merged.csv
    outs:
      - output/${item.dataset}/plots/merged.csv
  ##############################################################################
  merge_datasets:
    cmd: >-
      python merge.py
      --big_dir output/
      --little_dir output/
      --data_file ddos/plots/merged.csv
      --little_dir_data_file  kdd_nsl/plots/merged.csv sms_spam/plots/merged.csv truthseeker/plots/merged.csv 
      --output_file merged.csv
      --output_folder output/combined/plots/
    deps:
      - output/sms_spam/plots/merged.csv
      - output/kdd_nsl/plots/merged.csv
      - output/ddos/plots/merged.csv
      - output/truthseeker/plots/merged.csv
    outs:
      - output/combined/plots/merged.csv
  ##############################################################################
  plot_merged:
    cmd: >-
      python -m deckard.layers.plots 
      --path output/combined/plots/ 
      --file output/combined/plots/merged.csv 
      -c conf/merged_plots.yaml
    deps:
      - output/combined/plots/merged.csv
      - conf/merged_plots.yaml
    plots:
      - output/combined/plots/compressor_metric_vs_accuracy.pdf
      - output/combined/plots/compressor_metric_vs_train_time.pdf
      - output/combined/plots/compressor_metric_vs_predict_time.pdf
      - output/combined/plots/string_metric_vs_accuracy.pdf
      - output/combined/plots/string_metric_vs_train_time.pdf
      - output/combined/plots/string_metric_vs_predict_time.pdf
      - output/combined/plots/symmetric_models_vs_accuracy.pdf
      - output/combined/plots/symmetric_models_vs_train_time.pdf
      - output/combined/plots/symmetric_models_vs_predict_time.pdf
      - output/combined/plots/models_vs_accuracy.pdf
      - output/combined/plots/models_vs_train_time.pdf
      - output/combined/plots/models_vs_predict_time.pdf
      - output/combined/plots/modified_models_vs_accuracy.pdf
      - output/combined/plots/modified_models_vs_train_time.pdf
      - output/combined/plots/modified_models_vs_predict_time.pdf
    params:
      - conf/merged_plots.yaml:
          - cat_plot
      - conf/merged_plots.yaml:
          - line_plot
  ##############################################################################
  copy:
    matrix:
      dataset : [ddos] # , kdd_nsl, sms_spam, truthseeker
    cmd: >-
      rm -rf ~/Gzip-KNN/figs/${item.dataset}/ &&
      mkdir -p ~/Gzip-KNN/figs/${item.dataset}/ &&
      cp -r output/${item.dataset}/plots/* ~/Gzip-KNN/figs/${item.dataset}/ &&
      rm -rf ~/Gzip-KNN/figs/${item.dataset}/.gitignore
    deps:
      - output/combined/
      - output/${item.dataset}/plots/
  ##############################################################################
  metric_space_check:
    deps:
      - combined/plots/
    cmd: >-
      python metric_space_check.py
      --max_alphabet_size 52
      --max_string_size 144
      --sig_figs 10
      --data random
      --samples 1000
      --folder metric_space_check/plots
      --log_file metric_space_check.log
      --results_file results.csv
      --plot_file results.pdf
    outs:
      - metric_space_check/results.csv
      - metric_space_check/metric_space_check.log
      - metric_space_check/results.pdf
  copy_metric_space_check:
    cmd: >-
      cp -r metric_space_check/*pdf ~/Gzip-KNN/images/ &&
      cp -r metric_space_check/*csv ~/Gzip-KNN/data/
    deps:
      - metric_space_check/
