schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/default/predictions.json
      hash: md5
      md5: 943e695ced6e7ba99228cc09be4c53ee
      size: 1200
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
  test_each_method@knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/knn/score_dict.json
      hash: md5
      md5: ce551b46c74615f9caf110ba229e8287
      size: 433
  test_each_method@knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: e7ac0f944ef8cbd22636028aa5a42932
      size: 432
  test_each_method@svc-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/svc/score_dict.json
      hash: md5
      md5: 00582abf48a68278af858f51b9b1e42e
      size: 430
  test_each_method@svc-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: 8f95223363f84bf77e5421b525355d36
      size: 433
  test_each_method@medoid-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/medoid.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/medoid/score_dict.json
      hash: md5
      md5: 9b7c3d0b84010e64a59c59fa444cef74
      size: 428
  test_each_method@medoid-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/medoid.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: c7a3230134cd1edbf76d801a2ce00596
      size: 434
  test_each_method@sum-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/sum.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/sum/score_dict.json
      hash: md5
      md5: e5f5d239a346a54238ac0bc3fc445453
      size: 432
  test_each_method@sum-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/sum.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: 371c38e0cafce5c307b7a78226809c64
      size: 431
  test_each_method@random-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/random.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/random/score_dict.json
      hash: md5
      md5: e5ed1dfcb28c3ee5494e17351d48a0df
      size: 427
  test_each_method@random-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/random.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: fc623b127a653add467eaaf6cc956969
      size: 435
  prepare_distance_matrices@0-10-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-10 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=10 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 3332d80113acf55f8e69e46aea82a1cc
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/0-10/score_dict.json
      hash: md5
      md5: cae521db2dcda14d0d3ed880c26adf62
      size: 233
  prepare_distance_matrices@0-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
  data:
    cmd: python data_prep.py
    outs:
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
  test_symmetric_methods@true-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: bfefd89384127062c0204b774d4d1b08
      size: 431
  test_symmetric_methods@true-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=truthseeker/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: f71a2727e708fdfb7867a6983f3aa8cf
      size: 223
    - path: truthseeker/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: a3d4f3a2cb97731390dcc229c8373d22
      size: 434
  test_symmetric_methods@true-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=sms_spam/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: sms_spam/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 9e4f99e28261a92bca246ad2713275da
      size: 428
  test_symmetric_methods@true-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=ddos/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: ddos/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 305f540700f5ec07debdd5bbe4132494
      size: 429
  test_symmetric_methods@false-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: 9a9fcf9ba5dbc34eb2ca1f203088fc47
      size: 740
    - path: kdd_nsl/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 03407ccb7952e484f77ba8b8ca188837
      size: 431
  test_symmetric_methods@false-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=truthseeker/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: b02cc76ddfb10d1e0e63e0f6e05cdaae
      size: 1791
    - path: truthseeker/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: cbdaf885f53480e872e521c6c0be30d3
      size: 433
  test_symmetric_methods@false-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=sms_spam/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: ac71e5af3607731b783a490caf81c37f
      size: 694
    - path: sms_spam/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: b65fc9d3704e44c0179af0c870b5700f
      size: 428
  test_symmetric_methods@false-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=ddos/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: 0d3f08d9c6cb8ddc6d3e68f8208c9bc5
      size: 821
    - path: ddos/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: dd59c040caaad8062be40da3075e130d
      size: 431
  test_each_compressor@gzip-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/gzip.npz model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip/score_dict.json
      hash: md5
      md5: 3c8145e4f4f10917c74ab77768c0effe
      size: 432
  test_each_compressor@gzip-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/gzip.npz model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip/score_dict.json
      hash: md5
      md5: 63e20ec78fa3034bd5d67c7780059e5b
      size: 435
  test_each_compressor@gzip-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/gzip.npz model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip/score_dict.json
      hash: md5
      md5: 4fc40b9376381e85d4151e1034f6a04b
      size: 431
  test_each_compressor@gzip-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip/score_dict.json
      hash: md5
      md5: 337d453cd4520fe0f08208299e433c2c
      size: 418
  test_each_compressor@zstd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/zstd.npz model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/zstd/score_dict.json
      hash: md5
      md5: a256d9bfd42e45de07093fbb3de31d4e
      size: 416
  test_each_compressor@zstd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/zstd.npz model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/zstd/score_dict.json
      hash: md5
      md5: 26998d4e36673fb302c57bc3e8899628
      size: 433
  test_each_compressor@zstd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/zstd.npz model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/zstd/score_dict.json
      hash: md5
      md5: 2bc0c9226d2101e4094b95125ee1845a
      size: 430
  test_each_compressor@zstd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/zstd/score_dict.json
      hash: md5
      md5: f231ec594f6009f9b8326fd1022195ca
      size: 428
  test_each_compressor@pkl-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/pkl.npz model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/pkl/score_dict.json
      hash: md5
      md5: f9b1eabed3c36daa197fb012a192adc1
      size: 430
  test_each_compressor@pkl-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/pkl.npz model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/pkl/score_dict.json
      hash: md5
      md5: 534a45f857b410fa8e58e5ef8ffb6270
      size: 434
  test_each_compressor@pkl-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/pkl.npz model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/pkl/score_dict.json
      hash: md5
      md5: 5782fc84b8139aa874db0af96da870ce
      size: 431
  test_each_compressor@pkl-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/pkl/score_dict.json
      hash: md5
      md5: 2c0449e96573d8dbd847a582ba9fd2ea
      size: 432
  test_each_compressor@bz2-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/bz2.npz model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/bz2/score_dict.json
      hash: md5
      md5: cc5221d45aad0637bf974898e7d635dd
      size: 427
  test_each_compressor@bz2-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/bz2.npz model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/bz2/score_dict.json
      hash: md5
      md5: 8b65178cb2dded727b9151683567d34c
      size: 433
  test_each_compressor@bz2-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/bz2.npz model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/bz2/score_dict.json
      hash: md5
      md5: b71d95cd50404327cc95a7d2a635a1c8
      size: 431
  test_each_compressor@bz2-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/bz2/score_dict.json
      hash: md5
      md5: d0bed4bdbfce3d224a4edbba8590109d
      size: 430
  test_each_precompute@True-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/True.npz
      +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 759a4b44789a31bc5c3f10aac8aa145d
      size: 429
  test_each_precompute@True-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/True.npz
      +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: c50ca766dbf19a5ef156685778716971
      size: 433
  test_each_precompute@True-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_classifier/None/True.npz
      +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 50b37d1a817b7affe7393a99d88e16f6
      size: 431
  test_each_precompute@True-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_classifier/None/True.npz +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: b5c8fdf86920f6c83d1399cd5db8f7a5
      size: 417
  test_each_precompute@False-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/False.npz
      +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 512d2f18cbd581a680bee4d24ad6068a
      size: 432
  test_each_precompute@False-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/False.npz
      +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: e881741dd8af63c9de70a986a6cebecc
      size: 432
  test_each_precompute@False-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_classifier/None/False.npz
      +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: fd40ab7dbf4a9908f6b72a31d795cb6e
      size: 428
  test_each_precompute@False-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_classifier/None/False.npz +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: ff42bc6552b060424af5bfc619e674be
      size: 430
  test_each_metric@levenshtein-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: ca7b9f2d1897ebdced9e63d88c48d5a4
      size: 430
  test_each_metric@levenshtein-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 158eb941c8bb36eaf31ae3e416b92fe6
      size: 432
  test_each_metric@levenshtein-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 05e31b27fd89e55cd2cdb05b37c253c8
      size: 430
  test_each_metric@levenshtein-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 4ce59251b9dfc44d02a7811240efeffe
      size: 431
  test_each_metric@ratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/ratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ratio/score_dict.json
      hash: md5
      md5: dcf5f9e459e85cc22a882171cb19c13e
      size: 430
  test_each_metric@ratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/ratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ratio/score_dict.json
      hash: md5
      md5: 6f96fb43d653bec9059dbd6411065c93
      size: 433
  test_each_metric@ratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/ratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ratio/score_dict.json
      hash: md5
      md5: b95addc15ae228353d5523e4ff542bb3
      size: 428
  test_each_metric@ratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/ratio.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ratio/score_dict.json
      hash: md5
      md5: e724dd3f65da93698457f1b0bac24802
      size: 427
  test_each_metric@hamming-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/hamming.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/hamming/score_dict.json
      hash: md5
      md5: 728e4349d2ea4432223bd8fa7debae47
      size: 429
  test_each_metric@hamming-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/hamming.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/hamming/score_dict.json
      hash: md5
      md5: aeac8d39b9f6bcf583fc4fd2f3059ee4
      size: 428
  test_each_metric@hamming-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/hamming.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/hamming/score_dict.json
      hash: md5
      md5: d733cac706f1819ddf8e9fddff6c1723
      size: 431
  test_each_metric@hamming-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/hamming.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/hamming/score_dict.json
      hash: md5
      md5: 84e506931f3b0281d033dde7caa3571b
      size: 432
  test_each_metric@jaro-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/jaro.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro/score_dict.json
      hash: md5
      md5: 4d8ab3b819595b1d93b220fc099962c9
      size: 427
  test_each_metric@jaro-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/jaro.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro/score_dict.json
      hash: md5
      md5: 3c495521ef86600b70b8ff25e3d8af64
      size: 427
  test_each_metric@jaro-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/jaro.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro/score_dict.json
      hash: md5
      md5: fa94350cb5c3ebf39061af145be2200c
      size: 428
  test_each_metric@jaro-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/jaro.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro/score_dict.json
      hash: md5
      md5: c5e12f02f4bbcd9aedf6225237a8edc5
      size: 432
  test_each_metric@jaro_winkler-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: c0ec6d0f8a6da633a8b516c4a10af664
      size: 428
  test_each_metric@jaro_winkler-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: adbd7f72e2b4d4f7c9d3ebbf53c2edda
      size: 428
  test_each_metric@jaro_winkler-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: a784ce57e465434123cc18a95ee829c9
      size: 427
  test_each_metric@jaro_winkler-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 1c3e384b169c4a237ea8a7d5b04afac5
      size: 432
  test_each_metric@seqratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/seqratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 4150aa390982b3e39a3a557c8d8ccf1c
      size: 429
  test_each_metric@seqratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/seqratio.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/seqratio/score_dict.json
      hash: md5
      md5: bdc6455943478e9e1918953c04e74287
      size: 430
  test_each_metric@seqratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/seqratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 0fad6e6711d92691a01729dffef5ebfb
      size: 425
  test_each_metric@seqratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/seqratio.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 815ff4ca461b71bf36f1430750c19e84
      size: 429
  test_each_metric@ncd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/ncd.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ncd/score_dict.json
      hash: md5
      md5: a3dd9df54ea8972451e5d74f413490de
      size: 429
  test_each_metric@ncd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/ncd.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ncd/score_dict.json
      hash: md5
      md5: fdcf158892662a77aa263fd8f519681e
      size: 432
  test_each_metric@ncd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/ncd.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ncd/score_dict.json
      hash: md5
      md5: db8ca878da2b2f5d68358a0baf6380c7
      size: 428
  test_each_metric@ncd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/ncd.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ncd/score_dict.json
      hash: md5
      md5: 4dd89f9246f8f6efea2d86871594d2ff
      size: 417
  test_each_model@gzip_knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_knn files.name=gzip_knn
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/gzip_knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: cc5837afe9e7ea1a39a19b4d258403fc
      size: 432
  test_each_model@gzip_knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_knn files.name=gzip_knn
      files.directory=truthseeker data=truthseeker dataset=truthseeker model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/gzip_knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 380fa571cf32a2e911ae128ab9aca531
      size: 431
  test_each_model@gzip_knn-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_knn files.name=gzip_knn
      files.directory=sms_spam data=sms_spam dataset=sms_spam model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/gzip_knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: eb9aea71668d2ebefe5e266219a84402
      size: 431
  test_each_model@gzip_knn-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_knn files.name=gzip_knn
      files.directory=ddos data=ddos dataset=ddos model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/gzip_knn.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 2de726ea9303a983a4a3df1adb401dc4
      size: 418
  test_each_model@gzip_logistic-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_logistic
      files.name=gzip_logistic files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_logistic/None/gzip_logistic.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 5a535b8b0a3f8d21394269dc67ca2733
      size: 432
  test_each_model@gzip_logistic-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_logistic
      files.name=gzip_logistic files.directory=truthseeker data=truthseeker dataset=truthseeker
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_logistic/None/gzip_logistic.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: b1cc6ccd0ce37c45bcefca52cad2bcb1
      size: 434
  test_each_model@gzip_logistic-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_logistic
      files.name=gzip_logistic files.directory=sms_spam data=sms_spam dataset=sms_spam
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_logistic/None/gzip_logistic.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: f1f70539dd3522c23206fc88c96dc105
      size: 428
  test_each_model@gzip_logistic-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_logistic
      files.name=gzip_logistic files.directory=ddos data=ddos dataset=ddos model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_logistic/None/gzip_logistic.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 3178c823202ac6cf96b3c05cb46881b9
      size: 418
  test_each_model@gzip_svc-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_svc files.name=gzip_svc
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_svc/None/gzip_svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 0fe6e5f707c7a4ccdfdf774eb8b65c84
      size: 432
  test_each_model@gzip_svc-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_svc files.name=gzip_svc
      files.directory=truthseeker data=truthseeker dataset=truthseeker model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_svc/None/gzip_svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 95031d74ec8282e6466f6b4b4cbfcd6b
      size: 431
  test_each_model@gzip_svc-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_svc files.name=gzip_svc
      files.directory=sms_spam data=sms_spam dataset=sms_spam model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_svc/None/gzip_svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 6a6aa6ac3ab658902dbc35f849f3c11b
      size: 427
  test_each_model@gzip_svc-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_svc files.name=gzip_svc
      files.directory=ddos data=ddos dataset=ddos model.init.method=random model.init.distance_matrix=ddos/model/gzip_svc/None/gzip_svc.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: a5f2e572a35406c72e01e58ee565b502
      size: 414
  test_each_model@gzip_ridge-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_ridge files.name=gzip_ridge
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_ridge/None/gzip_ridge.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip_ridge/score_dict.json
      hash: md5
      md5: 67adb76dd53e91274573cc6db318e5cc
      size: 431
  test_each_model@gzip_ridge-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_ridge files.name=gzip_ridge
      files.directory=truthseeker data=truthseeker dataset=truthseeker model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_ridge/None/gzip_ridge.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip_ridge/score_dict.json
      hash: md5
      md5: 7cb4c75ade441cdf6b05d154b394a511
      size: 432
  test_each_model@gzip_ridge-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_ridge files.name=gzip_ridge
      files.directory=sms_spam data=sms_spam dataset=sms_spam model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_ridge/None/gzip_ridge.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip_ridge/score_dict.json
      hash: md5
      md5: a1adc2c3475bb4996252acbd5541fca1
      size: 430
  test_each_model@gzip_ridge-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_ridge files.name=gzip_ridge
      files.directory=ddos data=ddos dataset=ddos model.init.method=random model.init.distance_matrix=ddos/model/gzip_ridge/None/gzip_ridge.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip_ridge/score_dict.json
      hash: md5
      md5: 609e10e482a3790a7ced7e6cb8146b72
      size: 417
  test_each_model@gzip_lasso-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_lasso files.name=gzip_lasso
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_lasso/None/gzip_lasso.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip_lasso/score_dict.json
      hash: md5
      md5: 6eeaeed39b89e04e703322fcbd97f6ba
      size: 432
  test_each_model@gzip_lasso-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_lasso files.name=gzip_lasso
      files.directory=truthseeker data=truthseeker dataset=truthseeker model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_lasso/None/gzip_lasso.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip_lasso/score_dict.json
      hash: md5
      md5: c530dec1d29f428d2c8625427863d56e
      size: 431
  test_each_model@gzip_lasso-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_lasso files.name=gzip_lasso
      files.directory=sms_spam data=sms_spam dataset=sms_spam model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_lasso/None/gzip_lasso.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip_lasso/score_dict.json
      hash: md5
      md5: c923c013f0c2da0208a387ee338a4591
      size: 431
  test_each_model@gzip_lasso-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_lasso files.name=gzip_lasso
      files.directory=ddos data=ddos dataset=ddos model.init.method=random model.init.distance_matrix=ddos/model/gzip_lasso/None/gzip_lasso.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip_lasso/score_dict.json
      hash: md5
      md5: 9d5be109d1470c25b071250c97d05b55
      size: 415
  test_each_model@gzip_elasticnet-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_elasticnet
      files.name=gzip_elasticnet files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_elasticnet/None/gzip_elasticnet.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip_elasticnet/score_dict.json
      hash: md5
      md5: 30d9fd0c5f305441c340ea4219b869b2
      size: 430
  test_each_model@gzip_elasticnet-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_elasticnet
      files.name=gzip_elasticnet files.directory=truthseeker data=truthseeker dataset=truthseeker
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_elasticnet/None/gzip_elasticnet.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip_elasticnet/score_dict.json
      hash: md5
      md5: bd46e96535eda6bacc52abcb129ed521
      size: 433
  test_each_model@gzip_elasticnet-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_elasticnet
      files.name=gzip_elasticnet files.directory=sms_spam data=sms_spam dataset=sms_spam
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_elasticnet/None/gzip_elasticnet.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip_elasticnet/score_dict.json
      hash: md5
      md5: 45f5d55637ad509f554e9da9a61dbc6e
      size: 432
  test_each_model@gzip_elasticnet-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model_name=gzip_elasticnet
      files.name=gzip_elasticnet files.directory=ddos data=ddos dataset=ddos model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_elasticnet/None/gzip_elasticnet.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip_elasticnet/score_dict.json
      hash: md5
      md5: 7b829da0a1bae10585f1c8d55312db70
      size: 415
  test_each_method@svc-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/svc/score_dict.json
      hash: md5
      md5: c753ef78c5c965c1b78072e6896004a2
      size: 431
  test_each_method@svc-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/svc.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/svc/score_dict.json
      hash: md5
      md5: 25b31e9b8d6cb7fcfb65fdc6b15a59ea
      size: 415
  test_each_method@medoid-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/medoid.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/medoid/score_dict.json
      hash: md5
      md5: 1988e297f980ad4fb9380a1feff08c4a
      size: 431
  test_each_method@medoid-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/medoid.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/medoid/score_dict.json
      hash: md5
      md5: 727482b14982466a1f795e9bf9e945c5
      size: 416
  test_each_method@sum-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/sum.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/sum/score_dict.json
      hash: md5
      md5: 2be5ff8cd1924e77728b6f92b5c31fff
      size: 432
  test_each_method@sum-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/sum.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/sum/score_dict.json
      hash: md5
      md5: e272306bf3ed1bf43ed0da26a608c190
      size: 417
  test_each_method@random-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/random.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/random/score_dict.json
      hash: md5
      md5: dba87dfabe2df0ec3996b8aa0937b27d
      size: 432
  test_each_method@random-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/random.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/random/score_dict.json
      hash: md5
      md5: 6e525b5e5a5e973a74ab2345cce7c986
      size: 418
  test_each_compressor@lzma-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=lzma files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/lzma.npz model.init.compressor=lzma  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/lzma/score_dict.json
      hash: md5
      md5: ebac16850a26a097b60a9beafd05cbcc
      size: 417
  test_each_compressor@lzma-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=lzma files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/lzma.npz model.init.compressor=lzma  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/lzma/score_dict.json
      hash: md5
      md5: 36b63d7b85ab1588fbc3b6b51e914239
      size: 431
  test_each_compressor@lzma-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=lzma files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/lzma.npz model.init.compressor=lzma  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/lzma/score_dict.json
      hash: md5
      md5: 7372e171b0cca64b52ef231ef805a9d3
      size: 429
  test_each_compressor@lzma-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=lzma files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/lzma.npz
      model.init.compressor=lzma  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/lzma/score_dict.json
      hash: md5
      md5: 831d17dbe681ebf9a9174ea614b64c62
      size: 430
  test_each_method@knn-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/knn/score_dict.json
      hash: md5
      md5: b6e1dbf096b30f463983ec6a8162d53d
      size: 427
  test_each_method@knn-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/knn.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 1f65cadbb71e3500c891f394eb3fc337
      size: 432
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/knn/score_dict.json
      hash: md5
      md5: 59853c58720cbed0bc1639a11df61842
      size: 418
  compile@kdd_nsl-gzip_knn-train:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/train  --results_file
      kdd_nsl/reports/train-gzip_knn.csv
    deps:
    - path: kdd_nsl/reports/train/
      hash: md5
      md5: de7f54cff174398cb5dc7a799de35b13.dir
      size: 30537
      nfiles: 38
    outs:
    - path: kdd_nsl/reports/train-gzip_knn.csv
      hash: md5
      md5: 81109dcadef3332636601ab8a16cae71
      size: 20342
  compile@truthseeker-gzip_knn-train:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/train  --results_file
      truthseeker/reports/train-gzip_knn.csv
    deps:
    - path: truthseeker/reports/train/
      hash: md5
      md5: 732f6cb44f426a1a6dd178a3c9d79849.dir
      size: 24596
      nfiles: 35
    outs:
    - path: truthseeker/reports/train-gzip_knn.csv
      hash: md5
      md5: c398b0af69d599ea7078bfa313f8b213
      size: 16683
  compile@sms_spam-gzip_knn-train:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/train  --results_file
      sms_spam/reports/train-gzip_knn.csv
    deps:
    - path: sms_spam/reports/train/
      hash: md5
      md5: 6bda10e4dcbd75b25e9762fafd18b7b9.dir
      size: 24489
      nfiles: 35
    outs:
    - path: sms_spam/reports/train-gzip_knn.csv
      hash: md5
      md5: eb60e74deedf6c5ccb894e0c798704ec
      size: 16559
  compile@ddos-gzip_knn-train:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/train  --results_file
      ddos/reports/train-gzip_knn.csv
    deps:
    - path: ddos/reports/train/
      hash: md5
      md5: 0e9f60671f4a45d1a8a7f8e118324a5c.dir
      size: 24634
      nfiles: 35
    outs:
    - path: ddos/reports/train-gzip_knn.csv
      hash: md5
      md5: 265594d075ac517291ae411f81fcf91b
      size: 16676
  clean@kdd_nsl-gzip_knn-train:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/train-gzip_knn.csv
      -o kdd_nsl/plots/clean_train-gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/train-gzip_knn.csv
      hash: md5
      md5: 81109dcadef3332636601ab8a16cae71
      size: 20342
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: kdd_nsl/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: 8c2e1621a67de736698d464bfd2b6c59
      size: 10254
  clean@truthseeker-gzip_knn-train:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/train-gzip_knn.csv
      -o truthseeker/plots/clean_train-gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/train-gzip_knn.csv
      hash: md5
      md5: c398b0af69d599ea7078bfa313f8b213
      size: 16683
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: truthseeker/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: 0e1d13518e07f209a63ff70ae10d502b
      size: 8636
  clean@sms_spam-gzip_knn-train:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/train-gzip_knn.csv
      -o sms_spam/plots/clean_train-gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/train-gzip_knn.csv
      hash: md5
      md5: eb60e74deedf6c5ccb894e0c798704ec
      size: 16559
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: sms_spam/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: 8890847b5ef39980bd446c4c55765f1d
      size: 8583
  clean@ddos-gzip_knn-train:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/train-gzip_knn.csv -o
      ddos/plots/clean_train-gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/train-gzip_knn.csv
      hash: md5
      md5: 265594d075ac517291ae411f81fcf91b
      size: 16676
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: ddos/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: ceb052ddd1f5ee0e2892f8e4acfefdab
      size: 8675
  plot@kdd_nsl-gzip_knn-train:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/clean_train-gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: 8c2e1621a67de736698d464bfd2b6c59
      size: 10254
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: kdd_nsl/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: 0707fb5294bd1f6b1c9c9dc163d8bfe5
      size: 19948
    - path: kdd_nsl/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: e908519538033f5a8e4fe80263c7d1e2
      size: 19685
    - path: kdd_nsl/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: 8dc8a081b0d399131d24b868a043575a
      size: 19385
    - path: kdd_nsl/plots/method_vs_accuracy.pdf
      hash: md5
      md5: 6c3c11418915f0a78f264966eac35942
      size: 19870
    - path: kdd_nsl/plots/method_vs_predict_time.pdf
      hash: md5
      md5: 7afa7a91491443f4b10fa2b21bbd5f9e
      size: 18427
    - path: kdd_nsl/plots/method_vs_train_time.pdf
      hash: md5
      md5: 48e1ceb04fcb22910258f0de84aa4ef4
      size: 19492
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 99a959849d080e4e27726c7a1a0d0302
      size: 22637
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: e9e81a72acc4b3c3cfe220b862b7f7ef
      size: 21072
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 33ada7565c3e6f1000d49756ce3d7640
      size: 21510
    - path: kdd_nsl/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: ead19d93b4584fb6923b0373f5d97a41
      size: 16862
    - path: kdd_nsl/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: 4bcc295e5e38873a2a462ca843fe16fa
      size: 18067
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 30e5f1e97b5973ac80c018e34aed66d3
      size: 19942
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: ed15ddc7eb19377216b304698020de3d
      size: 19602
  plot@truthseeker-gzip_knn-train:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/clean_train-gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: 0e1d13518e07f209a63ff70ae10d502b
      size: 8636
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: truthseeker/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: 079bca9b5d89bff906ffa4e0c4c6b7e6
      size: 20165
    - path: truthseeker/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: 44d9e60699a8fd6a5cfcd2924cb2379b
      size: 20009
    - path: truthseeker/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: e6f8b56d28710397307f9c4c6568e43b
      size: 19385
    - path: truthseeker/plots/method_vs_accuracy.pdf
      hash: md5
      md5: c6b94cd8392d2804bf557c320bd2ce67
      size: 19450
    - path: truthseeker/plots/method_vs_predict_time.pdf
      hash: md5
      md5: 7929d4ac2086f40459a5e55c0fb2ec50
      size: 18425
    - path: truthseeker/plots/method_vs_train_time.pdf
      hash: md5
      md5: e08ab36a66879704b830741ec44f79e8
      size: 19500
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 67bb710d8909cac99b1f318a5efb6bcf
      size: 22221
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: b59dd892f28f2a35523450717c9f7c4f
      size: 21071
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 912cb329614255c4b893756d0272ad02
      size: 21509
    - path: truthseeker/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: f7a9f6f2dbf783bd4849712440b145a1
      size: 16862
    - path: truthseeker/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: 77b8deb023969764fb0ff2f16f3f06ef
      size: 18065
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: c5b69baa8882bc0782ac64489b7b3055
      size: 19941
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 4c094a5b762d2ccbd6899d2637bfef2c
      size: 19601
  plot@sms_spam-gzip_knn-train:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/clean_train-gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: 8890847b5ef39980bd446c4c55765f1d
      size: 8583
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: sms_spam/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: e02c4ecec5c954857d2ad71e87a691f9
      size: 19850
    - path: sms_spam/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: e1b75901457e6953b35741bcc09b87d4
      size: 19539
    - path: sms_spam/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: f57d4c9f21a45c7a16ecf72b797607d0
      size: 19388
    - path: sms_spam/plots/method_vs_accuracy.pdf
      hash: md5
      md5: 4cc8c9affb7018a55feca8566f758e3b
      size: 19601
    - path: sms_spam/plots/method_vs_predict_time.pdf
      hash: md5
      md5: 9b026c8fe6c433a8eb45481a54f408d1
      size: 18457
    - path: sms_spam/plots/method_vs_train_time.pdf
      hash: md5
      md5: 118a7973105bfce6232c8214a525f857
      size: 19998
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 18597f76b1709cac0267f03615fdbf49
      size: 22374
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 1970e42d7942f79117436bd2c283a959
      size: 21100
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: f0d9955386e9e072436d7fb91bcad94c
      size: 22014
    - path: sms_spam/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: 9b2c5c87d0bda40b6b68e2b6ed5a5472
      size: 16861
    - path: sms_spam/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: 69145d5f9dc906114c8fe0f928d2144b
      size: 18066
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: b3e5c0c895d11fa212e79db89d6b82a1
      size: 19941
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 7ee1ef6e81f26c455a5ac4d4e3b62142
      size: 19608
  plot@ddos-gzip_knn-train:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/clean_train-gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/clean_train-gzip_knn.csv
      hash: md5
      md5: ceb052ddd1f5ee0e2892f8e4acfefdab
      size: 8675
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: ddos/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: c2ee7596ca9e60e8a6ed487a3057457a
      size: 19210
    - path: ddos/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: d0724744924805b1d6911f7f5866919f
      size: 19323
    - path: ddos/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: d69e29ef8822eafff1c52029fddab48d
      size: 19390
    - path: ddos/plots/method_vs_accuracy.pdf
      hash: md5
      md5: 3d5b9fa27cfec9d9f1eb586e2ea861b4
      size: 20221
    - path: ddos/plots/method_vs_predict_time.pdf
      hash: md5
      md5: 50b7d8fc58df478230729e87dfa42035
      size: 18423
    - path: ddos/plots/method_vs_train_time.pdf
      hash: md5
      md5: 6630ebef2a49d213484aee106dabd471
      size: 19494
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 7948775cef0b1317990b488d04bb3047
      size: 22988
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 31e357e112cb2f34fbc8be3f3c33cac5
      size: 21071
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 295b182b6d14e685a1077f5012f46a82
      size: 21511
    - path: ddos/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: 5a5b2de92258599a2fb5ca7b9840b489
      size: 16862
    - path: ddos/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: de5e5d165fdadc7b82a07a22ba456812
      size: 18067
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 2505887f162d795faff3d5b988a0771e
      size: 19942
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: c3804af186a57574a241af1babf6af11
      size: 19607
  copy@kdd_nsl:
    cmd: 'rm -rf ~/Gzip-KNN/figs/kdd_nsl/ && mkdir -p ~/Gzip-KNN/figs/kdd_nsl/ &&
      cp -r kdd_nsl/plots/* ~/Gzip-KNN/figs/kdd_nsl/ '
    deps:
    - path: kdd_nsl/plots/
      hash: md5
      md5: 787ac73843ed6f0451bf60383c9415dc.dir
      size: 266753
      nfiles: 14
  copy@truthseeker:
    cmd: 'rm -rf ~/Gzip-KNN/figs/truthseeker/ && mkdir -p ~/Gzip-KNN/figs/truthseeker/
      && cp -r truthseeker/plots/* ~/Gzip-KNN/figs/truthseeker/ '
    deps:
    - path: truthseeker/plots/
      hash: md5
      md5: 91e7249b38e4fcc09b1ad7e5921c691a.dir
      size: 264840
      nfiles: 14
  copy@sms_spam:
    cmd: 'rm -rf ~/Gzip-KNN/figs/sms_spam/ && mkdir -p ~/Gzip-KNN/figs/sms_spam/ &&
      cp -r sms_spam/plots/* ~/Gzip-KNN/figs/sms_spam/ '
    deps:
    - path: sms_spam/plots/
      hash: md5
      md5: 952d0c52cdda6fdce588d9552a8da16f.dir
      size: 265380
      nfiles: 14
  copy@ddos:
    cmd: 'rm -rf ~/Gzip-KNN/figs/ddos/ && mkdir -p ~/Gzip-KNN/figs/ddos/ && cp -r
      ddos/plots/* ~/Gzip-KNN/figs/ddos/ '
    deps:
    - path: ddos/plots/
      hash: md5
      md5: ed83cd71cf641beb87cbadec26b2214b.dir
      size: 264784
      nfiles: 14
  grid_search_classifiers@0-100-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model=gzip_logistic data.sample.random_state=0 hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32
      hydra.sweeper.study_name=gzip_logistic_100_0 --config-name classifiers --multirun
    deps:
    - path: conf/classifiers.yaml
      hash: md5
      md5: 0f44630dae75ce12e1efce8bb6058a96
      size: 1314
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      conf/classifiers.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/classifiers/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ???
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.m: 10,20,30,50,100,200,300,500
              model.init.method: random,svc,medoid,sum,knn
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2,lzma
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/classifiers/gzip_logistic_100_0
      hash: md5
      md5: 765a71c6a6a31fd5e079767f0188d3b7.dir
      size: 14541
      nfiles: 5
  grid_search_classifiers@0-100-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model=gzip_svc
      data.sample.random_state=0 hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32
      hydra.sweeper.study_name=gzip_svc_100_0 --config-name classifiers --multirun
    deps:
    - path: conf/classifiers.yaml
      hash: md5
      md5: 0f44630dae75ce12e1efce8bb6058a96
      size: 1314
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      conf/classifiers.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/classifiers/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ???
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.m: 10,20,30,50,100,200,300,500
              model.init.method: random,svc,medoid,sum,knn
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2,lzma
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/classifiers/gzip_svc_100_0
      hash: md5
      md5: 820e482cb711d0b717166e2d65001feb.dir
      size: 14408
      nfiles: 5
  grid_search_regressors@0-100-kdd_nsl-gzip_ridge:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_ridge model=gzip_ridge
      data.sample.random_state=0 hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32
      hydra.sweeper.study_name=gzip_ridge_100_0 ++raise_exception=True --config-name
      regressors --multirun
    deps:
    - path: conf/regressors.yaml
      hash: md5
      md5: 714a723a59f1858861815fab10035262
      size: 1311
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      conf/regressors.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/regressors/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ???
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.m: 10,20,30,50,100,200,300,500
              model.init.method: random,svc,medoid,sum,knn
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2,lzma
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/regressors/gzip_ridge_100_0
      hash: md5
      md5: c5442df5c555ee0444d9b8eb93897e55.dir
      size: 14338
      nfiles: 5
  grid_search_regressors@0-100-kdd_nsl-gzip_lasso:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_lasso model=gzip_lasso
      data.sample.random_state=0 hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32
      hydra.sweeper.study_name=gzip_lasso_100_0 ++raise_exception=True --config-name
      regressors --multirun
    deps:
    - path: conf/regressors.yaml
      hash: md5
      md5: fb087d1269da8d4d9abd9d541f76a591
      size: 1316
    - path: params.yaml
      hash: md5
      md5: b7255d0cf8a2619a719f5a741aaec23e
      size: 2067
    params:
      conf/regressors.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/regressors/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ???
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.m: 10,20,30,50,100,200,300,500
              model.init.method: random,svc,medoid,sum,knn
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2,lzma
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/regressors/gzip_lasso_100_0
      hash: md5
      md5: c1aa500a5014db1e4b486de2efd94411.dir
      size: 14369
      nfiles: 5
