schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    deps:
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    - path: raw_data/
      hash: md5
      md5: 33d46673e0631bef98be9e8991ed1ed1.dir
      size: 50328647
      nfiles: 8
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/default/predictions.json
      hash: md5
      md5: b2f54b5bf191b2ff88dee36692dea434
      size: 702
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
  test_each_method@knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=10  files.name=knn
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/knn
      hash: md5
      md5: f902bdd8882aa06bba0d1fef19c4a313.dir
      size: 11613
      nfiles: 4
    - path: kdd_nsl/reports/train/knn/score_dict.json
      hash: md5
      md5: 4e7f0750779df5202e5dec6228f94f99
      size: 490
  test_each_method@knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=10  files.name=knn
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/knn
      hash: md5
      md5: 5a52da2681ff444c53a1623722c2d431.dir
      size: 11642
      nfiles: 4
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: f09f746efa5c7a56f4dd1a3e20a7ab6b
      size: 485
  test_each_method@svc-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=10  files.name=svc
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/svc
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/svc
      hash: md5
      md5: 433b30d37ba64e71527ac2d837b44fa2.dir
      size: 11612
      nfiles: 4
    - path: kdd_nsl/reports/train/svc/score_dict.json
      hash: md5
      md5: f41538adb6ffa9182ea126c85c353abf
      size: 489
  test_each_method@svc-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=10  files.name=svc
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/svc
      hash: md5
      md5: bc37655235ef0d2919a62c85456d379c.dir
      size: 11645
      nfiles: 4
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: 97f1fed3ee2887773ca9a50eeeb5b1ed
      size: 488
  test_each_method@medoid-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=10  files.name=medoid
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/medoid
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/medoid
      hash: md5
      md5: 5b972c1f6a8c4ebff94a088e2be12b28.dir
      size: 11661
      nfiles: 4
    - path: kdd_nsl/reports/train/medoid/score_dict.json
      hash: md5
      md5: 10a0913632dea0d6717263ba1854b1e2
      size: 484
  test_each_method@medoid-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=10  files.name=medoid
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=medoid
      hydra.run.dir=truthseeker/logs/method/medoid ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/medoid
      hash: md5
      md5: 7b6fef8487e5b8dec0f76f4b4fc59ccb.dir
      size: 10226
      nfiles: 4
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: 8cebb3ee0098d2ee2bb4130e346e8e0f
      size: 282
  test_each_method@sum-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=10  files.name=sum
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/sum
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/sum
      hash: md5
      md5: 41cd7632a1d85e7380d14b0e8eccc819.dir
      size: 11607
      nfiles: 4
    - path: kdd_nsl/reports/train/sum/score_dict.json
      hash: md5
      md5: 2a97e468ea2e9071e1f7d5bdb1e7495b
      size: 484
  test_each_method@sum-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=10  files.name=sum
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=sum
      hydra.run.dir=truthseeker/logs/method/sum ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/sum
      hash: md5
      md5: e7f9741f777d98f3d3416264b9f3e6b2.dir
      size: 10164
      nfiles: 4
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: d49a3cbdeb348bbf9ad3b59e9e8e0e32
      size: 283
  test_each_method@random-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=10  files.name=random
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/random
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/random
      hash: md5
      md5: 723e8c93428a09edb21943a20fca5c3c.dir
      size: 11639
      nfiles: 4
    - path: kdd_nsl/reports/train/random/score_dict.json
      hash: md5
      md5: ed402e68904e8888b8ba6b0bebf6fa05
      size: 488
  test_each_method@random-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=10  files.name=random
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/random ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/random
      hash: md5
      md5: f785fe50b4007a169c37e6e9cb856268.dir
      size: 11670
      nfiles: 4
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 8bfb4b2efa55e9944cec7331401762f9
      size: 485
  prepare_distance_matrices@0-10-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-10 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=10 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 3332d80113acf55f8e69e46aea82a1cc
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/0-10/score_dict.json
      hash: md5
      md5: cae521db2dcda14d0d3ed880c26adf62
      size: 233
  prepare_distance_matrices@0-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
  data:
    cmd: python data_prep.py
    deps:
    - path: data_prep.py
      hash: md5
      md5: ed6ce38e7b430ac26af8b13b6fc3d3e0
      size: 5231
    outs:
    - path: raw_data/
      hash: md5
      md5: 33d46673e0631bef98be9e8991ed1ed1.dir
      size: 50328647
      nfiles: 8
  test_symmetric_methods@true-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_knn model.init.symmetric=true hydra.run.dir=kdd_nsl/logs/symmetric/true
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: bb10a010ac3f8790cdbe4310288efc63
      size: 432
  test_symmetric_methods@true-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_knn model.init.symmetric=true hydra.run.dir=truthseeker/logs/symmetric/true
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: f71a2727e708fdfb7867a6983f3aa8cf
      size: 223
    - path: truthseeker/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 6d7a4eb01733e4e2fda1c40b5562646c
      size: 434
  test_symmetric_methods@true-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_knn model.init.symmetric=true hydra.run.dir=sms_spam/logs/symmetric/true
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: sms_spam/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 0b8d690ffca7173942d490a2f0cbeec4
      size: 432
  test_symmetric_methods@true-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_knn model.init.symmetric=true hydra.run.dir=ddos/logs/symmetric/true
      model.init.distance_matrix=ddos/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: ddos/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 2c12176f8bf7355f284e059b2527cf44
      size: 418
  test_symmetric_methods@false-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_knn model.init.symmetric=false hydra.run.dir=kdd_nsl/logs/symmetric/false
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/symmetric_false.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: 9a9fcf9ba5dbc34eb2ca1f203088fc47
      size: 740
    - path: kdd_nsl/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 8ae56e642565330a37e731472a6c2d76
      size: 429
  test_symmetric_methods@false-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_knn model.init.symmetric=false hydra.run.dir=truthseeker/logs/symmetric/false
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: b02cc76ddfb10d1e0e63e0f6e05cdaae
      size: 1791
    - path: truthseeker/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 4ef36cb0b198d778dc8e0e6ff282d778
      size: 433
  test_symmetric_methods@false-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_knn model.init.symmetric=false hydra.run.dir=sms_spam/logs/symmetric/false
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: ac71e5af3607731b783a490caf81c37f
      size: 694
    - path: sms_spam/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 66d92f0ed630b08fbddb1a9c07f13981
      size: 432
  test_symmetric_methods@false-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_knn model.init.symmetric=false hydra.run.dir=ddos/logs/symmetric/false
      model.init.distance_matrix=ddos/model/gzip_knn/None/symmetric_false.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: 0d3f08d9c6cb8ddc6d3e68f8208c9bc5
      size: 821
    - path: ddos/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: ba81be29d56943d6d573597c93ba8081
      size: 412
  test_each_compressor@gzip-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/gzip
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip/score_dict.json
      hash: md5
      md5: b3f76b5e7fe68821d9336c4968888b08
      size: 431
  test_each_compressor@gzip-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/gzip.npz model.init.compressor=gzip  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/gzip ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip/score_dict.json
      hash: md5
      md5: df9b8a302dfb3b85b5c3c7623d86383e
      size: 434
  test_each_compressor@gzip-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/gzip.npz model.init.compressor=gzip  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/gzip ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip/score_dict.json
      hash: md5
      md5: 39a6710366ed557259ef981fc0b45a6a
      size: 432
  test_each_compressor@gzip-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10 hydra.run.dir=ddos/logs/compressor/gzip
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip/score_dict.json
      hash: md5
      md5: 1919cb29d6196b8dd14c01458e341a6b
      size: 414
  test_each_compressor@zstd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/zstd
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/zstd/score_dict.json
      hash: md5
      md5: 868509c201cbb0093818357427896da7
      size: 416
  test_each_compressor@zstd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/zstd.npz model.init.compressor=zstd  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/zstd ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/zstd/score_dict.json
      hash: md5
      md5: 89546ca3a3510fd73671341863c69cb9
      size: 434
  test_each_compressor@zstd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/zstd.npz model.init.compressor=zstd  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/zstd ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/zstd/score_dict.json
      hash: md5
      md5: e5a10b0013b032b22dd6cc596a7810bb
      size: 429
  test_each_compressor@zstd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10 hydra.run.dir=ddos/logs/compressor/zstd
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/zstd/score_dict.json
      hash: md5
      md5: 898feb287504053c9de9c1a809733c4b
      size: 432
  test_each_compressor@pkl-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/pkl
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/pkl/score_dict.json
      hash: md5
      md5: 3e01c227095014ab9f4665ea98e7f3b5
      size: 430
  test_each_compressor@pkl-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/pkl.npz model.init.compressor=pkl  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/pkl ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/pkl/score_dict.json
      hash: md5
      md5: 85d4598fcbe6077a465a9edeadd3843a
      size: 430
  test_each_compressor@pkl-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/pkl.npz model.init.compressor=pkl  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/pkl ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/pkl/score_dict.json
      hash: md5
      md5: a4667414e7721ee7ed489df1e412e0b0
      size: 431
  test_each_compressor@pkl-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10 hydra.run.dir=ddos/logs/compressor/pkl
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/pkl/score_dict.json
      hash: md5
      md5: 340261dd836239b846699c4c687b3042
      size: 432
  test_each_compressor@bz2-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/bz2
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/bz2/score_dict.json
      hash: md5
      md5: 05fd4b45d252c648d4afb4ba3ffc05e4
      size: 430
  test_each_compressor@bz2-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/bz2.npz model.init.compressor=bz2  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/bz2 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/bz2/score_dict.json
      hash: md5
      md5: 1b3094ea4075cb1b5b8cd3f74bf0c3dc
      size: 432
  test_each_compressor@bz2-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/bz2.npz model.init.compressor=bz2  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/bz2 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/bz2/score_dict.json
      hash: md5
      md5: 45303b7d052fb91e65c9f3ad97999b6a
      size: 431
  test_each_compressor@bz2-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10 hydra.run.dir=ddos/logs/compressor/bz2
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/bz2/score_dict.json
      hash: md5
      md5: fdfa470b2053f561dea2e047423b54cd
      size: 431
  test_each_precompute@True-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/True.npz +model.init.precompute=True  model.init.m=10  hydra.run.dir=kdd_nsl/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: f5c9a9ce41a0680f1e18874d6f21bd25
      size: 433
  test_each_precompute@True-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_knn/None/True.npz
      +model.init.precompute=True  model.init.m=10  hydra.run.dir=truthseeker/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 76dcdbf7dc1fb63ce7b978c2f6bef8a2
      size: 435
  test_each_precompute@True-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_knn/None/True.npz
      +model.init.precompute=True  model.init.m=10  hydra.run.dir=sms_spam/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: fe9a23520513840fe4a90fb8413e62da
      size: 432
  test_each_precompute@True-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_knn/None/True.npz +model.init.precompute=True  model.init.m=10  hydra.run.dir=ddos/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 0d72c99dc99df13629a383ca9745712e
      size: 429
  test_each_precompute@False-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/False.npz +model.init.precompute=False  model.init.m=10  hydra.run.dir=kdd_nsl/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: d225ea006c02f56f552431e223ef6576
      size: 429
  test_each_precompute@False-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_knn/None/False.npz
      +model.init.precompute=False  model.init.m=10  hydra.run.dir=truthseeker/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: e8094fb43b55432d298346a0a291ac71
      size: 431
  test_each_precompute@False-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_knn/None/False.npz
      +model.init.precompute=False  model.init.m=10  hydra.run.dir=sms_spam/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 0f3b13aba3cc817f2327769f36b54939
      size: 432
  test_each_precompute@False-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_knn/None/False.npz +model.init.precompute=False  model.init.m=10  hydra.run.dir=ddos/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 9cc47f921a908ad81e486980d134f453
      size: 418
  test_each_metric@levenshtein-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=kdd_nsl/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 4f517489b794c13bbbbb477bd7b14ea8
      size: 248
  test_each_metric@levenshtein-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/levenshtein.npz hydra.sweeper.n_jobs=1
      hydra.run.dir=truthseeker/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 2f0fa43167cde43c2d8c901ee6bc360d
      size: 250
  test_each_metric@levenshtein-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/levenshtein.npz hydra.sweeper.n_jobs=1
      hydra.run.dir=sms_spam/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: bb8456e5a2457e841619d5750922bd0c
      size: 246
  test_each_metric@levenshtein-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=ddos/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 1956a0651292bf6919a103e46c0c5906
      size: 248
  test_each_metric@ratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/ratio.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=kdd_nsl/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ratio/score_dict.json
      hash: md5
      md5: 841058c500666af10a3a84fd7769e53d
      size: 244
  test_each_metric@ratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/ratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ratio/score_dict.json
      hash: md5
      md5: 5cbc24c928a073a9459428d4e1984ba1
      size: 426
  test_each_metric@ratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/ratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ratio/score_dict.json
      hash: md5
      md5: b8ea7bf8de9af2250f1a2c84695be1f9
      size: 425
  test_each_metric@ratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/ratio.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ratio/score_dict.json
      hash: md5
      md5: 5f9750a5729db8f4912f50a8610fc48c
      size: 429
  test_each_metric@hamming-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/hamming.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/hamming/score_dict.json
      hash: md5
      md5: ed699605a76c4116a461994f139da237
      size: 429
  test_each_metric@hamming-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/hamming.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/hamming/score_dict.json
      hash: md5
      md5: 8a3f87734f208a61bc27114729fd4fd6
      size: 432
  test_each_metric@hamming-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/hamming.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/hamming/score_dict.json
      hash: md5
      md5: 0c0988090568dc526d0137ff7e38ca6a
      size: 428
  test_each_metric@hamming-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/hamming.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/hamming/score_dict.json
      hash: md5
      md5: 949f7ea27f2521fbbb2b05ec3a111346
      size: 428
  test_each_metric@jaro-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/jaro.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro/score_dict.json
      hash: md5
      md5: 3bd4e5c89097070d439c3f13359ff369
      size: 428
  test_each_metric@jaro-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/jaro.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro/score_dict.json
      hash: md5
      md5: b86d70f18ea7ee85132f4d8407058d60
      size: 429
  test_each_metric@jaro-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/jaro.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro/score_dict.json
      hash: md5
      md5: b7550248d10852d10a16610f707ea50f
      size: 429
  test_each_metric@jaro-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/jaro.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro/score_dict.json
      hash: md5
      md5: e7987cb2d248f7eaa20a842bbcacc442
      size: 430
  test_each_metric@jaro_winkler-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: a44e09663d05f8330352712ccfd72f17
      size: 428
  test_each_metric@jaro_winkler-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/jaro_winkler.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 2a80298804f36bc7af477e11ff9f6679
      size: 428
  test_each_metric@jaro_winkler-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/jaro_winkler.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 8b7d0f92e14d74042fb8cd907e3a8274
      size: 430
  test_each_metric@jaro_winkler-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: aa4130c79130ddbaaebaa35a1cae7d91
      size: 426
  test_each_metric@seqratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/seqratio.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 9075115a02136aaa59bd87074589ce42
      size: 430
  test_each_metric@seqratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/seqratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/seqratio/score_dict.json
      hash: md5
      md5: ac2bdff9261ce4c9e511294dd69b19f8
      size: 434
  test_each_metric@seqratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/seqratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
  test_each_method@ddos-random:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=3
      data.sample.train_size=100 files.name=random files.directory=ddos data=ddos
      dataset=ddos model_name=random hydra.run.dir=ddos/logs/method/random ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/random
      hash: md5
      md5: 18434358b58a2ae37082759eb3c0b4c5.dir
      size: 8476
      nfiles: 4
    - path: ddos/reports/train/random/score_dict.json
      hash: md5
      md5: 581901609980fc39e3fae7e7bf70e1ee
      size: 487
  test_each_method@ddos-medoid:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=3
      data.sample.train_size=100 files.name=medoid files.directory=ddos data=ddos
      dataset=ddos model_name=medoid hydra.run.dir=ddos/logs/method/medoid ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/medoid
      hash: md5
      md5: af7d2cf05bfddebbddecb6ed052c3289.dir
      size: 8504
      nfiles: 4
    - path: ddos/reports/train/medoid/score_dict.json
      hash: md5
      md5: 613af553377fef61e59d0ace8383235c
      size: 488
  test_each_method@ddos-sum:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=3
      data.sample.train_size=100 files.name=sum files.directory=ddos data=ddos dataset=ddos
      model_name=sum hydra.run.dir=ddos/logs/method/sum ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/sum
      hash: md5
      md5: 21f994c64f6d005354dd022ca784186a.dir
      size: 8444
      nfiles: 4
    - path: ddos/reports/train/sum/score_dict.json
      hash: md5
      md5: c13b3fede7f357aa739ad2b1594d5b4c
      size: 488
  test_each_method@ddos-svc:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=3
      data.sample.train_size=100 files.name=svc files.directory=ddos data=ddos dataset=ddos
      model_name=svc hydra.run.dir=ddos/logs/method/svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/svc
      hash: md5
      md5: 029c7891104c1612a83e728fa8206787.dir
      size: 8443
      nfiles: 4
    - path: ddos/reports/train/svc/score_dict.json
      hash: md5
      md5: 0fedc26bb015fc90336ca538261c83e1
      size: 487
  test_each_method@ddos-condensed:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=condensed  model.init.m=1
      files.name=condensed files.directory=ddos data=ddos dataset=ddos model_name=condensed
      hydra.run.dir=ddos/logs/method/condensed ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/condensed
      hash: md5
      md5: 5dfc9ebfe1c6f3e496814c86a05a5329.dir
      size: 10117
      nfiles: 4
    - path: ddos/reports/train/condensed/score_dict.json
      hash: md5
      md5: 56bcddf54558d9cdd1a7587878aceffa
      size: 284
  test_each_method@ddos-hardness:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=hardness  model.init.m=3
      data.sample.train_size=100 files.name=hardness files.directory=ddos data=ddos
      dataset=ddos model_name=hardness hydra.run.dir=ddos/logs/method/hardness ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/hardness
      hash: md5
      md5: c9749bb1b1ee77e8c6e65157cae6f50d.dir
      size: 8544
      nfiles: 4
    - path: ddos/reports/train/hardness/score_dict.json
      hash: md5
      md5: e65cdd87d3f68b498ec89e21beb3067f
      size: 488
  test_each_method@ddos-nearmiss:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=nearmiss  model.init.m=3
      data.sample.train_size=100 files.name=nearmiss files.directory=ddos data=ddos
      dataset=ddos model_name=nearmiss hydra.run.dir=ddos/logs/method/nearmiss ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/nearmiss
      hash: md5
      md5: ca2401901fdd50951c149621a4b0e235.dir
      size: 8542
      nfiles: 4
    - path: ddos/reports/train/nearmiss/score_dict.json
      hash: md5
      md5: eeab94c1904a4595bbc686489a3db012
      size: 486
  test_each_method@truthseeker-svc:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=3
      data.sample.train_size=100 files.name=svc files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=svc hydra.run.dir=truthseeker/logs/method/svc
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/svc
      hash: md5
      md5: 7f9ad95f5b5a7d8ea8a41d09560bca7e.dir
      size: 10252
      nfiles: 4
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: dca27d752d8d9db2b52a61d9e0d9bebf
      size: 283
  test_each_method@truthseeker-medoid:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=3
      data.sample.train_size=100 files.name=medoid files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=medoid hydra.run.dir=truthseeker/logs/method/medoid
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/medoid
      hash: md5
      md5: 57b1e2e154ae8653331898992d0d7f7c.dir
      size: 10316
      nfiles: 4
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: a728020aeb632257e52cc9b13337870e
      size: 284
  test_each_method@truthseeker-sum:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=3
      data.sample.train_size=100 files.name=sum files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=sum hydra.run.dir=truthseeker/logs/method/sum
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/sum
      hash: md5
      md5: b8934f0660e9e6043e5a7117d2e3d462.dir
      size: 10252
      nfiles: 4
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: 0a4117f35aab6ec4b41ac526f8715aa2
      size: 283
  test_each_method@truthseeker-random:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=3
      data.sample.train_size=100 files.name=random files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=random hydra.run.dir=truthseeker/logs/method/random
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/random
      hash: md5
      md5: a77f4e67f85e529063b18617cda5525a.dir
      size: 10289
      nfiles: 4
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 08f3cc499d61caaa4ab912af1a2ff558
      size: 283
  test_each_method@truthseeker-nearmiss:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=nearmiss  model.init.m=3
      data.sample.train_size=100 files.name=nearmiss files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=nearmiss hydra.run.dir=truthseeker/logs/method/nearmiss
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/nearmiss
      hash: md5
      md5: 6ea3f0a574d7abd052e3ee5466356e13.dir
      size: 10359
      nfiles: 4
    - path: truthseeker/reports/train/nearmiss/score_dict.json
      hash: md5
      md5: f03918d65cac7f21e210a14be8ee1373
      size: 285
  test_each_method@truthseeker-hardness:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=hardness  model.init.m=3
      data.sample.train_size=100 files.name=hardness files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=hardness hydra.run.dir=truthseeker/logs/method/hardness
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/hardness
      hash: md5
      md5: c5ea09925ae34a0fee42f1ec06d88090.dir
      size: 10355
      nfiles: 4
    - path: truthseeker/reports/train/hardness/score_dict.json
      hash: md5
      md5: 87bdbb0cafd4462b87035af79efc81c5
      size: 281
  test_each_method@truthseeker-knn:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=3
      data.sample.train_size=100 files.name=knn files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=knn hydra.run.dir=truthseeker/logs/method/knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/knn
      hash: md5
      md5: 5c5fe8f17151816b01d863f51db3d01a.dir
      size: 10254
      nfiles: 4
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: 4157a5deabda43d207a543b9f038b5af
      size: 285
  test_each_method@ddos-knn:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=3
      data.sample.train_size=100 files.name=knn files.directory=ddos data=ddos dataset=ddos
      model_name=knn hydra.run.dir=ddos/logs/method/knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/knn
      hash: md5
      md5: 7d537d66b1b5cf86b9032b820da49b0d.dir
      size: 8446
      nfiles: 4
    - path: ddos/reports/train/knn/score_dict.json
      hash: md5
      md5: 7c09a32ed27008a9b3094df219ac4d42
      size: 490
  condense@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_logistic model=gzip_logistic hydra.sweeper.study_name=condense_gzip_logistic_sms_spam
      hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32 hydra.sweep.dir=sms_spam/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/study.csv
      ++data.sample.train_size='int(interval(30, 1000))' ++data.sample.random_state='int(interval(10000,
      20000))' ++data.sample.stratify=True model.init.m='tag(log, interval(.1, 1))'
      +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn files.directory=sms_spam
      files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=32 --config-name
      gzip_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: 026fca7fe5d7bb75c4a3ae245f86a2c2
      size: 332
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: int(interval(20, 1000))
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.1, 1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_logistic/
      hash: md5
      md5: 9496098bd1497b6c46124e40e665ee74.dir
      size: 14280
      nfiles: 5
    - path: sms_spam/reports/condense/gzip_logistic/
      hash: md5
      md5: c7e2a43c1dc170c3d593825f57ad0e9b.dir
      size: 2707
      nfiles: 3
  condense@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_svc model=gzip_svc hydra.sweeper.study_name=condense_gzip_svc_truthseeker
      hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32 hydra.sweep.dir=truthseeker/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/study.csv ++data.sample.train_size='int(interval(30,
      1000))' ++data.sample.random_state='int(interval(10000, 20000))' ++data.sample.stratify=True
      model.init.m='tag(log, interval(.1, 1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=32
      --config-name gzip_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_truthseeker.yaml
      hash: md5
      md5: 97d9d5857744b1cc077513ac5a659f62
      size: 302
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: int(interval(20, 1000))
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.1, 1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_svc/
      hash: md5
      md5: bd7cbae34fd6feecf60a49cb537b0f80.dir
      size: 13751
      nfiles: 5
    - path: truthseeker/reports/condense/gzip_svc/
      hash: md5
      md5: a24584cdc3464b86b6ff88b90dc62e5e.dir
      size: 2701
      nfiles: 3
  condense@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_svc model=best_gzip_svc_sms_spam hydra.sweeper.study_name=condense_gzip_svc_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=sms_spam files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: 771cd8e3b1368f0fbb30e518002db80f
      size: 317
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_svc/
      hash: md5
      md5: c6ef4ecf2bec03894b2f2018cffc0888.dir
      size: 1597147
      nfiles: 513
    - path: sms_spam/reports/condense/gzip_svc/
      hash: md5
      md5: aff4ca5c41e7043fe0d36b4a669ad6a7.dir
      size: 344414
      nfiles: 381
  condense@ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_svc model=best_gzip_svc_ddos hydra.sweeper.study_name=condense_gzip_svc_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=16
      ++raise_exception=True --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: f2ec5b2ff8103b93ca61a5b86888a3e6
      size: 305
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_svc/
      hash: md5
      md5: 98f11cc76f9f370871bfb325ec4186e4.dir
      size: 1589126
      nfiles: 513
    - path: ddos/reports/condense/gzip_svc/
      hash: md5
      md5: 87ca8778bbdb8363a1e237019c87ebf5.dir
      size: 345583
      nfiles: 384
  condense@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_sms_spam hydra.sweeper.study_name=condense_gzip_knn_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=sms_spam files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 430e2be20ddaa39808a6739627a98d77
      size: 259
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_knn/
      hash: md5
      md5: a45625dcc1d1cc1f1e20d19440e1cdf1.dir
      size: 1559584
      nfiles: 513
    - path: sms_spam/reports/condense/gzip_knn/
      hash: md5
      md5: 0ac87faa8d16d77b4e7d5a96cfdde177.dir
      size: 335094
      nfiles: 384
  compile@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_knn  --results_file
      sms_spam/reports/gzip_knn.csv
    deps:
    - path: sms_spam/reports/gzip_knn/
      hash: md5
      md5: 0b3c413023f8eb9c93f058fb8b4b4465.dir
      size: 1749711
      nfiles: 1655
    outs:
    - path: sms_spam/reports/gzip_knn.csv
      hash: md5
      md5: 575e2e8df08136f96dc4d80271787354
      size: 825874
  compile@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_knn  --results_file
      truthseeker/reports/gzip_knn.csv
    deps:
    - path: truthseeker/reports/gzip_knn/
      hash: md5
      md5: b4fc2cbcc1d7fe39002e7f84cd0f2dca.dir
      size: 1630019
      nfiles: 1645
    outs:
    - path: truthseeker/reports/gzip_knn.csv
      hash: md5
      md5: 309caaf64052cf85ab733959f6c64e42
      size: 831334
  compile@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_knn  --results_file
      kdd_nsl/reports/gzip_knn.csv
    deps:
    - path: kdd_nsl/reports/gzip_knn/
      hash: md5
      md5: 450308fe881e120445f7d7e0aa7c7371.dir
      size: 2612524
      nfiles: 2329
    outs:
    - path: kdd_nsl/reports/gzip_knn.csv
      hash: md5
      md5: 9787208801b626bfad81a5c917738097
      size: 1220920
  compile@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_svc  --results_file
      truthseeker/reports/gzip_svc.csv
    deps:
    - path: truthseeker/reports/gzip_svc/
      hash: md5
      md5: e6e273bb143c7a8949d5be4acca87eb9.dir
      size: 1536370
      nfiles: 1725
    outs:
    - path: truthseeker/reports/gzip_svc.csv
      hash: md5
      md5: 48d789061ce01b3d97c8d548a42f371e
      size: 851842
  compile@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_logistic  --results_file
      truthseeker/reports/gzip_logistic.csv
    deps:
    - path: truthseeker/reports/gzip_logistic/
      hash: md5
      md5: 0e6c36459a7eb502e20633cdcc90d85e.dir
      size: 1679620
      nfiles: 1361
    outs:
    - path: truthseeker/reports/gzip_logistic.csv
      hash: md5
      md5: 90d424f725034f74b270e86288995193
      size: 732030
  compile@ddos-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_logistic  --results_file
      ddos/reports/gzip_logistic.csv
    deps:
    - path: ddos/reports/gzip_logistic/
      hash: md5
      md5: 2f62473353ef75037c2d8019f116ce0b.dir
      size: 3621790
      nfiles: 3086
    outs:
    - path: ddos/reports/gzip_logistic.csv
      hash: md5
      md5: 37f5199b0b94abe6df95b53c1c039de3
      size: 1656638
  compile@ddos-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_knn  --results_file
      ddos/reports/gzip_knn.csv
    deps:
    - path: ddos/reports/gzip_knn/
      hash: md5
      md5: cc6da80658ec21e2272ad7089f38a28d.dir
      size: 4284328
      nfiles: 4123
    outs:
    - path: ddos/reports/gzip_knn.csv
      hash: md5
      md5: a0a57e372c5c4d2a2a986f20e9246057
      size: 2106704
  compile@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_logistic  --results_file
      kdd_nsl/reports/gzip_logistic.csv
    deps:
    - path: kdd_nsl/reports/gzip_logistic/
      hash: md5
      md5: 429cd3d22120752c0f33f058bd295297.dir
      size: 2661113
      nfiles: 2518
    outs:
    - path: kdd_nsl/reports/gzip_logistic.csv
      hash: md5
      md5: d1b903d640f6a7e9aaa097ec06edbe48
      size: 1331588
  compile@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_svc  --results_file
      kdd_nsl/reports/gzip_svc.csv
    deps:
    - path: kdd_nsl/reports/gzip_svc/
      hash: md5
      md5: 0f46b49f2460ec47f185ee31766d67be.dir
      size: 2585159
      nfiles: 2863
    outs:
    - path: kdd_nsl/reports/gzip_svc.csv
      hash: md5
      md5: f1836fd21f8f2924a7f78454e4c43138
      size: 1434242
  compile@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_logistic  --results_file
      sms_spam/reports/gzip_logistic.csv
    deps:
    - path: sms_spam/reports/gzip_logistic/
      hash: md5
      md5: d6eae73bb974e016d7060965e782ec64.dir
      size: 1681973
      nfiles: 1579
    outs:
    - path: sms_spam/reports/gzip_logistic.csv
      hash: md5
      md5: 71abce1c8611089c18d0f773b569e1c5
      size: 804780
  compile@ddos-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_svc  --results_file
      ddos/reports/gzip_svc.csv
    deps:
    - path: ddos/reports/gzip_svc/
      hash: md5
      md5: 4121e6859c881a309541a9fadde270e0.dir
      size: 3335579
      nfiles: 3218
    outs:
    - path: ddos/reports/gzip_svc.csv
      hash: md5
      md5: e3ba2e61b8a1cd1c0fe3438284c5c145
      size: 1642578
  compile@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_svc  --results_file
      sms_spam/reports/gzip_svc.csv
    deps:
    - path: sms_spam/reports/gzip_svc/
      hash: md5
      md5: 5698fc82ad97df949f080080ea2380c5.dir
      size: 1350919
      nfiles: 1536
    outs:
    - path: sms_spam/reports/gzip_svc.csv
      hash: md5
      md5: e51bb0e58704d792c07a808638116f92
      size: 735689
  clean@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_svc.csv
      -o truthseeker/plots/clean/gzip_svc.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_svc.csv
      hash: md5
      md5: 48d789061ce01b3d97c8d548a42f371e
      size: 851842
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_svc.csv
      hash: md5
      md5: 98f028919aea0e75d0448a0458b4bb5a
      size: 660018
  clean@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_svc.csv -o kdd_nsl/plots/clean/gzip_svc.csv
      -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_svc.csv
      hash: md5
      md5: f1836fd21f8f2924a7f78454e4c43138
      size: 1434242
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_svc.csv
      hash: md5
      md5: 7ab8245dbf6413a621c903e52b10f051
      size: 1115497
  clean@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_knn.csv -o kdd_nsl/plots/clean/gzip_knn.csv
      -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_knn.csv
      hash: md5
      md5: 9787208801b626bfad81a5c917738097
      size: 1220920
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_knn.csv
      hash: md5
      md5: a103ce34b10219cd410669a3bad3acb1
      size: 666119
  clean@ddos-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_knn.csv -o ddos/plots/clean/gzip_knn.csv
      -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_knn.csv
      hash: md5
      md5: a0a57e372c5c4d2a2a986f20e9246057
      size: 2106704
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_knn.csv
      hash: md5
      md5: 43e4847f50bc8e8d8e010eefbec80c4b
      size: 1314108
  clean@ddos-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_svc.csv -o ddos/plots/clean/gzip_svc.csv
      -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_svc.csv
      hash: md5
      md5: e3ba2e61b8a1cd1c0fe3438284c5c145
      size: 1642578
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_svc.csv
      hash: md5
      md5: a1b9b61655aa3f3ecf093f9efafc335e
      size: 1036280
  clean@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_logistic.csv
      -o kdd_nsl/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_logistic.csv
      hash: md5
      md5: d1b903d640f6a7e9aaa097ec06edbe48
      size: 1331588
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 782b9bad66f41af0e1a8ecad539bbd7e
      size: 917447
  clean@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_knn.csv
      -o truthseeker/plots/clean/gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_knn.csv
      hash: md5
      md5: 309caaf64052cf85ab733959f6c64e42
      size: 831334
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_knn.csv
      hash: md5
      md5: 3814e076ca981a9f1e55aceffda9f354
      size: 544799
  clean@ddos-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_logistic.csv -o
      ddos/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_logistic.csv
      hash: md5
      md5: 37f5199b0b94abe6df95b53c1c039de3
      size: 1656638
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 135eed7b506e0a23aa90a069247788de
      size: 929319
  clean@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_knn.csv -o
      sms_spam/plots/clean/gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_knn.csv
      hash: md5
      md5: 575e2e8df08136f96dc4d80271787354
      size: 825874
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_knn.csv
      hash: md5
      md5: 39432f9d5d44d7d81a0dcfbda787b658
      size: 470395
  clean@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_logistic.csv
      -o sms_spam/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_logistic.csv
      hash: md5
      md5: 71abce1c8611089c18d0f773b569e1c5
      size: 804780
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_logistic.csv
      hash: md5
      md5: e153331d3ee2e0d7be84d0445d6ee9ee
      size: 531054
  clean@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_svc.csv -o
      sms_spam/plots/clean/gzip_svc.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_svc.csv
      hash: md5
      md5: e51bb0e58704d792c07a808638116f92
      size: 735689
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_svc.csv
      hash: md5
      md5: 68c45d51239b5901f7be4e957bd40450
      size: 568172
  clean@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_logistic.csv
      -o truthseeker/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_logistic.csv
      hash: md5
      md5: 90d424f725034f74b270e86288995193
      size: 732030
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 4fc564c72834d8c0df0ce9b37c0075a9
      size: 406060
  copy@sms_spam:
    cmd: 'rm -rf ~/Gzip-KNN/figs/sms_spam/ && mkdir -p ~/Gzip-KNN/figs/sms_spam/ &&
      cp -r sms_spam/plots/* ~/Gzip-KNN/figs/sms_spam/ '
    deps:
    - path: sms_spam/plots/
      hash: md5
      md5: b4562b1ad06e680bf0247d4e8dab85c1.dir
      size: 10160120
      nfiles: 19
  copy@truthseeker:
    cmd: 'rm -rf ~/Gzip-KNN/figs/truthseeker/ && mkdir -p ~/Gzip-KNN/figs/truthseeker/
      && cp -r truthseeker/plots/* ~/Gzip-KNN/figs/truthseeker/ '
    deps:
    - path: truthseeker/plots/
      hash: md5
      md5: 47a062972487c796e962fa241d4bf108.dir
      size: 8761443
      nfiles: 18
  copy@kdd_nsl:
    cmd: 'rm -rf ~/Gzip-KNN/figs/kdd_nsl/ && mkdir -p ~/Gzip-KNN/figs/kdd_nsl/ &&
      cp -r kdd_nsl/plots/* ~/Gzip-KNN/figs/kdd_nsl/ '
    deps:
    - path: kdd_nsl/plots/
      hash: md5
      md5: 526bfd7a3ffd1b1cee332632d79a96f8.dir
      size: 13281984
      nfiles: 18
  copy@ddos:
    cmd: 'rm -rf ~/Gzip-KNN/figs/ddos/ && mkdir -p ~/Gzip-KNN/figs/ddos/ && cp -r
      ddos/plots/* ~/Gzip-KNN/figs/ddos/ '
    deps:
    - path: ddos/plots/
      hash: md5
      md5: 22ac4455d4f24b7a0624f5d670f81e24.dir
      size: 15551940
      nfiles: 19
  condense@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_truthseeker
      hydra.sweeper.study_name=condense_gzip_knn_truthseeker hydra.sweeper.n_trials=128
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/gzip_knn/ hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/study.csv
      model.init.m='tag(log, interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_truthseeker.yaml
      hash: md5
      md5: 79baf4709c4a5f2535059ef8d1b6a082
      size: 258
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_knn/
      hash: md5
      md5: 029aa9a618d0edd127756b0b724a1742.dir
      size: 1568426
      nfiles: 513
    - path: truthseeker/reports/condense/gzip_knn/
      hash: md5
      md5: ef4ee3a0a4c954cea9b4f557a216e421.dir
      size: 353591
      nfiles: 374
  plot@ddos-gzip_knn:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/clean_gzip_knn.csv
      hash: md5
      md5: c730af75faf35ba958b15b2da82b25be
      size: 451405
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: b8279045dcf3a1fc574578e991427e73
      size: 23629
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 1512c0c363753afc28a3c093cc8e252c
      size: 22784
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: dd17a922e53b59b2d9b2d91c1237bb54
      size: 22329
    - path: ddos/plots/models_vs_accuracy.pdf
      hash: md5
      md5: bbbc08a7161735b6174984688003809f
      size: 13970
    - path: ddos/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 9b6acd61045df87af51626be2bdff7ab
      size: 15507
    - path: ddos/plots/models_vs_train_time.pdf
      hash: md5
      md5: 6a2303b531dfc78f20d9bf3dc62d8d42
      size: 16118
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 9cd54391a16400664710c9f0589a4d5f
      size: 22044
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0397f39f681300638b6fcc7c2d4e3bda
      size: 21616
  plot@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/clean_gzip_knn.csv
      hash: md5
      md5: 1c001f5a7008b439ee4c7946998cbe25
      size: 1002255
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: a146ab8c45d548ecd6c285a40c5d49e7
      size: 23228
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 59f7befb701cf34c5bf62a78206d7867
      size: 22642
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 938036a897293cbf7dc0b4caa19a5596
      size: 22182
    - path: kdd_nsl/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 0dad2f21fc6049c3a24972a35514ee71
      size: 15035
    - path: kdd_nsl/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 4361ffb492bff25d3cde95fcdb941ced
      size: 16578
    - path: kdd_nsl/plots/models_vs_train_time.pdf
      hash: md5
      md5: 416681afbf2e0e87dcc7dfe97f0835fc
      size: 16239
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 05a28fb9adea7b847f396fdd96c37d02
      size: 22208
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0a0a9daf98ab6efe98cb31b69cba2c65
      size: 21578
  plot@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/clean_gzip_knn.csv
      hash: md5
      md5: ff0162ac672b57d59126b965580901d9
      size: 620009
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 3cef9a04adf0d3378d4627c1a8b097a7
      size: 23348
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: a4a5f2426ffaf289e124fb09235e374b
      size: 22838
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: cda8914da9fabcfb40ea1eb0943e28d3
      size: 22333
    - path: truthseeker/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 7ef865e460d2652c873cfe333e7a308d
      size: 15215
    - path: truthseeker/plots/models_vs_predict_time.pdf
      hash: md5
      md5: eb57bd848d231a47615e311dbd1102b1
      size: 17930
    - path: truthseeker/plots/models_vs_train_time.pdf
      hash: md5
      md5: e7bc6589ed86e8f5c3fbb5a747c652fe
      size: 17739
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 0e7c326bef4c0d835f810c67172b2698
      size: 22057
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: ce21956e382cc48f0a71ef7ccfd79751
      size: 21593
  plot@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/clean_gzip_knn.csv
      hash: md5
      md5: 13a5803849f7dfdefe18ba16b0a5010f
      size: 448070
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 507715814c07145dbb140b2b6714973b
      size: 23499
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 97ec5498625837c79fc02850afba09f1
      size: 22606
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: f4c9d0805ea5d0ac8e1a2210ee788d47
      size: 22104
    - path: sms_spam/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 2eb9ea23cba4e5b734565b7aacdcf43c
      size: 14146
    - path: sms_spam/plots/models_vs_predict_time.pdf
      hash: md5
      md5: b518bf6b070e7916ad71febd3d3face6
      size: 15523
    - path: sms_spam/plots/models_vs_train_time.pdf
      hash: md5
      md5: 617f20892ba643f5c47077af63ae727f
      size: 14895
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 40aa8607331327c4f667fda367defb5f
      size: 22033
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 775c0bdfc7d9524f1e63b8879ddefccd
      size: 21590
  merge@truthseeker:
    cmd: python merge.py --big_dir truthseeker/plots/ --data_file clean/gzip_knn.csv
      --little_dir_data_file clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder
      truthseeker/plots --output_file merged.csv
    deps:
    - path: truthseeker/plots/clean/gzip_knn.csv
      hash: md5
      md5: 3814e076ca981a9f1e55aceffda9f354
      size: 544799
    - path: truthseeker/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 4fc564c72834d8c0df0ce9b37c0075a9
      size: 406060
    - path: truthseeker/plots/clean/gzip_svc.csv
      hash: md5
      md5: 98f028919aea0e75d0448a0458b4bb5a
      size: 660018
    outs:
    - path: truthseeker/plots/merged.csv
      hash: md5
      md5: 8b3f20dbebbff2e560dc5072ef5c880e
      size: 1665641
  merge@sms_spam:
    cmd: python merge.py --big_dir sms_spam/plots/ --data_file clean/gzip_knn.csv
      --little_dir_data_file clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder
      sms_spam/plots --output_file merged.csv
    deps:
    - path: sms_spam/plots/clean/gzip_knn.csv
      hash: md5
      md5: 39432f9d5d44d7d81a0dcfbda787b658
      size: 470395
    - path: sms_spam/plots/clean/gzip_logistic.csv
      hash: md5
      md5: e153331d3ee2e0d7be84d0445d6ee9ee
      size: 531054
    - path: sms_spam/plots/clean/gzip_svc.csv
      hash: md5
      md5: 68c45d51239b5901f7be4e957bd40450
      size: 568172
    outs:
    - path: sms_spam/plots/merged.csv
      hash: md5
      md5: a2b908fc3bcd6685e71c05af12d1f343
      size: 1624136
  merge@ddos:
    cmd: python merge.py --big_dir ddos/plots/ --data_file clean/gzip_knn.csv --little_dir_data_file
      clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder ddos/plots --output_file
      merged.csv
    deps:
    - path: ddos/plots/clean/gzip_knn.csv
      hash: md5
      md5: 43e4847f50bc8e8d8e010eefbec80c4b
      size: 1314108
    - path: ddos/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 135eed7b506e0a23aa90a069247788de
      size: 929319
    - path: ddos/plots/clean/gzip_svc.csv
      hash: md5
      md5: a1b9b61655aa3f3ecf093f9efafc335e
      size: 1036280
    outs:
    - path: ddos/plots/merged.csv
      hash: md5
      md5: 1f53fd3ca7f2249cd2e157b79d3781b9
      size: 3392540
  merge@kdd_nsl:
    cmd: python merge.py --big_dir kdd_nsl/plots/ --data_file clean/gzip_knn.csv --little_dir_data_file
      clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder kdd_nsl/plots --output_file
      merged.csv
    deps:
    - path: kdd_nsl/plots/clean/gzip_knn.csv
      hash: md5
      md5: a103ce34b10219cd410669a3bad3acb1
      size: 666119
    - path: kdd_nsl/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 782b9bad66f41af0e1a8ecad539bbd7e
      size: 917447
    - path: kdd_nsl/plots/clean/gzip_svc.csv
      hash: md5
      md5: 7ab8245dbf6413a621c903e52b10f051
      size: 1115497
    outs:
    - path: kdd_nsl/plots/merged.csv
      hash: md5
      md5: 677c23c80060a7c7d5c5f0b5c591927b
      size: 2789429
  plot@kdd_nsl:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/merged.csv
      hash: md5
      md5: 677c23c80060a7c7d5c5f0b5c591927b
      size: 2789429
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 3a4aaeb583cae0912520f139f9aab386
      size: 24419
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 56dcdadbbe3de910b6938a15a5e7f9d4
      size: 22989
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 34cb35dfaf12a0e80220bbf4bba17ec2
      size: 23428
    - path: kdd_nsl/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 4cb5fe99edb86b584bb1ac5d7b540299
      size: 21754
    - path: kdd_nsl/plots/models_vs_predict_time.pdf
      hash: md5
      md5: a527153f584dbcd379e212b2fc812b02
      size: 18798
    - path: kdd_nsl/plots/models_vs_train_time.pdf
      hash: md5
      md5: e99bce817a45d0aa4400b7e3a82a1199
      size: 18373
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: ce7d236858e5ac790c7d91414b523c5a
      size: 22233
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 66c1c8dbc6e37464289aa7ee1369da38
      size: 21611
  plot@truthseeker:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/merged.csv
      hash: md5
      md5: 8b3f20dbebbff2e560dc5072ef5c880e
      size: 1665641
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 65457f0310e5814a2b61243c8a70fb97
      size: 23824
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: b7aceaea511fdf31b0ce4e9d59250f3c
      size: 22984
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: b1e430a453843c270b10148952f47e3a
      size: 23404
    - path: truthseeker/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 245dc727a79469ff80f72ec696bf9b0f
      size: 20437
    - path: truthseeker/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 784522384f91bd4d24ef08d97d0f12b5
      size: 18174
    - path: truthseeker/plots/models_vs_train_time.pdf
      hash: md5
      md5: 2dec545386ab2f487167b61a97a7994d
      size: 17745
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 1405d72aaf3fc50b6c94b959820a97eb
      size: 22192
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: bcb2938ec124441479dccdf06791f4bb
      size: 21586
  plot@sms_spam:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/merged.csv
      hash: md5
      md5: a2b908fc3bcd6685e71c05af12d1f343
      size: 1624136
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 7f58103a723b523a655257fdc0cadad8
      size: 24365
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: eb03feb9e45d4e22be04714b58a912e3
      size: 23764
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 613eeba0b0ffd2470dc3ba8d3aa6004d
      size: 23220
    - path: sms_spam/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 8dc2177a206c9950ff881b4267581bfe
      size: 19460
    - path: sms_spam/plots/models_vs_predict_time.pdf
      hash: md5
      md5: c8f9d6657c5c766ab0704ba2e4045644
      size: 18067
    - path: sms_spam/plots/models_vs_train_time.pdf
      hash: md5
      md5: 39460825f69ffcc6fb04aa2495205d4a
      size: 17645
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: aa17f95ce6d6ee0ea5ee54efc7943b24
      size: 22237
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 63ec0d09e9fb43d41e903090ce3613a3
      size: 21578
  plot@ddos:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/merged.csv
      hash: md5
      md5: 1f53fd3ca7f2249cd2e157b79d3781b9
      size: 3392540
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: a3fe1af653e12fc8da2299b2f0b23d1b
      size: 24790
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 6194c72b4c4041ad617b48ded6389002
      size: 24326
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: bf805f05ec265d8a041de6ca8ea330c9
      size: 22948
    - path: ddos/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 04d79b1fc519e643f3b5c63f6beceed7
      size: 23072
    - path: ddos/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 85ea7dae3d5ec3acb9ca611502750ab7
      size: 19438
    - path: ddos/plots/models_vs_train_time.pdf
      hash: md5
      md5: f283bcfe2c161873943c1f6fe2b72ac4
      size: 19015
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 102b53eded0214fdd7971baa9ab7c2a2
      size: 22227
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 1de81513181654716b2f0aa83e4ed05b
      size: 21615
  condense@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_logistic model=best_gzip_logistic_truthseeker
      hydra.sweeper.study_name=condense_gzip_logistic_truthseeker hydra.sweeper.n_trials=128
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/study.csv
      model.init.m='tag(log, interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_logistic_truthseeker.yaml
      hash: md5
      md5: 448e12c542f48c074057e9374743d61e
      size: 326
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_logistic/
      hash: md5
      md5: 79d74a0dfe0486ada3f03b24c68973dc.dir
      size: 1576129
      nfiles: 513
    - path: truthseeker/reports/condense/gzip_logistic/
      hash: md5
      md5: 3de3011b1d96e4990111f5b1601e3b9d.dir
      size: 400559
      nfiles: 343
  condense@ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_knn model=best_gzip_knn_ddos hydra.sweeper.study_name=condense_gzip_knn_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: 74721f3e7ab6096e246c486d6080e1ab
      size: 259
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_knn/
      hash: md5
      md5: a2dc5aef876897f53c4076e4012b678a.dir
      size: 1542474
      nfiles: 513
    - path: ddos/reports/condense/gzip_knn/
      hash: md5
      md5: 781709e87f2e740f6a0f4e914ee9754f.dir
      size: 340848
      nfiles: 379
  condense@ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_logistic model=best_gzip_logistic_ddos hydra.sweeper.study_name=condense_gzip_logistic_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: 9507b28fa5a18b501fe9d80ec33bed1c
      size: 334
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_logistic/
      hash: md5
      md5: 4f8f846516837f0e7cd63c8911aff99a.dir
      size: 1623568
      nfiles: 513
    - path: ddos/reports/condense/gzip_logistic/
      hash: md5
      md5: 051b71717b4a7986a1965ebadf448838.dir
      size: 350870
      nfiles: 384
  condense@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_kdd_nsl hydra.sweeper.study_name=condense_gzip_knn_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=kdd_nsl files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: 2697918626643d0136286367b83ee6b9
      size: 258
    - path: kdd_nsl/logs/method/
      hash: md5
      md5: de8764bbb2daa13261f3f5d1dff27a30.dir
      size: 79348
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/gzip_knn/
      hash: md5
      md5: 7d53f3534ceb486e6601d344562cfb32.dir
      size: 1564530
      nfiles: 513
    - path: kdd_nsl/reports/condense/gzip_knn/
      hash: md5
      md5: 7e5a283215281be3ee4189ebd5a6e3f1.dir
      size: 342924
      nfiles: 384
  parse_params:
    cmd: python -m deckard.layers.parse
    deps:
    - path: conf/data/default.yaml
      hash: md5
      md5: 6c1a9ca0f6a0798fe74d19001946145a
      size: 21
    - path: conf/default.yaml
      hash: md5
      md5: a0a533f84a7ffce197e0db5439219faf
      size: 1504
    - path: conf/files/default.yaml
      hash: md5
      md5: 7a2df5f8b98699376c3fb4da05d70dea
      size: 306
    - path: conf/model/default.yaml
      hash: md5
      md5: ef15da6b54f8005e906750eccb079885
      size: 26
    - path: conf/scorers/default.yaml
      hash: md5
      md5: d8d00e7d284ea68b1244743dfef8f00c
      size: 280
    outs:
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
  test_each_metric@gzip-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/gzip/20
      hash: md5
      md5: 1ba7c981d7d8c6d35bd82d2889f15b63.dir
      size: 7478
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@zstd-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/zstd/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=zstd  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/zstd/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/zstd/20
      hash: md5
      md5: c7655e5cbaf6b6e3c948071759c546da.dir
      size: 7478
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/zstd/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@pkl-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/pkl/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=pkl  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/pkl/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/pkl/20
      hash: md5
      md5: 9f998f1bb562b1548a18bfbcfbf175ce.dir
      size: 7464
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/pkl/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@bz2-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/bz2/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=bz2  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/bz2/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/bz2/20
      hash: md5
      md5: 42c5cca4fb280919b4e4a83491d6e298.dir
      size: 7464
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/bz2/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@lzma-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/lzma/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=lzma  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/lzma/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/lzma/20
      hash: md5
      md5: bc34056fa7ddb781d5d5d0e4945707b1.dir
      size: 7478
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/lzma/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@levenshtein-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/levenshtein/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=levenshtein  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/levenshtein/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/levenshtein/20
      hash: md5
      md5: edd1276702ed94258009981ffa615cf8.dir
      size: 7555
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/levenshtein/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@ratio-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/ratio/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=ratio  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/ratio/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/ratio/20
      hash: md5
      md5: 730b5546dd21bc7d2913315e379fb3de.dir
      size: 7471
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/ratio/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@hamming-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/hamming/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=hamming  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/hamming/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/hamming/20
      hash: md5
      md5: fca32d1698ba623610282ccdbbb04676.dir
      size: 7499
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/hamming/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@gzip_knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_dataset  files.name=gzip_knn
      data.sample.train_size=100 files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model_name=gzip_knn model=gzip_knn hydra.run.dir=kdd_nsl/logs/test_each_dataset/gzip_knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 41e95614d524a857c0260b13ce77202b
      size: 488
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_dataset/gzip_knn
      hash: md5
      md5: 955370e62c64341f4410f3f46f6d84fd.dir
      size: 7263
      nfiles: 4
    - path: kdd_nsl/reports/test_each_dataset/gzip_knn/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@gzip_knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_dataset  files.name=gzip_knn
      data.sample.train_size=100 files.directory=truthseeker data=truthseeker dataset=truthseeker
      model_name=gzip_knn model=gzip_knn hydra.run.dir=truthseeker/logs/test_each_dataset/gzip_knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 41e95614d524a857c0260b13ce77202b
      size: 488
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/test_each_dataset/gzip_knn
      hash: md5
      md5: f8dd2e14f7e12daed6ebfd9a552d6c4e.dir
      size: 7305
      nfiles: 4
    - path: truthseeker/reports/test_each_dataset/gzip_knn/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@ddos-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model=gzip_knn
      hydra.run.dir=ddos/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_knn
      hash: md5
      md5: 34014062bdf037be909b6511c452f1b0.dir
      size: 8196
      nfiles: 4
    - path: ddos/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 6bc7c1529294e0629279f82edf5ea291
      size: 490
  test_each_dataset@ddos-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_svc model=gzip_svc
      hydra.run.dir=ddos/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_svc
      hash: md5
      md5: c7a8773d3d767c2512c5756208b10807.dir
      size: 8218
      nfiles: 4
    - path: ddos/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: e4b16dc85cf53ba288f3cd9f26210aaf
      size: 488
  test_each_dataset@ddos-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=ddos data=ddos dataset=ddos model_name=gzip_logistic
      model=gzip_logistic hydra.run.dir=ddos/logs/train/gzip_logistic ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_logistic
      hash: md5
      md5: 8480d22fd88afc847b24f596f7f030f6.dir
      size: 8336
      nfiles: 4
    - path: ddos/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: da488217f0ed9104d516c2952f066d5c
      size: 490
  test_each_dataset@truthseeker-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model=gzip_knn hydra.run.dir=truthseeker/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_knn
      hash: md5
      md5: 536447b8fd78cc00f3e3f3d698f719c4.dir
      size: 8301
      nfiles: 4
    - path: truthseeker/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: a66834b74b35f61d606432cf915880eb
      size: 485
  test_each_dataset@truthseeker-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_svc
      model=gzip_svc hydra.run.dir=truthseeker/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_svc
      hash: md5
      md5: fa296f9d36a2ffe3bf04e6d68a038d63.dir
      size: 8327
      nfiles: 4
    - path: truthseeker/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: a15c98063dd637b89f7f83cdb9bc7aed
      size: 487
  test_each_dataset@truthseeker-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=truthseeker data=truthseeker dataset=truthseeker
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=truthseeker/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_logistic
      hash: md5
      md5: 7e912ef73ed3e79c7447311085d096a9.dir
      size: 8443
      nfiles: 4
    - path: truthseeker/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: b38dd1c454c449a38bb24d99e2f6d449
      size: 487
  test_each_dataset@sms_spam-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model=gzip_knn hydra.run.dir=sms_spam/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_knn
      hash: md5
      md5: 01cedc87d49f5a0c5540e98151ae5ce1.dir
      size: 8241
      nfiles: 4
    - path: sms_spam/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: de6ea155d85de59ed71b8898ee759d1b
      size: 488
  test_each_dataset@sms_spam-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_svc
      model=gzip_svc hydra.run.dir=sms_spam/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_svc
      hash: md5
      md5: 746507c1cf1ddd7b2c82cd6fb4dc8961.dir
      size: 8266
      nfiles: 4
    - path: sms_spam/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: e345d250dbf7a87e13e769df1466a891
      size: 489
  test_each_dataset@sms_spam-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=sms_spam data=sms_spam dataset=sms_spam
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=sms_spam/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_logistic
      hash: md5
      md5: 0873e9fbe884022ce29dcad39692244b.dir
      size: 8382
      nfiles: 4
    - path: sms_spam/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 32d7c19c598002a11967d892680f28b3
      size: 489
  test_each_dataset@kdd_nsl-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model=gzip_knn
      hydra.run.dir=kdd_nsl/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_knn
      hash: md5
      md5: eb397e4c9133b431e5a370cf48389a24.dir
      size: 8260
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: fce876ed123f5404f27050b6be2f7915
      size: 490
  test_each_dataset@kdd_nsl-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_svc model=gzip_svc
      hydra.run.dir=kdd_nsl/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_svc
      hash: md5
      md5: 8fb91a0664ebd2b52486013e9a423a59.dir
      size: 8281
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 0c32dedcbbaa73104c3f8a6a293c9142
      size: 487
  test_each_dataset@kdd_nsl-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=kdd_nsl/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_logistic
      hash: md5
      md5: 9339f80b58012e157e77276043f56ef2.dir
      size: 8400
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 42d0162e60c0a2a3fa14577fc87d80da
      size: 490
  test_each_metric@jaro-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/jaro/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=jaro  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/jaro/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/jaro/20
      hash: md5
      md5: 5db3a3821604041e7c04682d5b193b68.dir
      size: 7457
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/jaro/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@jaro_winkler-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/jaro_winkler/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=jaro_winkler  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/jaro_winkler/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/jaro_winkler/20
      hash: md5
      md5: 4148c047d6cfeec692ec4abed5c2bf0d.dir
      size: 7569
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/jaro_winkler/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@seqratio-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/seqratio/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=seqratio  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/seqratio/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/seqratio/20
      hash: md5
      md5: 4fb530bcc31f36c0686427d6f915a300.dir
      size: 7513
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/seqratio/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_knn/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_knn/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_knn/gzip/20
      hash: md5
      md5: 091876589a79bc7469e20fbb4ac3c3d4.dir
      size: 7470
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_knn/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_svc-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_svc/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_svc model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_svc/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_svc/gzip/20
      hash: md5
      md5: e6777bb7db2e5d2ad86feab414e68193.dir
      size: 7499
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_svc/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_logistic-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_logistic/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_logistic model_name=gzip_knn model.init.metric=gzip  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_logistic/gzip/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 29ab1887ca13b11fa6895a3d3888f01e
      size: 490
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_logistic/gzip/20
      hash: md5
      md5: 2c4dc837874a92fb4c8489bd6b69b954.dir
      size: 7562
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_logistic/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  grid_search@20-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/20
      hash: md5
      md5: 366c6335d50e8616bb174c833aa8bc7d.dir
      size: 1378803
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/20/train/
      hash: md5
      md5: db562e62674bfdf3834f24982e4863c5.dir
      size: 1442091
      nfiles: 1344
  grid_search@20-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/20
      hash: md5
      md5: 13208b904974e74a36e3f348d3c77cb6.dir
      size: 1544105
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/20/train/
      hash: md5
      md5: d3129b6ec0089c29f2587295c5b0b9ca.dir
      size: 1517999
      nfiles: 1417
  grid_search@20-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/20
      hash: md5
      md5: da52590b8dceaaeebe1abdfbe7a6e4ca.dir
      size: 1494603
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/20/train/
      hash: md5
      md5: 842cf9225a259971bd112b1b67e317b0.dir
      size: 1545527
      nfiles: 1711
  grid_search@20-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=truthseeker/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/20
      hash: md5
      md5: 612dc9a25828750e2b83f5423fd3f2a0.dir
      size: 1355419
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/20/train/
      hash: md5
      md5: 96f7cd8073d76dd06ebdb42e81c8ee97.dir
      size: 691265
      nfiles: 748
  grid_search@20-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16 hydra.sweep.dir=truthseeker/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/20
      hash: md5
      md5: c9b4c2481886b7050b45336790232208.dir
      size: 1392529
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/20/train/
      hash: md5
      md5: 7e9fec97b937202d11408392a76d1ff8.dir
      size: 824349
      nfiles: 687
  grid_search@20-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=truthseeker/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/20
      hash: md5
      md5: 0d3472387b2383c0c86453d0c8bad1d8.dir
      size: 1412257
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/20/train/
      hash: md5
      md5: 1ad2d5bba40bda952a707e6591b219e8.dir
      size: 854342
      nfiles: 960
  grid_search@20-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/20
      hash: md5
      md5: cd7d38828e668932edb465aab8f669b9.dir
      size: 1368286
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/20/train/
      hash: md5
      md5: 34f87eea72260df92dfc11828d1704d9.dir
      size: 1011221
      nfiles: 987
  grid_search@20-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/20
      hash: md5
      md5: c71b401cee3353f28af948a5c81c2aef.dir
      size: 1481666
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/20/train/
      hash: md5
      md5: 880ce756ce89fc78cbc8db2f90599ce7.dir
      size: 1260566
      nfiles: 1168
  grid_search@20-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/20
      hash: md5
      md5: f26f2634b0feb17505fdce186f608a7a.dir
      size: 1423049
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/20/train/
      hash: md5
      md5: a0abcb613fd0a6bd694beca6a6547966.dir
      size: 1012876
      nfiles: 1152
  grid_search@20-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/20/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/20
      hash: md5
      md5: aba9aa0bc386925b6640d3694e172307.dir
      size: 1500275
      nfiles: 514
    - path: ddos/reports/gzip_knn/20/train/
      hash: md5
      md5: 68277948d27497ac28c2da134e1ede49.dir
      size: 1031000
      nfiles: 1153
  grid_search@20-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/20/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/20
      hash: md5
      md5: 661dda680a5873aa7bd6706e4fe84aba.dir
      size: 1595239
      nfiles: 514
    - path: ddos/reports/gzip_logistic/20/train/
      hash: md5
      md5: de7c5055afceca3fefe4d1c056135fca.dir
      size: 1046533
      nfiles: 995
  grid_search@20-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/20/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/20
      hash: md5
      md5: 29f2100d018a3a1cbc73245d8c852843.dir
      size: 1523497
      nfiles: 514
    - path: ddos/reports/gzip_svc/20/train/
      hash: md5
      md5: e2e8b8ef8171fa462ebc336c94662112.dir
      size: 1027981
      nfiles: 1152
  grid_search@100-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/100
      hash: md5
      md5: ae62d41d63c00203168aba1bc6f23d7f.dir
      size: 1377586
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/100/train/
      hash: md5
      md5: f9b9f5cb3a5d5e8f152fd8a3e1170cf1.dir
      size: 756846
      nfiles: 684
  grid_search@100-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/100
      hash: md5
      md5: dbf0afc908592f45f19b5d0d3c9e99a2.dir
      size: 1515165
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/100/train/
      hash: md5
      md5: f0a9505ca09a5f5ba802e07e82585195.dir
      size: 764297
      nfiles: 733
  grid_search@100-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/100
      hash: md5
      md5: a4658e054fa447543681d65de2c9c00a.dir
      size: 1470574
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/100/train/
      hash: md5
      md5: 33ef67ff70192fa7addf64029c8551fd.dir
      size: 692554
      nfiles: 768
  grid_search@100-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=truthseeker/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/100
      hash: md5
      md5: 1f1341402b490a0def78814bc901c378.dir
      size: 1352213
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/100/train/
      hash: md5
      md5: 9d6689140e0a0d71876cf4f866ed32e9.dir
      size: 730849
      nfiles: 702
  grid_search@100-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16 hydra.sweep.dir=truthseeker/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/100
      hash: md5
      md5: 1eed504bee679829bc0dd3da571952b6.dir
      size: 1419722
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/100/train/
      hash: md5
      md5: bba8e74c61d89a36d976580c4bc35c5f.dir
      size: 855271
      nfiles: 674
  grid_search@100-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=truthseeker/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/100
      hash: md5
      md5: 26f9b8831beeacd18ec56aca02107721.dir
      size: 1444462
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/100/train/
      hash: md5
      md5: 0f2ffd9e14e2f5c7e125a8584f8b730d.dir
      size: 682028
      nfiles: 765
  grid_search@100-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=16
      hydra.sweep.dir=sms_spam/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/100
      hash: md5
      md5: 607fa44665618028479ae1fd21964182.dir
      size: 1345464
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/100/train/
      hash: md5
      md5: c8fcfdd70f97267337a81d808eee8adb.dir
      size: 738490
      nfiles: 668
  find_best_model@ddos-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_ddos --config_subdir model --params_file best_gzip_knn_ddos --default_config
      gzip_knn
    deps:
    - path: ddos/logs/gzip_knn/
      hash: md5
      md5: d2c6441e85e3509b8968240a48196d07.dir
      size: 4193267
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: bdea475d3a2bc59106f27dccd0fc27fc
      size: 419
  find_best_model@ddos-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_ddos --config_subdir model --params_file best_gzip_svc_ddos --default_config
      gzip_svc
    deps:
    - path: ddos/logs/gzip_svc/
      hash: md5
      md5: 17e1bf2ac43401d7f9e105bb6d4b2654.dir
      size: 5409327
      nfiles: 2056
    outs:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: 3a7f27dd470ec9e55c10403814f550f2
      size: 442
  find_best_model@ddos-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_ddos --config_subdir model --params_file best_gzip_logistic_ddos
      --default_config gzip_logistic
    deps:
    - path: ddos/logs/gzip_logistic/
      hash: md5
      md5: 4ba5ce081a1bc364ed7e3f3f8c42dfd6.dir
      size: 4431235
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: d5e603d6386dd6cf1167088eaecbdde5
      size: 498
  condense@ddos-knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_knn model=gzip_knn files.directory=ddos
      files.reports=reports/condense/knn/ hydra.sweeper.study_name=condense_knn_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/knn/
      hydra.callbacks.study_dump.output_file=ddos/logs/knn/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_knn --multirun
    deps:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: bdea475d3a2bc59106f27dccd0fc27fc
      size: 419
    - path: ddos/logs/method/
      hash: md5
      md5: a09dd0467b0e8a142d6f32a38f205159.dir
      size: 59399
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/knn/
      hash: md5
      md5: 75bcfe601591f87c8ab1492553f86b0a.dir
      size: 10904119
      nfiles: 4097
    - path: ddos/reports/condense/knn/
      hash: md5
      md5: 18b11d46fd07e34dad7540abc72d8b83.dir
      size: 5612497
      nfiles: 6108
  condense@ddos-svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_svc model=gzip_svc files.directory=ddos
      files.reports=reports/condense/svc/ hydra.sweeper.study_name=condense_svc_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/svc/
      hydra.callbacks.study_dump.output_file=ddos/logs/svc/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: 3a7f27dd470ec9e55c10403814f550f2
      size: 442
    - path: ddos/logs/method/
      hash: md5
      md5: a09dd0467b0e8a142d6f32a38f205159.dir
      size: 59399
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/svc/
      hash: md5
      md5: 6a15cfc205c7382b8d7d6d67d35ddfb0.dir
      size: 11072739
      nfiles: 4097
    - path: ddos/reports/condense/svc/
      hash: md5
      md5: daaf428c939e9bfcc233bf88ee39f9fb.dir
      size: 2819182
      nfiles: 3072
  condense@ddos-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_logistic model=gzip_logistic
      files.directory=ddos files.reports=reports/condense/logistic/ hydra.sweeper.study_name=condense_logistic_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/logistic/
      hydra.callbacks.study_dump.output_file=ddos/logs/logistic/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: d5e603d6386dd6cf1167088eaecbdde5
      size: 498
    - path: ddos/logs/method/
      hash: md5
      md5: a09dd0467b0e8a142d6f32a38f205159.dir
      size: 59399
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/logistic/
      hash: md5
      md5: 064e5768d0155635c9bc6287914ac9f7.dir
      size: 11690343
      nfiles: 4097
    - path: ddos/reports/condense/logistic/
      hash: md5
      md5: 7ce841278929a90690417685b7c7f143.dir
      size: 5929815
      nfiles: 5888
  grid_search@100-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/100/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/100
      hash: md5
      md5: 29f6a9f688470b87b539d70c56e91727.dir
      size: 1527909
      nfiles: 514
    - path: ddos/reports/gzip_knn/100/train/
      hash: md5
      md5: fcd697bacc852fe936422048af37c74b.dir
      size: 995947
      nfiles: 1116
  grid_search@100-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/100/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/100
      hash: md5
      md5: 654769a893015d88037f238957d153de.dir
      size: 1622748
      nfiles: 514
    - path: ddos/reports/gzip_logistic/100/train/
      hash: md5
      md5: bbfc0d4d7cdc3c831587a3bf84a0c38c.dir
      size: 999456
      nfiles: 964
  grid_search@100-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/100/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/100
      hash: md5
      md5: 8777b87f577cf3f54ed76c5a9e21db1a.dir
      size: 1553628
      nfiles: 514
    - path: ddos/reports/gzip_svc/100/train/
      hash: md5
      md5: 2856fb3e87aa94a1c09a5e4e655b5c31.dir
      size: 1027811
      nfiles: 1149
  find_best_model@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_kdd_nsl --config_subdir model --params_file best_gzip_knn_kdd_nsl --default_config
      gzip_knn
    deps:
    - path: kdd_nsl/logs/gzip_knn/
      hash: md5
      md5: 6418750af32f15be9c6f35e0975b3276.dir
      size: 4024441
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: f9ad25a19931041146b4b1eab45fda68
      size: 420
  find_best_model@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_kdd_nsl --config_subdir model --params_file best_gzip_svc_kdd_nsl --default_config
      gzip_svc
    deps:
    - path: kdd_nsl/logs/gzip_svc/
      hash: md5
      md5: 381879c377b6eeccbb9d1aa42f78fec2.dir
      size: 4366326
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_svc_kdd_nsl.yaml
      hash: md5
      md5: 0542c20ce7b5a74a20d4ab1c38fdf213
      size: 434
  find_best_model@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_kdd_nsl --config_subdir model --params_file best_gzip_logistic_kdd_nsl
      --default_config gzip_logistic
    deps:
    - path: kdd_nsl/logs/gzip_logistic/
      hash: md5
      md5: 34325e24d16a4af0ec3286ec4b034e14.dir
      size: 4504884
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_logistic_kdd_nsl.yaml
      hash: md5
      md5: e21d828b4b1ad122d7755e986de5b93d
      size: 353
  find_best_model@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_sms_spam --config_subdir model --params_file best_gzip_knn_sms_spam
      --default_config gzip_knn
    deps:
    - path: sms_spam/logs/gzip_knn/
      hash: md5
      md5: 689c69db8c621101649ddef5bd0c1bb5.dir
      size: 2713750
      nfiles: 1028
    outs:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 41fad710bcb8b8b8dd548d669b2ed748
      size: 419
  find_best_model@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_sms_spam --config_subdir model --params_file best_gzip_svc_sms_spam
      --default_config gzip_svc
    deps:
    - path: sms_spam/logs/gzip_svc/
      hash: md5
      md5: b91e15f0eb5ee57aed8aeb5a5d6feeab.dir
      size: 2777710
      nfiles: 1028
    outs:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: bb3008613c3311a696d32fb683732c00
      size: 442
  find_best_model@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_sms_spam --config_subdir model --params_file best_gzip_logistic_sms_spam
      --default_config gzip_logistic
    deps:
    - path: sms_spam/logs/gzip_logistic/
      hash: md5
      md5: 89191dbe147b40192129776ef2652900.dir
      size: 1649284
      nfiles: 578
    outs:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: fd1d0481be57844d935aea28e995a369
      size: 485
  condense@kdd_nsl-knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=kdd_nsl files.reports=reports/condense/knn/ hydra.sweeper.study_name=condense_knn_kdd_nsl
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/knn/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/knn/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_knn --multirun
    deps:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: f9ad25a19931041146b4b1eab45fda68
      size: 420
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/knn/
      hash: md5
      md5: 81f50250e51650881283dcf68d43234c.dir
      size: 10952920
      nfiles: 4097
    - path: kdd_nsl/reports/condense/knn/
      hash: md5
      md5: 3f8eb680f1f8960490e4581bfa16cfd2.dir
      size: 2869636
      nfiles: 3011
  condense@kdd_nsl-svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=kdd_nsl files.reports=reports/condense/svc/ hydra.sweeper.study_name=condense_svc_kdd_nsl
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/svc/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/svc/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_kdd_nsl.yaml
      hash: md5
      md5: 0542c20ce7b5a74a20d4ab1c38fdf213
      size: 434
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/svc/
      hash: md5
      md5: 750792529270826f12739d2cc4f4bc9b.dir
      size: 11071948
      nfiles: 4097
    - path: kdd_nsl/reports/condense/svc/
      hash: md5
      md5: 7e8ad0f094b919a7de208497f9614399.dir
      size: 5715509
      nfiles: 6083
  condense@kdd_nsl-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=kdd_nsl files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_kdd_nsl hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=kdd_nsl/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_kdd_nsl.yaml
      hash: md5
      md5: e21d828b4b1ad122d7755e986de5b93d
      size: 353
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/logistic/
      hash: md5
      md5: 0ce56c12dc58fe66c1fa6fec867b2cf5.dir
      size: 11710344
      nfiles: 4097
    - path: kdd_nsl/reports/condense/logistic/
      hash: md5
      md5: ae358823518ca6759ddfa8d1c738e367.dir
      size: 3101125
      nfiles: 2948
  condense@truthseeker-knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=truthseeker files.reports=reports/condense/knn/
      hydra.sweeper.study_name=condense_knn_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/knn/ hydra.callbacks.study_dump.output_file=truthseeker/logs/knn/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_knn --multirun
    deps:
    - path: conf/model/best_gzip_knn_truthseeker.yaml
      hash: md5
      md5: 79baf4709c4a5f2535059ef8d1b6a082
      size: 258
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/knn/
      hash: md5
      md5: 3e8b9011ee1c591904115e67db9a1a50.dir
      size: 11038890
      nfiles: 4097
    - path: truthseeker/reports/condense/knn/
      hash: md5
      md5: 1565eb2348976cc6ac9108396141080b.dir
      size: 2831604
      nfiles: 3016
  condense@truthseeker-svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=truthseeker files.reports=reports/condense/svc/
      hydra.sweeper.study_name=condense_svc_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/svc/ hydra.callbacks.study_dump.output_file=truthseeker/logs/svc/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_truthseeker.yaml
      hash: md5
      md5: 97d9d5857744b1cc077513ac5a659f62
      size: 302
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/svc/
      hash: md5
      md5: 845724e35dc3a54bea549410a35d6afd.dir
      size: 11192018
      nfiles: 4097
    - path: truthseeker/reports/condense/svc/
      hash: md5
      md5: 6cbdc47d51df656dcf7e8ae6221795b3.dir
      size: 2825163
      nfiles: 3064
  condense@truthseeker-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=truthseeker files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=truthseeker/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_truthseeker.yaml
      hash: md5
      md5: 448e12c542f48c074057e9374743d61e
      size: 326
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/logistic/
      hash: md5
      md5: f7e754346e500d1b007b519d86f4c608.dir
      size: 11847643
      nfiles: 4097
    - path: truthseeker/reports/condense/logistic/
      hash: md5
      md5: 8bd6876fc856ea5bd1e95b54093aedb8.dir
      size: 2976098
      nfiles: 3011
  condense@sms_spam-knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=sms_spam files.reports=reports/condense/knn/
      hydra.sweeper.study_name=condense_knn_sms_spam hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/condense/knn/ hydra.callbacks.study_dump.output_file=sms_spam/logs/knn/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_knn --multirun
    deps:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 41fad710bcb8b8b8dd548d669b2ed748
      size: 419
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/knn/
      hash: md5
      md5: dbca2ef697396b673fbf6f1d3fc33909.dir
      size: 10956283
      nfiles: 4097
    - path: sms_spam/reports/condense/knn/
      hash: md5
      md5: 1b368af057a2a858b18ca74b1ba9f336.dir
      size: 2797813
      nfiles: 3016
  condense@sms_spam-svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=sms_spam files.reports=reports/condense/svc/
      hydra.sweeper.study_name=condense_svc_sms_spam hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/condense/svc/ hydra.callbacks.study_dump.output_file=sms_spam/logs/svc/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: bb3008613c3311a696d32fb683732c00
      size: 442
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/svc/
      hash: md5
      md5: a8901468d2857bb8b59c082c0f802eb7.dir
      size: 11109821
      nfiles: 4097
    - path: sms_spam/reports/condense/svc/
      hash: md5
      md5: fd7f8d975462fb720becc9d3d2cd9e5c.dir
      size: 2790761
      nfiles: 3065
  condense@sms_spam-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=sms_spam files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_sms_spam hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=sms_spam/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: fd1d0481be57844d935aea28e995a369
      size: 485
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/logistic/
      hash: md5
      md5: f61bee237255f66d921df9281943e60f.dir
      size: 11764986
      nfiles: 4097
    - path: sms_spam/reports/condense/logistic/
      hash: md5
      md5: e618499d3730db0c39319e82ee7807f7.dir
      size: 2942227
      nfiles: 3011
  compile@sms_spam-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/logistic  --results_file
      sms_spam/reports/condense/logistic.csv
    deps:
    - path: sms_spam/reports/condense/logistic/
      hash: md5
      md5: e618499d3730db0c39319e82ee7807f7.dir
      size: 2942227
      nfiles: 3011
    outs:
    - path: sms_spam/reports/condense/logistic.csv
      hash: md5
      md5: a0fa06c80b37e446a0d01d894227fdf5
      size: 1605690
  compile@kdd_nsl-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/svc  --results_file
      kdd_nsl/reports/condense/svc.csv
    deps:
    - path: kdd_nsl/reports/condense/svc/
      hash: md5
      md5: 7e8ad0f094b919a7de208497f9614399.dir
      size: 5715509
      nfiles: 6083
    outs:
    - path: kdd_nsl/reports/condense/svc.csv
      hash: md5
      md5: da3da9364069ab309277a3ddc970f77d
      size: 3240799
  compile@kdd_nsl-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/logistic  --results_file
      kdd_nsl/reports/condense/logistic.csv
    deps:
    - path: kdd_nsl/reports/condense/logistic/
      hash: md5
      md5: ae358823518ca6759ddfa8d1c738e367.dir
      size: 3101125
      nfiles: 2948
    outs:
    - path: kdd_nsl/reports/condense/logistic.csv
      hash: md5
      md5: 4b91546f39a3097a8568c90d2e3ddd87
      size: 1643961
  compile@ddos-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/svc  --results_file
      ddos/reports/condense/svc.csv
    deps:
    - path: ddos/reports/condense/svc/
      hash: md5
      md5: daaf428c939e9bfcc233bf88ee39f9fb.dir
      size: 2819182
      nfiles: 3072
    outs:
    - path: ddos/reports/condense/svc.csv
      hash: md5
      md5: 2b2e966947db80caaea3d445003927ce
      size: 1580858
  compile@truthseeker-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/knn  --results_file
      truthseeker/reports/condense/knn.csv
    deps:
    - path: truthseeker/reports/condense/knn/
      hash: md5
      md5: 1565eb2348976cc6ac9108396141080b.dir
      size: 2831604
      nfiles: 3016
    outs:
    - path: truthseeker/reports/condense/knn.csv
      hash: md5
      md5: b4ec50d98f613984be6261a059120255
      size: 1595839
  compile@truthseeker-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/svc  --results_file
      truthseeker/reports/condense/svc.csv
    deps:
    - path: truthseeker/reports/condense/svc/
      hash: md5
      md5: 6cbdc47d51df656dcf7e8ae6221795b3.dir
      size: 2825163
      nfiles: 3064
    outs:
    - path: truthseeker/reports/condense/svc.csv
      hash: md5
      md5: 4cdede4407c88bcda2afc8bbeae91ace
      size: 1617655
  compile@ddos-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/knn  --results_file
      ddos/reports/condense/knn.csv
    deps:
    - path: ddos/reports/condense/knn/
      hash: md5
      md5: 18b11d46fd07e34dad7540abc72d8b83.dir
      size: 5612497
      nfiles: 6108
    outs:
    - path: ddos/reports/condense/knn.csv
      hash: md5
      md5: 3a94d5640ae948e799f5e348affd8ee9
      size: 3129268
  compile@sms_spam-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/svc  --results_file
      sms_spam/reports/condense/svc.csv
    deps:
    - path: sms_spam/reports/condense/svc/
      hash: md5
      md5: fd7f8d975462fb720becc9d3d2cd9e5c.dir
      size: 2790761
      nfiles: 3065
    outs:
    - path: sms_spam/reports/condense/svc.csv
      hash: md5
      md5: f782069f1e30657943077f18e0229f17
      size: 1574629
  compile@kdd_nsl-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/knn  --results_file
      kdd_nsl/reports/condense/knn.csv
    deps:
    - path: kdd_nsl/reports/condense/knn/
      hash: md5
      md5: 3f8eb680f1f8960490e4581bfa16cfd2.dir
      size: 2869636
      nfiles: 3011
    outs:
    - path: kdd_nsl/reports/condense/knn.csv
      hash: md5
      md5: 29211ec6d9b2b1a5e9193eaabfff3488
      size: 1608857
  compile@truthseeker-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/logistic  --results_file
      truthseeker/reports/condense/logistic.csv
    deps:
    - path: truthseeker/reports/condense/logistic/
      hash: md5
      md5: 8bd6876fc856ea5bd1e95b54093aedb8.dir
      size: 2976098
      nfiles: 3011
    outs:
    - path: truthseeker/reports/condense/logistic.csv
      hash: md5
      md5: 5c01852f352ac96150fb36c2df9bcbbf
      size: 1648856
  compile@sms_spam-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/knn  --results_file
      sms_spam/reports/condense/knn.csv
    deps:
    - path: sms_spam/reports/condense/knn/
      hash: md5
      md5: 1b368af057a2a858b18ca74b1ba9f336.dir
      size: 2797813
      nfiles: 3016
    outs:
    - path: sms_spam/reports/condense/knn.csv
      hash: md5
      md5: c5ba2fd1f928dec2e287c053c44ed0b5
      size: 1552833
  compile@ddos-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/logistic  --results_file
      ddos/reports/condense/logistic.csv
    deps:
    - path: ddos/reports/condense/logistic/
      hash: md5
      md5: 7ce841278929a90690417685b7c7f143.dir
      size: 5929815
      nfiles: 5888
    outs:
    - path: ddos/reports/condense/logistic.csv
      hash: md5
      md5: b24764aed957fdf6d2ccb541ef490d37
      size: 3150984
  clean@sms_spam-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/svc.csv
      -o sms_spam/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/svc.csv
      hash: md5
      md5: f782069f1e30657943077f18e0229f17
      size: 1574629
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/svc.csv
      hash: md5
      md5: 4b13295237a1603355019ee1c2d42887
      size: 1222176
  clean@ddos-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/knn.csv -o
      ddos/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/knn.csv
      hash: md5
      md5: 3a94d5640ae948e799f5e348affd8ee9
      size: 3129268
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/knn.csv
      hash: md5
      md5: 1ee153e232bd181b8eae3dd68b4ec009
      size: 2418027
  clean@truthseeker-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/svc.csv
      -o truthseeker/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/svc.csv
      hash: md5
      md5: 4cdede4407c88bcda2afc8bbeae91ace
      size: 1617655
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/svc.csv
      hash: md5
      md5: a17c0cdb6a3fbfae5bd4fcfca1938a96
      size: 1257671
  clean@kdd_nsl-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/knn.csv
      -o kdd_nsl/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/knn.csv
      hash: md5
      md5: 29211ec6d9b2b1a5e9193eaabfff3488
      size: 1608857
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/knn.csv
      hash: md5
      md5: 23789b08b0fd1616555611d0e7971db9
      size: 1204868
  clean@kdd_nsl-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/svc.csv
      -o kdd_nsl/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/svc.csv
      hash: md5
      md5: da3da9364069ab309277a3ddc970f77d
      size: 3240799
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/svc.csv
      hash: md5
      md5: 8747871ca7abc0cb1c0d31e8d820d182
      size: 2512569
  clean@kdd_nsl-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/logistic.csv
      -o kdd_nsl/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/logistic.csv
      hash: md5
      md5: 4b91546f39a3097a8568c90d2e3ddd87
      size: 1643961
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/logistic.csv
      hash: md5
      md5: ad001459daa8dc818570974749f661d2
      size: 1174954
  clean@sms_spam-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/knn.csv
      -o sms_spam/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/knn.csv
      hash: md5
      md5: c5ba2fd1f928dec2e287c053c44ed0b5
      size: 1552833
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/knn.csv
      hash: md5
      md5: aab291fa1ff741983e7cc88067edda8e
      size: 1156386
  clean@sms_spam-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/logistic.csv
      -o sms_spam/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/logistic.csv
      hash: md5
      md5: a0fa06c80b37e446a0d01d894227fdf5
      size: 1605690
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/logistic.csv
      hash: md5
      md5: 6f209fdc864f17d784deb0f872142bc5
      size: 1203196
  clean@truthseeker-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/logistic.csv
      -o truthseeker/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/logistic.csv
      hash: md5
      md5: 5c01852f352ac96150fb36c2df9bcbbf
      size: 1648856
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/logistic.csv
      hash: md5
      md5: 9710addb440069a5ea884d90ed4c394a
      size: 1237939
  clean@truthseeker-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/knn.csv
      -o truthseeker/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/knn.csv
      hash: md5
      md5: b4ec50d98f613984be6261a059120255
      size: 1595839
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/knn.csv
      hash: md5
      md5: a0c8deb8fe7617477ec43fae2a851b4d
      size: 1191230
  clean@ddos-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/svc.csv -o
      ddos/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/svc.csv
      hash: md5
      md5: 2b2e966947db80caaea3d445003927ce
      size: 1580858
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/svc.csv
      hash: md5
      md5: a1e99fce84430014ccb657065a752e59
      size: 1238056
  clean@ddos-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/logistic.csv
      -o ddos/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/logistic.csv
      hash: md5
      md5: b24764aed957fdf6d2ccb541ef490d37
      size: 3150984
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/logistic.csv
      hash: md5
      md5: bfca6e865bca11a25fa1e42dfbdea0ad
      size: 2331762
  merge_condense@ddos:
    cmd: python merge.py --big_dir ddos/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      ddos/plots/ --output_file condensed_merged.csv
    deps:
    - path: ddos/plots/clean/condense/knn.csv
      hash: md5
      md5: 1ee153e232bd181b8eae3dd68b4ec009
      size: 2418027
    - path: ddos/plots/clean/condense/logistic.csv
      hash: md5
      md5: bfca6e865bca11a25fa1e42dfbdea0ad
      size: 2331762
    - path: ddos/plots/clean/condense/svc.csv
      hash: md5
      md5: a1e99fce84430014ccb657065a752e59
      size: 1238056
    outs:
    - path: ddos/plots/condensed_merged.csv
      hash: md5
      md5: df343f65be99173e907fc729ee3775d7
      size: 6185422
  merge_condense@kdd_nsl:
    cmd: python merge.py --big_dir kdd_nsl/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      kdd_nsl/plots/ --output_file condensed_merged.csv
    deps:
    - path: kdd_nsl/plots/clean/condense/knn.csv
      hash: md5
      md5: 23789b08b0fd1616555611d0e7971db9
      size: 1204868
    - path: kdd_nsl/plots/clean/condense/logistic.csv
      hash: md5
      md5: ad001459daa8dc818570974749f661d2
      size: 1174954
    - path: kdd_nsl/plots/clean/condense/svc.csv
      hash: md5
      md5: 8747871ca7abc0cb1c0d31e8d820d182
      size: 2512569
    outs:
    - path: kdd_nsl/plots/condensed_merged.csv
      hash: md5
      md5: eff71fc31dcce006f32a52431b295800
      size: 5047655
  merge_condense@sms_spam:
    cmd: python merge.py --big_dir sms_spam/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      sms_spam/plots/ --output_file condensed_merged.csv
    deps:
    - path: sms_spam/plots/clean/condense/knn.csv
      hash: md5
      md5: aab291fa1ff741983e7cc88067edda8e
      size: 1156386
    - path: sms_spam/plots/clean/condense/logistic.csv
      hash: md5
      md5: 6f209fdc864f17d784deb0f872142bc5
      size: 1203196
    - path: sms_spam/plots/clean/condense/svc.csv
      hash: md5
      md5: 4b13295237a1603355019ee1c2d42887
      size: 1222176
    outs:
    - path: sms_spam/plots/condensed_merged.csv
      hash: md5
      md5: 6ec12ab823fc26dfc49b4041eac3f31e
      size: 3700462
  merge_condense@truthseeker:
    cmd: python merge.py --big_dir truthseeker/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      truthseeker/plots/ --output_file condensed_merged.csv
    deps:
    - path: truthseeker/plots/clean/condense/knn.csv
      hash: md5
      md5: a0c8deb8fe7617477ec43fae2a851b4d
      size: 1191230
    - path: truthseeker/plots/clean/condense/logistic.csv
      hash: md5
      md5: 9710addb440069a5ea884d90ed4c394a
      size: 1237939
    - path: truthseeker/plots/clean/condense/svc.csv
      hash: md5
      md5: a17c0cdb6a3fbfae5bd4fcfca1938a96
      size: 1257671
    outs:
    - path: truthseeker/plots/condensed_merged.csv
      hash: md5
      md5: 738dc93bfff1b9c167949e722ee79665
      size: 3805499
  grid_search@300-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/300/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/300
      hash: md5
      md5: a4a0fd7ea7720fbc96b1206438fe2712.dir
      size: 1553431
      nfiles: 514
    - path: ddos/reports/gzip_knn/300/train/
      hash: md5
      md5: d030d7f5b45dfbf0309fee6493df528b.dir
      size: 1112786
      nfiles: 1022
  plot_condense@sms_spam:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: sms_spam/plots/condensed_merged.csv
      hash: md5
      md5: 6ec12ab823fc26dfc49b4041eac3f31e
      size: 3700462
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: sms_spam/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: b91d62604bc4eca1da8cd7d9e7c1c319
      size: 18158
    - path: sms_spam/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: d33142cbc5288beba6ef9ac3d28e404f
      size: 43922
    - path: sms_spam/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 524c4067f99c0c6d24ca907cda380431
      size: 40023
  plot_condense@ddos:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: ddos/plots/condensed_merged.csv
      hash: md5
      md5: df343f65be99173e907fc729ee3775d7
      size: 6185422
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: ddos/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 0e64274ba7447d169b9b7fef910bb4e4
      size: 46125
    - path: ddos/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: f8a83cf6cccb92814a44e1ad7d7f9301
      size: 60094
    - path: ddos/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 2e552ed77b8ba5700b5bfbcb1fb00677
      size: 51427
  plot_condense@kdd_nsl:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: kdd_nsl/plots/condensed_merged.csv
      hash: md5
      md5: eff71fc31dcce006f32a52431b295800
      size: 5047655
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: kdd_nsl/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: e459cde81391759d021dfb99692508fa
      size: 40354
    - path: kdd_nsl/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 16711a242196202803d0de6362ba68a0
      size: 53546
    - path: kdd_nsl/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: abf834909d63d7cc0b67100cd55db563
      size: 49165
  grid_search@300-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/300/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/300
      hash: md5
      md5: 38ac50d973afc2026ae6b5714bfc4048.dir
      size: 1658747
      nfiles: 514
    - path: ddos/reports/gzip_logistic/300/train/
      hash: md5
      md5: 79748d4125b570bfd7d688f05f37c87e.dir
      size: 873257
      nfiles: 611
  grid_search@300-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/300/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/300
      hash: md5
      md5: a08476ed2bdb4c4666383a19228bd261.dir
      size: 1585843
      nfiles: 514
    - path: ddos/reports/gzip_svc/300/train/
      hash: md5
      md5: f914a08ba59f4501c96b42973aa4a87b.dir
      size: 839350
      nfiles: 661
  plot_condense@truthseeker:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: truthseeker/plots/condensed_merged.csv
      hash: md5
      md5: 738dc93bfff1b9c167949e722ee79665
      size: 3805499
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: truthseeker/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 9f02f0c655f891028a58bb682ec0845f
      size: 18158
    - path: truthseeker/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 7d351f14ede44f25a095b5123935c936
      size: 45092
    - path: truthseeker/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 881af9b7d5d4c2820418d30b90c5000b
      size: 39796
  grid_search@500-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/500/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/500
      hash: md5
      md5: 3fd6ac1a706098dca5fc2b14d197e45c.dir
      size: 1684594
      nfiles: 514
    - path: ddos/reports/gzip_logistic/500/train/
      hash: md5
      md5: 7893687a203cd8da60df79034b110e86.dir
      size: 404909
      nfiles: 352
