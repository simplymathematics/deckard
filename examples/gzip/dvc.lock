schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    deps:
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    - path: raw_data/
      hash: md5
      md5: 33d46673e0631bef98be9e8991ed1ed1.dir
      size: 50328647
      nfiles: 8
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/default/predictions.json
      hash: md5
      md5: 986d2f0abe9b96253b196a222a550609
      size: 702
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
  test_each_method@knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=10  files.name=knn
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/knn
      hash: md5
      md5: f902bdd8882aa06bba0d1fef19c4a313.dir
      size: 11613
      nfiles: 4
    - path: kdd_nsl/reports/train/knn/score_dict.json
      hash: md5
      md5: 4e7f0750779df5202e5dec6228f94f99
      size: 490
  test_each_method@knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=10  files.name=knn
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/knn
      hash: md5
      md5: 5a52da2681ff444c53a1623722c2d431.dir
      size: 11642
      nfiles: 4
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: f09f746efa5c7a56f4dd1a3e20a7ab6b
      size: 485
  test_each_method@svc-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=10  files.name=svc
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/svc
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/svc
      hash: md5
      md5: 433b30d37ba64e71527ac2d837b44fa2.dir
      size: 11612
      nfiles: 4
    - path: kdd_nsl/reports/train/svc/score_dict.json
      hash: md5
      md5: f41538adb6ffa9182ea126c85c353abf
      size: 489
  test_each_method@svc-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=10  files.name=svc
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/svc
      hash: md5
      md5: bc37655235ef0d2919a62c85456d379c.dir
      size: 11645
      nfiles: 4
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: 97f1fed3ee2887773ca9a50eeeb5b1ed
      size: 488
  test_each_method@medoid-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=10  files.name=medoid
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/medoid
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/medoid
      hash: md5
      md5: 5b972c1f6a8c4ebff94a088e2be12b28.dir
      size: 11661
      nfiles: 4
    - path: kdd_nsl/reports/train/medoid/score_dict.json
      hash: md5
      md5: 10a0913632dea0d6717263ba1854b1e2
      size: 484
  test_each_method@medoid-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=10  files.name=medoid
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=medoid
      hydra.run.dir=truthseeker/logs/method/medoid ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/medoid
      hash: md5
      md5: 7b6fef8487e5b8dec0f76f4b4fc59ccb.dir
      size: 10226
      nfiles: 4
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: 8cebb3ee0098d2ee2bb4130e346e8e0f
      size: 282
  test_each_method@sum-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=10  files.name=sum
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/sum
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/sum
      hash: md5
      md5: 41cd7632a1d85e7380d14b0e8eccc819.dir
      size: 11607
      nfiles: 4
    - path: kdd_nsl/reports/train/sum/score_dict.json
      hash: md5
      md5: 2a97e468ea2e9071e1f7d5bdb1e7495b
      size: 484
  test_each_method@sum-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=10  files.name=sum
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=sum
      hydra.run.dir=truthseeker/logs/method/sum ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/sum
      hash: md5
      md5: e7f9741f777d98f3d3416264b9f3e6b2.dir
      size: 10164
      nfiles: 4
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: d49a3cbdeb348bbf9ad3b59e9e8e0e32
      size: 283
  test_each_method@random-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=10  files.name=random
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/random
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/random
      hash: md5
      md5: 723e8c93428a09edb21943a20fca5c3c.dir
      size: 11639
      nfiles: 4
    - path: kdd_nsl/reports/train/random/score_dict.json
      hash: md5
      md5: ed402e68904e8888b8ba6b0bebf6fa05
      size: 488
  test_each_method@random-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=10  files.name=random
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/random ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/random
      hash: md5
      md5: f785fe50b4007a169c37e6e9cb856268.dir
      size: 11670
      nfiles: 4
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 8bfb4b2efa55e9944cec7331401762f9
      size: 485
  prepare_distance_matrices@0-10-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-10 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=10 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 3332d80113acf55f8e69e46aea82a1cc
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/0-10/score_dict.json
      hash: md5
      md5: cae521db2dcda14d0d3ed880c26adf62
      size: 233
  prepare_distance_matrices@0-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
  data:
    cmd: python data_prep.py
    deps:
    - path: data_prep.py
      hash: md5
      md5: 18244c921ed2d7cbf25b8362b3ca33aa
      size: 5146
    outs:
    - path: raw_data/
      hash: md5
      md5: 33d46673e0631bef98be9e8991ed1ed1.dir
      size: 50328647
      nfiles: 8
  test_symmetric_methods@true-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_knn model.init.symmetric=true hydra.run.dir=kdd_nsl/logs/symmetric/true
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: bb10a010ac3f8790cdbe4310288efc63
      size: 432
  test_symmetric_methods@true-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_knn model.init.symmetric=true hydra.run.dir=truthseeker/logs/symmetric/true
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: f71a2727e708fdfb7867a6983f3aa8cf
      size: 223
    - path: truthseeker/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 6d7a4eb01733e4e2fda1c40b5562646c
      size: 434
  test_symmetric_methods@true-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_knn model.init.symmetric=true hydra.run.dir=sms_spam/logs/symmetric/true
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: sms_spam/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 0b8d690ffca7173942d490a2f0cbeec4
      size: 432
  test_symmetric_methods@true-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_knn model.init.symmetric=true hydra.run.dir=ddos/logs/symmetric/true
      model.init.distance_matrix=ddos/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: ddos/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 2c12176f8bf7355f284e059b2527cf44
      size: 418
  test_symmetric_methods@false-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_knn model.init.symmetric=false hydra.run.dir=kdd_nsl/logs/symmetric/false
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/symmetric_false.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: 9a9fcf9ba5dbc34eb2ca1f203088fc47
      size: 740
    - path: kdd_nsl/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 8ae56e642565330a37e731472a6c2d76
      size: 429
  test_symmetric_methods@false-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_knn model.init.symmetric=false hydra.run.dir=truthseeker/logs/symmetric/false
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: b02cc76ddfb10d1e0e63e0f6e05cdaae
      size: 1791
    - path: truthseeker/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 4ef36cb0b198d778dc8e0e6ff282d778
      size: 433
  test_symmetric_methods@false-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_knn model.init.symmetric=false hydra.run.dir=sms_spam/logs/symmetric/false
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: ac71e5af3607731b783a490caf81c37f
      size: 694
    - path: sms_spam/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 66d92f0ed630b08fbddb1a9c07f13981
      size: 432
  test_symmetric_methods@false-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_knn model.init.symmetric=false hydra.run.dir=ddos/logs/symmetric/false
      model.init.distance_matrix=ddos/model/gzip_knn/None/symmetric_false.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: 0d3f08d9c6cb8ddc6d3e68f8208c9bc5
      size: 821
    - path: ddos/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: ba81be29d56943d6d573597c93ba8081
      size: 412
  test_each_compressor@gzip-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/gzip
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip/score_dict.json
      hash: md5
      md5: b3f76b5e7fe68821d9336c4968888b08
      size: 431
  test_each_compressor@gzip-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/gzip.npz model.init.compressor=gzip  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/gzip ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip/score_dict.json
      hash: md5
      md5: df9b8a302dfb3b85b5c3c7623d86383e
      size: 434
  test_each_compressor@gzip-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/gzip.npz model.init.compressor=gzip  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/gzip ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip/score_dict.json
      hash: md5
      md5: 39a6710366ed557259ef981fc0b45a6a
      size: 432
  test_each_compressor@gzip-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10 hydra.run.dir=ddos/logs/compressor/gzip
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip/score_dict.json
      hash: md5
      md5: 1919cb29d6196b8dd14c01458e341a6b
      size: 414
  test_each_compressor@zstd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/zstd
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/zstd/score_dict.json
      hash: md5
      md5: 868509c201cbb0093818357427896da7
      size: 416
  test_each_compressor@zstd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/zstd.npz model.init.compressor=zstd  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/zstd ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/zstd/score_dict.json
      hash: md5
      md5: 89546ca3a3510fd73671341863c69cb9
      size: 434
  test_each_compressor@zstd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/zstd.npz model.init.compressor=zstd  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/zstd ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/zstd/score_dict.json
      hash: md5
      md5: e5a10b0013b032b22dd6cc596a7810bb
      size: 429
  test_each_compressor@zstd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10 hydra.run.dir=ddos/logs/compressor/zstd
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/zstd/score_dict.json
      hash: md5
      md5: 898feb287504053c9de9c1a809733c4b
      size: 432
  test_each_compressor@pkl-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/pkl
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/pkl/score_dict.json
      hash: md5
      md5: 3e01c227095014ab9f4665ea98e7f3b5
      size: 430
  test_each_compressor@pkl-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/pkl.npz model.init.compressor=pkl  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/pkl ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/pkl/score_dict.json
      hash: md5
      md5: 85d4598fcbe6077a465a9edeadd3843a
      size: 430
  test_each_compressor@pkl-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/pkl.npz model.init.compressor=pkl  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/pkl ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/pkl/score_dict.json
      hash: md5
      md5: a4667414e7721ee7ed489df1e412e0b0
      size: 431
  test_each_compressor@pkl-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10 hydra.run.dir=ddos/logs/compressor/pkl
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/pkl/score_dict.json
      hash: md5
      md5: 340261dd836239b846699c4c687b3042
      size: 432
  test_each_compressor@bz2-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/bz2
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/bz2/score_dict.json
      hash: md5
      md5: 05fd4b45d252c648d4afb4ba3ffc05e4
      size: 430
  test_each_compressor@bz2-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/bz2.npz model.init.compressor=bz2  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/bz2 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/bz2/score_dict.json
      hash: md5
      md5: 1b3094ea4075cb1b5b8cd3f74bf0c3dc
      size: 432
  test_each_compressor@bz2-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/bz2.npz model.init.compressor=bz2  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/bz2 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/bz2/score_dict.json
      hash: md5
      md5: 45303b7d052fb91e65c9f3ad97999b6a
      size: 431
  test_each_compressor@bz2-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10 hydra.run.dir=ddos/logs/compressor/bz2
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/bz2/score_dict.json
      hash: md5
      md5: fdfa470b2053f561dea2e047423b54cd
      size: 431
  test_each_precompute@True-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/True.npz +model.init.precompute=True  model.init.m=10  hydra.run.dir=kdd_nsl/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: f5c9a9ce41a0680f1e18874d6f21bd25
      size: 433
  test_each_precompute@True-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_knn/None/True.npz
      +model.init.precompute=True  model.init.m=10  hydra.run.dir=truthseeker/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 76dcdbf7dc1fb63ce7b978c2f6bef8a2
      size: 435
  test_each_precompute@True-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_knn/None/True.npz
      +model.init.precompute=True  model.init.m=10  hydra.run.dir=sms_spam/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: fe9a23520513840fe4a90fb8413e62da
      size: 432
  test_each_precompute@True-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_knn/None/True.npz +model.init.precompute=True  model.init.m=10  hydra.run.dir=ddos/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 0d72c99dc99df13629a383ca9745712e
      size: 429
  test_each_precompute@False-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/False.npz +model.init.precompute=False  model.init.m=10  hydra.run.dir=kdd_nsl/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: d225ea006c02f56f552431e223ef6576
      size: 429
  test_each_precompute@False-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_knn/None/False.npz
      +model.init.precompute=False  model.init.m=10  hydra.run.dir=truthseeker/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: e8094fb43b55432d298346a0a291ac71
      size: 431
  test_each_precompute@False-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_knn/None/False.npz
      +model.init.precompute=False  model.init.m=10  hydra.run.dir=sms_spam/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 0f3b13aba3cc817f2327769f36b54939
      size: 432
  test_each_precompute@False-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_knn/None/False.npz +model.init.precompute=False  model.init.m=10  hydra.run.dir=ddos/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 9cc47f921a908ad81e486980d134f453
      size: 418
  test_each_metric@levenshtein-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=kdd_nsl/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 4f517489b794c13bbbbb477bd7b14ea8
      size: 248
  test_each_metric@levenshtein-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/levenshtein.npz hydra.sweeper.n_jobs=1
      hydra.run.dir=truthseeker/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 2f0fa43167cde43c2d8c901ee6bc360d
      size: 250
  test_each_metric@levenshtein-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/levenshtein.npz hydra.sweeper.n_jobs=1
      hydra.run.dir=sms_spam/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: bb8456e5a2457e841619d5750922bd0c
      size: 246
  test_each_metric@levenshtein-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=ddos/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 1956a0651292bf6919a103e46c0c5906
      size: 248
  test_each_metric@ratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/ratio.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=kdd_nsl/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ratio/score_dict.json
      hash: md5
      md5: 841058c500666af10a3a84fd7769e53d
      size: 244
  test_each_metric@ratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/ratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ratio/score_dict.json
      hash: md5
      md5: 5cbc24c928a073a9459428d4e1984ba1
      size: 426
  test_each_metric@ratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/ratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ratio/score_dict.json
      hash: md5
      md5: b8ea7bf8de9af2250f1a2c84695be1f9
      size: 425
  test_each_metric@ratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/ratio.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ratio/score_dict.json
      hash: md5
      md5: 5f9750a5729db8f4912f50a8610fc48c
      size: 429
  test_each_metric@hamming-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/hamming.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/hamming/score_dict.json
      hash: md5
      md5: ed699605a76c4116a461994f139da237
      size: 429
  test_each_metric@hamming-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/hamming.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/hamming/score_dict.json
      hash: md5
      md5: 8a3f87734f208a61bc27114729fd4fd6
      size: 432
  test_each_metric@hamming-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/hamming.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/hamming/score_dict.json
      hash: md5
      md5: 0c0988090568dc526d0137ff7e38ca6a
      size: 428
  test_each_metric@hamming-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/hamming.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/hamming/score_dict.json
      hash: md5
      md5: 949f7ea27f2521fbbb2b05ec3a111346
      size: 428
  test_each_metric@jaro-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/jaro.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro/score_dict.json
      hash: md5
      md5: 3bd4e5c89097070d439c3f13359ff369
      size: 428
  test_each_metric@jaro-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/jaro.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro/score_dict.json
      hash: md5
      md5: b86d70f18ea7ee85132f4d8407058d60
      size: 429
  test_each_metric@jaro-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/jaro.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro/score_dict.json
      hash: md5
      md5: b7550248d10852d10a16610f707ea50f
      size: 429
  test_each_metric@jaro-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/jaro.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro/score_dict.json
      hash: md5
      md5: e7987cb2d248f7eaa20a842bbcacc442
      size: 430
  test_each_metric@jaro_winkler-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: a44e09663d05f8330352712ccfd72f17
      size: 428
  test_each_metric@jaro_winkler-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/jaro_winkler.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 2a80298804f36bc7af477e11ff9f6679
      size: 428
  test_each_metric@jaro_winkler-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/jaro_winkler.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 8b7d0f92e14d74042fb8cd907e3a8274
      size: 430
  test_each_metric@jaro_winkler-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: aa4130c79130ddbaaebaa35a1cae7d91
      size: 426
  test_each_metric@seqratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/seqratio.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 9075115a02136aaa59bd87074589ce42
      size: 430
  test_each_metric@seqratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/seqratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/seqratio/score_dict.json
      hash: md5
      md5: ac2bdff9261ce4c9e511294dd69b19f8
      size: 434
  test_each_metric@seqratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/seqratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
  test_each_method@ddos-random:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=3
      data.sample.train_size=100 files.name=random files.directory=ddos data=ddos
      dataset=ddos model_name=random hydra.run.dir=ddos/logs/method/random ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/random
      hash: md5
      md5: 3bfcc27fd44bf9333be7081f3fceb94c.dir
      size: 8340
      nfiles: 4
    - path: ddos/reports/train/random/score_dict.json
      hash: md5
      md5: 218449c8e2b7425707008d01e751eee4
      size: 281
  test_each_method@ddos-medoid:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=3
      data.sample.train_size=100 files.name=medoid files.directory=ddos data=ddos
      dataset=ddos model_name=medoid hydra.run.dir=ddos/logs/method/medoid ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/medoid
      hash: md5
      md5: cab03f71d3883157c103a207662f0f01.dir
      size: 8377
      nfiles: 4
    - path: ddos/reports/train/medoid/score_dict.json
      hash: md5
      md5: eb281dc186936044bcf39edf3b5c2a97
      size: 283
  test_each_method@ddos-sum:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=3
      data.sample.train_size=100 files.name=sum files.directory=ddos data=ddos dataset=ddos
      model_name=sum hydra.run.dir=ddos/logs/method/sum ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/sum
      hash: md5
      md5: 1acd35c26f1f01c1d97695be4df4be9f.dir
      size: 8320
      nfiles: 4
    - path: ddos/reports/train/sum/score_dict.json
      hash: md5
      md5: d8ee90602dcf3e5e3d1541fd051d8c25
      size: 283
  test_each_method@ddos-svc:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=3
      data.sample.train_size=100 files.name=svc files.directory=ddos data=ddos dataset=ddos
      model_name=svc hydra.run.dir=ddos/logs/method/svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/svc
      hash: md5
      md5: ff1e2d4db8fbd074fae27c28e6d7efab.dir
      size: 8317
      nfiles: 4
    - path: ddos/reports/train/svc/score_dict.json
      hash: md5
      md5: 02086eaaafb2de9549a587e0cac8d44f
      size: 280
  test_each_method@ddos-condensed:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=condensed  model.init.m=1
      files.name=condensed files.directory=ddos data=ddos dataset=ddos model_name=condensed
      hydra.run.dir=ddos/logs/method/condensed ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/condensed
      hash: md5
      md5: 5dfc9ebfe1c6f3e496814c86a05a5329.dir
      size: 10117
      nfiles: 4
    - path: ddos/reports/train/condensed/score_dict.json
      hash: md5
      md5: 56bcddf54558d9cdd1a7587878aceffa
      size: 284
  test_each_method@ddos-hardness:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=hardness  model.init.m=3
      data.sample.train_size=100 files.name=hardness files.directory=ddos data=ddos
      dataset=ddos model_name=hardness hydra.run.dir=ddos/logs/method/hardness ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/hardness
      hash: md5
      md5: 92679e897538c5e98e89f11ca456f483.dir
      size: 8413
      nfiles: 4
    - path: ddos/reports/train/hardness/score_dict.json
      hash: md5
      md5: 24a77200255cec8b4ec9f1877188fdda
      size: 281
  test_each_method@ddos-nearmiss:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=nearmiss  model.init.m=3
      data.sample.train_size=100 files.name=nearmiss files.directory=ddos data=ddos
      dataset=ddos model_name=nearmiss hydra.run.dir=ddos/logs/method/nearmiss ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/nearmiss
      hash: md5
      md5: 84fc6455a5c576fa04c36919c33ae8fd.dir
      size: 8416
      nfiles: 4
    - path: ddos/reports/train/nearmiss/score_dict.json
      hash: md5
      md5: b4602181657a738a97631883018e221a
      size: 284
  test_each_method@truthseeker-svc:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=3
      data.sample.train_size=100 files.name=svc files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=svc hydra.run.dir=truthseeker/logs/method/svc
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/svc
      hash: md5
      md5: 7f9ad95f5b5a7d8ea8a41d09560bca7e.dir
      size: 10252
      nfiles: 4
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: dca27d752d8d9db2b52a61d9e0d9bebf
      size: 283
  test_each_method@truthseeker-medoid:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=3
      data.sample.train_size=100 files.name=medoid files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=medoid hydra.run.dir=truthseeker/logs/method/medoid
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/medoid
      hash: md5
      md5: 57b1e2e154ae8653331898992d0d7f7c.dir
      size: 10316
      nfiles: 4
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: a728020aeb632257e52cc9b13337870e
      size: 284
  test_each_method@truthseeker-sum:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=3
      data.sample.train_size=100 files.name=sum files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=sum hydra.run.dir=truthseeker/logs/method/sum
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/sum
      hash: md5
      md5: b8934f0660e9e6043e5a7117d2e3d462.dir
      size: 10252
      nfiles: 4
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: 0a4117f35aab6ec4b41ac526f8715aa2
      size: 283
  test_each_method@truthseeker-random:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=3
      data.sample.train_size=100 files.name=random files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=random hydra.run.dir=truthseeker/logs/method/random
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/random
      hash: md5
      md5: a77f4e67f85e529063b18617cda5525a.dir
      size: 10289
      nfiles: 4
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 08f3cc499d61caaa4ab912af1a2ff558
      size: 283
  test_each_method@truthseeker-nearmiss:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=nearmiss  model.init.m=3
      data.sample.train_size=100 files.name=nearmiss files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=nearmiss hydra.run.dir=truthseeker/logs/method/nearmiss
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/nearmiss
      hash: md5
      md5: 6ea3f0a574d7abd052e3ee5466356e13.dir
      size: 10359
      nfiles: 4
    - path: truthseeker/reports/train/nearmiss/score_dict.json
      hash: md5
      md5: f03918d65cac7f21e210a14be8ee1373
      size: 285
  test_each_method@truthseeker-hardness:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=hardness  model.init.m=3
      data.sample.train_size=100 files.name=hardness files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=hardness hydra.run.dir=truthseeker/logs/method/hardness
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/hardness
      hash: md5
      md5: c5ea09925ae34a0fee42f1ec06d88090.dir
      size: 10355
      nfiles: 4
    - path: truthseeker/reports/train/hardness/score_dict.json
      hash: md5
      md5: 87bdbb0cafd4462b87035af79efc81c5
      size: 281
  test_each_method@truthseeker-knn:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=3
      data.sample.train_size=100 files.name=knn files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=knn hydra.run.dir=truthseeker/logs/method/knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/knn
      hash: md5
      md5: 5c5fe8f17151816b01d863f51db3d01a.dir
      size: 10254
      nfiles: 4
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: 4157a5deabda43d207a543b9f038b5af
      size: 285
  test_each_method@ddos-knn:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=3
      data.sample.train_size=100 files.name=knn files.directory=ddos data=ddos dataset=ddos
      model_name=knn hydra.run.dir=ddos/logs/method/knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/knn
      hash: md5
      md5: 8d73125fea91a47efc49ba2b4a68e1fe.dir
      size: 8319
      nfiles: 4
    - path: ddos/reports/train/knn/score_dict.json
      hash: md5
      md5: fb77e1c8e53bac0e077d2140f1abc6d6
      size: 282
  condense@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_logistic model=gzip_logistic hydra.sweeper.study_name=condense_gzip_logistic_sms_spam
      hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32 hydra.sweep.dir=sms_spam/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/study.csv
      ++data.sample.train_size='int(interval(30, 1000))' ++data.sample.random_state='int(interval(10000,
      20000))' ++data.sample.stratify=True model.init.m='tag(log, interval(.1, 1))'
      +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn files.directory=sms_spam
      files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=32 --config-name
      gzip_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: 026fca7fe5d7bb75c4a3ae245f86a2c2
      size: 332
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: int(interval(20, 1000))
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.1, 1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_logistic/
      hash: md5
      md5: 9496098bd1497b6c46124e40e665ee74.dir
      size: 14280
      nfiles: 5
    - path: sms_spam/reports/condense/gzip_logistic/
      hash: md5
      md5: c7e2a43c1dc170c3d593825f57ad0e9b.dir
      size: 2707
      nfiles: 3
  condense@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_svc model=gzip_svc hydra.sweeper.study_name=condense_gzip_svc_truthseeker
      hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32 hydra.sweep.dir=truthseeker/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/study.csv ++data.sample.train_size='int(interval(30,
      1000))' ++data.sample.random_state='int(interval(10000, 20000))' ++data.sample.stratify=True
      model.init.m='tag(log, interval(.1, 1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=32
      --config-name gzip_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_truthseeker.yaml
      hash: md5
      md5: 97d9d5857744b1cc077513ac5a659f62
      size: 302
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: int(interval(20, 1000))
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.1, 1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_svc/
      hash: md5
      md5: bd7cbae34fd6feecf60a49cb537b0f80.dir
      size: 13751
      nfiles: 5
    - path: truthseeker/reports/condense/gzip_svc/
      hash: md5
      md5: a24584cdc3464b86b6ff88b90dc62e5e.dir
      size: 2701
      nfiles: 3
  condense@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_svc model=best_gzip_svc_sms_spam hydra.sweeper.study_name=condense_gzip_svc_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=sms_spam files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: 771cd8e3b1368f0fbb30e518002db80f
      size: 317
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_svc/
      hash: md5
      md5: c6ef4ecf2bec03894b2f2018cffc0888.dir
      size: 1597147
      nfiles: 513
    - path: sms_spam/reports/condense/gzip_svc/
      hash: md5
      md5: aff4ca5c41e7043fe0d36b4a669ad6a7.dir
      size: 344414
      nfiles: 381
  condense@ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_svc model=best_gzip_svc_ddos hydra.sweeper.study_name=condense_gzip_svc_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=16
      ++raise_exception=True --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: f2ec5b2ff8103b93ca61a5b86888a3e6
      size: 305
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_svc/
      hash: md5
      md5: 98f11cc76f9f370871bfb325ec4186e4.dir
      size: 1589126
      nfiles: 513
    - path: ddos/reports/condense/gzip_svc/
      hash: md5
      md5: 87ca8778bbdb8363a1e237019c87ebf5.dir
      size: 345583
      nfiles: 384
  condense@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_sms_spam hydra.sweeper.study_name=condense_gzip_knn_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=sms_spam files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 430e2be20ddaa39808a6739627a98d77
      size: 259
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_knn/
      hash: md5
      md5: a45625dcc1d1cc1f1e20d19440e1cdf1.dir
      size: 1559584
      nfiles: 513
    - path: sms_spam/reports/condense/gzip_knn/
      hash: md5
      md5: 0ac87faa8d16d77b4e7d5a96cfdde177.dir
      size: 335094
      nfiles: 384
  compile@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_knn  --results_file
      sms_spam/reports/gzip_knn.csv
    deps:
    - path: sms_spam/reports/gzip_knn/
      hash: md5
      md5: 89e3b68400367dee648064784adb9796.dir
      size: 1499301
      nfiles: 1337
    outs:
    - path: sms_spam/reports/gzip_knn.csv
      hash: md5
      md5: ee7ee47f5ee27acca9e58b9249ecb954
      size: 695526
  compile@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_knn  --results_file
      truthseeker/reports/gzip_knn.csv
    deps:
    - path: truthseeker/reports/gzip_knn/
      hash: md5
      md5: e5702237f62021b85240717035b53d81.dir
      size: 1537318
      nfiles: 1325
    outs:
    - path: truthseeker/reports/gzip_knn.csv
      hash: md5
      md5: 183afe36078f60e3e478f3813b1b52a7
      size: 711959
  compile@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_knn  --results_file
      kdd_nsl/reports/gzip_knn.csv
    deps:
    - path: kdd_nsl/reports/gzip_knn/
      hash: md5
      md5: 4dfe630ff7f6f036220f2b9aa5b3c6b1.dir
      size: 4225577
      nfiles: 3608
    outs:
    - path: kdd_nsl/reports/gzip_knn.csv
      hash: md5
      md5: 17f27e4404093a5b50a74ca0af24e4db
      size: 1964725
  compile@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_svc  --results_file
      truthseeker/reports/gzip_svc.csv
    deps:
    - path: truthseeker/reports/gzip_svc/
      hash: md5
      md5: e6e273bb143c7a8949d5be4acca87eb9.dir
      size: 1536370
      nfiles: 1725
    outs:
    - path: truthseeker/reports/gzip_svc.csv
      hash: md5
      md5: 746aae81f4af3c8ce4c8c7e3c3e866b1
      size: 870818
  compile@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_logistic  --results_file
      truthseeker/reports/gzip_logistic.csv
    deps:
    - path: truthseeker/reports/gzip_logistic/
      hash: md5
      md5: 5074027dccab644424973514ae7c8922.dir
      size: 2225784
      nfiles: 1473
    outs:
    - path: truthseeker/reports/gzip_logistic.csv
      hash: md5
      md5: ed858c429ea35f3dac4eca9c52e036ce
      size: 786129
  compile@ddos-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_logistic  --results_file
      ddos/reports/gzip_logistic.csv
    deps:
    - path: ddos/reports/gzip_logistic/
      hash: md5
      md5: 6ce8a2aa8cc08ccde4467403dec1a124.dir
      size: 6278656
      nfiles: 4845
    outs:
    - path: ddos/reports/gzip_logistic.csv
      hash: md5
      md5: 7ff452295887d9c84250c7375b7ea58a
      size: 2606734
  compile@ddos-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_knn  --results_file
      ddos/reports/gzip_knn.csv
    deps:
    - path: ddos/reports/gzip_knn/
      hash: md5
      md5: ce89d46c7a34959f9d39a3d1e6ad8911.dir
      size: 5724814
      nfiles: 5690
    outs:
    - path: ddos/reports/gzip_knn.csv
      hash: md5
      md5: fe28ae14c5cc37ee8eb5e705c3610da8
      size: 2899113
  compile@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_logistic  --results_file
      kdd_nsl/reports/gzip_logistic.csv
    deps:
    - path: kdd_nsl/reports/gzip_logistic/
      hash: md5
      md5: bca1b51ebae4e3ef166f9424a0f8c1ff.dir
      size: 4923952
      nfiles: 3945
    outs:
    - path: kdd_nsl/reports/gzip_logistic.csv
      hash: md5
      md5: 07859f070e6b9246456e860d63ab4438
      size: 2149350
  compile@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_svc  --results_file
      kdd_nsl/reports/gzip_svc.csv
    deps:
    - path: kdd_nsl/reports/gzip_svc/
      hash: md5
      md5: 907ec439b02a0d2b3ba36d54e250ff89.dir
      size: 4798455
      nfiles: 4393
    outs:
    - path: kdd_nsl/reports/gzip_svc.csv
      hash: md5
      md5: b25b5925936e935b62cdc6bd5b96d8d3
      size: 2257942
  compile@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_logistic  --results_file
      sms_spam/reports/gzip_logistic.csv
    deps:
    - path: sms_spam/reports/gzip_logistic/
      hash: md5
      md5: c70a60ca7e7e433d1cbd21bfddd26320.dir
      size: 2212768
      nfiles: 1438
    outs:
    - path: sms_spam/reports/gzip_logistic.csv
      hash: md5
      md5: 34643e6fbb37caef6b6f9054cb1b5203
      size: 754980
  compile@ddos-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_svc  --results_file
      ddos/reports/gzip_svc.csv
    deps:
    - path: ddos/reports/gzip_svc/
      hash: md5
      md5: 3b3fdb3e3d2321e8ee5dc36311626231.dir
      size: 6101649
      nfiles: 5283
    outs:
    - path: ddos/reports/gzip_svc.csv
      hash: md5
      md5: 7bd491b47bf7d5f373cb825e9e3d0c4c
      size: 2689051
  compile@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_svc  --results_file
      sms_spam/reports/gzip_svc.csv
    deps:
    - path: sms_spam/reports/gzip_svc/
      hash: md5
      md5: 52af2b025a2aafa3e4a78db0bf221f59.dir
      size: 2173475
      nfiles: 1536
    outs:
    - path: sms_spam/reports/gzip_svc.csv
      hash: md5
      md5: 12c2eec80495a5fb326dbed7c4cfe382
      size: 758618
  clean@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_svc.csv
      -o truthseeker/plots/clean/gzip_svc.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_svc.csv
      hash: md5
      md5: 746aae81f4af3c8ce4c8c7e3c3e866b1
      size: 870818
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_svc.csv
      hash: md5
      md5: cdb96b7ba00dc0bf6b4c8db38311447b
      size: 679004
  clean@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_svc.csv -o kdd_nsl/plots/clean/gzip_svc.csv
      -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_svc.csv
      hash: md5
      md5: b25b5925936e935b62cdc6bd5b96d8d3
      size: 2257942
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_svc.csv
      hash: md5
      md5: a359fb46b83265dec352e0af17f19cb2
      size: 1771361
  clean@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_knn.csv -o kdd_nsl/plots/clean/gzip_knn.csv
      -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_knn.csv
      hash: md5
      md5: 17f27e4404093a5b50a74ca0af24e4db
      size: 1964725
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_knn.csv
      hash: md5
      md5: 686b0f04494630491244a6ead99949b7
      size: 996268
  clean@ddos-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_knn.csv -o ddos/plots/clean/gzip_knn.csv
      -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_knn.csv
      hash: md5
      md5: fe28ae14c5cc37ee8eb5e705c3610da8
      size: 2899113
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_knn.csv
      hash: md5
      md5: ad6773d0af82535d3c525f8bf405bbfe
      size: 1919757
  clean@ddos-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_svc.csv -o ddos/plots/clean/gzip_svc.csv
      -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_svc.csv
      hash: md5
      md5: 7bd491b47bf7d5f373cb825e9e3d0c4c
      size: 2689051
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_svc.csv
      hash: md5
      md5: 45515bad8f1a4167a7a64d0a3d62464e
      size: 1842449
  clean@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_logistic.csv
      -o kdd_nsl/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_logistic.csv
      hash: md5
      md5: 07859f070e6b9246456e860d63ab4438
      size: 2149350
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 82d8bddbe4db8eb6835d00931af7fc12
      size: 1456814
  clean@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_knn.csv
      -o truthseeker/plots/clean/gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_knn.csv
      hash: md5
      md5: 183afe36078f60e3e478f3813b1b52a7
      size: 711959
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_knn.csv
      hash: md5
      md5: dbbbb4c6ab13f540b1b4d9ee23d4a91a
      size: 354842
  clean@ddos-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_logistic.csv -o
      ddos/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_logistic.csv
      hash: md5
      md5: 7ff452295887d9c84250c7375b7ea58a
      size: 2606734
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_logistic.csv
      hash: md5
      md5: a7d5cf7362711724ae19bba3becf66d2
      size: 1523208
  clean@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_knn.csv -o
      sms_spam/plots/clean/gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_knn.csv
      hash: md5
      md5: ee7ee47f5ee27acca9e58b9249ecb954
      size: 695526
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_knn.csv
      hash: md5
      md5: 020bbec4f2594935bd33efdcdf90eba7
      size: 358497
  clean@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_logistic.csv
      -o sms_spam/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_logistic.csv
      hash: md5
      md5: 34643e6fbb37caef6b6f9054cb1b5203
      size: 754980
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_logistic.csv
      hash: md5
      md5: d9a1be37cfb498a7d87c116db6f553e2
      size: 497702
  clean@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_svc.csv -o
      sms_spam/plots/clean/gzip_svc.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_svc.csv
      hash: md5
      md5: 12c2eec80495a5fb326dbed7c4cfe382
      size: 758618
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_svc.csv
      hash: md5
      md5: 4455964d2014f4705b4ea3191cef40b2
      size: 588874
  clean@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_logistic.csv
      -o truthseeker/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_logistic.csv
      hash: md5
      md5: 276fcd9d025d60418d6a92db6bee859e
      size: 748894
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 82450f3b94f517f586b35ed85b494add
      size: 417258
  copy@sms_spam:
    cmd: 'rm -rf ~/Gzip-KNN/figs/sms_spam/ && mkdir -p ~/Gzip-KNN/figs/sms_spam/ &&
      cp -r sms_spam/plots/* ~/Gzip-KNN/figs/sms_spam/ '
    deps:
    - path: sms_spam/plots/
      hash: md5
      md5: b4562b1ad06e680bf0247d4e8dab85c1.dir
      size: 10160120
      nfiles: 19
  copy@truthseeker:
    cmd: 'rm -rf ~/Gzip-KNN/figs/truthseeker/ && mkdir -p ~/Gzip-KNN/figs/truthseeker/
      && cp -r truthseeker/plots/* ~/Gzip-KNN/figs/truthseeker/ '
    deps:
    - path: truthseeker/plots/
      hash: md5
      md5: 47a062972487c796e962fa241d4bf108.dir
      size: 8761443
      nfiles: 18
  copy@kdd_nsl:
    cmd: 'rm -rf ~/Gzip-KNN/figs/kdd_nsl/ && mkdir -p ~/Gzip-KNN/figs/kdd_nsl/ &&
      cp -r kdd_nsl/plots/* ~/Gzip-KNN/figs/kdd_nsl/ '
    deps:
    - path: kdd_nsl/plots/
      hash: md5
      md5: 526bfd7a3ffd1b1cee332632d79a96f8.dir
      size: 13281984
      nfiles: 18
  copy@ddos:
    cmd: 'rm -rf ~/Gzip-KNN/figs/ddos/ && mkdir -p ~/Gzip-KNN/figs/ddos/ && cp -r
      ddos/plots/* ~/Gzip-KNN/figs/ddos/ '
    deps:
    - path: ddos/plots/
      hash: md5
      md5: 22ac4455d4f24b7a0624f5d670f81e24.dir
      size: 15551940
      nfiles: 19
  condense@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_truthseeker
      hydra.sweeper.study_name=condense_gzip_knn_truthseeker hydra.sweeper.n_trials=128
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/gzip_knn/ hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/study.csv
      model.init.m='tag(log, interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_truthseeker.yaml
      hash: md5
      md5: 79baf4709c4a5f2535059ef8d1b6a082
      size: 258
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_knn/
      hash: md5
      md5: 029aa9a618d0edd127756b0b724a1742.dir
      size: 1568426
      nfiles: 513
    - path: truthseeker/reports/condense/gzip_knn/
      hash: md5
      md5: ef4ee3a0a4c954cea9b4f557a216e421.dir
      size: 353591
      nfiles: 374
  plot@ddos-gzip_knn:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/clean_gzip_knn.csv
      hash: md5
      md5: c730af75faf35ba958b15b2da82b25be
      size: 451405
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: b8279045dcf3a1fc574578e991427e73
      size: 23629
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 1512c0c363753afc28a3c093cc8e252c
      size: 22784
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: dd17a922e53b59b2d9b2d91c1237bb54
      size: 22329
    - path: ddos/plots/models_vs_accuracy.pdf
      hash: md5
      md5: bbbc08a7161735b6174984688003809f
      size: 13970
    - path: ddos/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 9b6acd61045df87af51626be2bdff7ab
      size: 15507
    - path: ddos/plots/models_vs_train_time.pdf
      hash: md5
      md5: 6a2303b531dfc78f20d9bf3dc62d8d42
      size: 16118
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 9cd54391a16400664710c9f0589a4d5f
      size: 22044
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0397f39f681300638b6fcc7c2d4e3bda
      size: 21616
  plot@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/clean_gzip_knn.csv
      hash: md5
      md5: 1c001f5a7008b439ee4c7946998cbe25
      size: 1002255
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: a146ab8c45d548ecd6c285a40c5d49e7
      size: 23228
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 59f7befb701cf34c5bf62a78206d7867
      size: 22642
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 938036a897293cbf7dc0b4caa19a5596
      size: 22182
    - path: kdd_nsl/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 0dad2f21fc6049c3a24972a35514ee71
      size: 15035
    - path: kdd_nsl/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 4361ffb492bff25d3cde95fcdb941ced
      size: 16578
    - path: kdd_nsl/plots/models_vs_train_time.pdf
      hash: md5
      md5: 416681afbf2e0e87dcc7dfe97f0835fc
      size: 16239
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 05a28fb9adea7b847f396fdd96c37d02
      size: 22208
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0a0a9daf98ab6efe98cb31b69cba2c65
      size: 21578
  plot@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/clean_gzip_knn.csv
      hash: md5
      md5: ff0162ac672b57d59126b965580901d9
      size: 620009
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 3cef9a04adf0d3378d4627c1a8b097a7
      size: 23348
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: a4a5f2426ffaf289e124fb09235e374b
      size: 22838
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: cda8914da9fabcfb40ea1eb0943e28d3
      size: 22333
    - path: truthseeker/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 7ef865e460d2652c873cfe333e7a308d
      size: 15215
    - path: truthseeker/plots/models_vs_predict_time.pdf
      hash: md5
      md5: eb57bd848d231a47615e311dbd1102b1
      size: 17930
    - path: truthseeker/plots/models_vs_train_time.pdf
      hash: md5
      md5: e7bc6589ed86e8f5c3fbb5a747c652fe
      size: 17739
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 0e7c326bef4c0d835f810c67172b2698
      size: 22057
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: ce21956e382cc48f0a71ef7ccfd79751
      size: 21593
  plot@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/clean_gzip_knn.csv
      hash: md5
      md5: 13a5803849f7dfdefe18ba16b0a5010f
      size: 448070
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 507715814c07145dbb140b2b6714973b
      size: 23499
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 97ec5498625837c79fc02850afba09f1
      size: 22606
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: f4c9d0805ea5d0ac8e1a2210ee788d47
      size: 22104
    - path: sms_spam/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 2eb9ea23cba4e5b734565b7aacdcf43c
      size: 14146
    - path: sms_spam/plots/models_vs_predict_time.pdf
      hash: md5
      md5: b518bf6b070e7916ad71febd3d3face6
      size: 15523
    - path: sms_spam/plots/models_vs_train_time.pdf
      hash: md5
      md5: 617f20892ba643f5c47077af63ae727f
      size: 14895
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 40aa8607331327c4f667fda367defb5f
      size: 22033
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 775c0bdfc7d9524f1e63b8879ddefccd
      size: 21590
  merge@truthseeker:
    cmd: python merge.py --big_dir truthseeker/plots/ --data_file clean/gzip_knn.csv
      --little_dir_data_file clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder
      truthseeker/plots --output_file merged.csv
    deps:
    - path: truthseeker/plots/clean/gzip_knn.csv
      hash: md5
      md5: 1f46e4b3afd875ee11939b23bd1c0852
      size: 560551
    - path: truthseeker/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 82450f3b94f517f586b35ed85b494add
      size: 417258
    - path: truthseeker/plots/clean/gzip_svc.csv
      hash: md5
      md5: cdb96b7ba00dc0bf6b4c8db38311447b
      size: 679004
    outs:
    - path: truthseeker/plots/merged.csv
      hash: md5
      md5: a9b4f71f4d7eccde5a901730969b0bb1
      size: 1711555
  merge@sms_spam:
    cmd: python merge.py --big_dir sms_spam/plots/ --data_file clean/gzip_knn.csv
      --little_dir_data_file clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder
      sms_spam/plots --output_file merged.csv
    deps:
    - path: sms_spam/plots/clean/gzip_knn.csv
      hash: md5
      md5: 020bbec4f2594935bd33efdcdf90eba7
      size: 358497
    - path: sms_spam/plots/clean/gzip_logistic.csv
      hash: md5
      md5: d9a1be37cfb498a7d87c116db6f553e2
      size: 497702
    - path: sms_spam/plots/clean/gzip_svc.csv
      hash: md5
      md5: 4455964d2014f4705b4ea3191cef40b2
      size: 588874
    outs:
    - path: sms_spam/plots/merged.csv
      hash: md5
      md5: 3e3e63943b3d62dddc79e554cb691405
      size: 1492939
  merge@ddos:
    cmd: python merge.py --big_dir ddos/plots/ --data_file clean/gzip_knn.csv --little_dir_data_file
      clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder ddos/plots --output_file
      merged.csv
    deps:
    - path: ddos/plots/clean/gzip_knn.csv
      hash: md5
      md5: ad6773d0af82535d3c525f8bf405bbfe
      size: 1919757
    - path: ddos/plots/clean/gzip_logistic.csv
      hash: md5
      md5: a7d5cf7362711724ae19bba3becf66d2
      size: 1523208
    - path: ddos/plots/clean/gzip_svc.csv
      hash: md5
      md5: 45515bad8f1a4167a7a64d0a3d62464e
      size: 1842449
    outs:
    - path: ddos/plots/merged.csv
      hash: md5
      md5: 2fd123789b3c749a653aa9c142d23858
      size: 5465498
  merge@kdd_nsl:
    cmd: python merge.py --big_dir kdd_nsl/plots/ --data_file clean/gzip_knn.csv --little_dir_data_file
      clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder kdd_nsl/plots --output_file
      merged.csv
    deps:
    - path: kdd_nsl/plots/clean/gzip_knn.csv
      hash: md5
      md5: 686b0f04494630491244a6ead99949b7
      size: 996268
    - path: kdd_nsl/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 82d8bddbe4db8eb6835d00931af7fc12
      size: 1456814
    - path: kdd_nsl/plots/clean/gzip_svc.csv
      hash: md5
      md5: a359fb46b83265dec352e0af17f19cb2
      size: 1771361
    outs:
    - path: kdd_nsl/plots/merged.csv
      hash: md5
      md5: 7817c0dd6f149eb072f4a5c787fa9655
      size: 4361588
  plot@kdd_nsl:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/merged.csv
      hash: md5
      md5: 7817c0dd6f149eb072f4a5c787fa9655
      size: 4361588
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 2abfc1441c3515f07d2e28459e730a4f
      size: 24689
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: d91c94bf17617b79b2a417710efb9dfc
      size: 23239
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: d2c40b3e36886868c650917d02015be4
      size: 24227
    - path: kdd_nsl/plots/models_vs_accuracy.pdf
      hash: md5
      md5: c6807ba0356e42159d683a2b3ab610a9
      size: 23546
    - path: kdd_nsl/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 2f6d79e1a5164884b87ef3f40bdafeeb
      size: 19370
    - path: kdd_nsl/plots/models_vs_train_time.pdf
      hash: md5
      md5: 30ed28915c3ff6de16fffbf8c6bdda45
      size: 18949
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 1d0bb7d03823bb54b5b12b50dbc6615c
      size: 22232
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 802d5119895198601ba2ee24b3cc9528
      size: 21618
  plot@truthseeker:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/merged.csv
      hash: md5
      md5: a9b4f71f4d7eccde5a901730969b0bb1
      size: 1711555
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 935a8c7365ac4b738a1ab222357db671
      size: 23824
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: d5095d1375ed12b1a9b9f8ce5bfee839
      size: 22984
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: c6dec8707d3da6a57eb64874b8489aa1
      size: 23404
    - path: truthseeker/plots/models_vs_accuracy.pdf
      hash: md5
      md5: c09acc549b30af58463a3a8af31b80d1
      size: 20437
    - path: truthseeker/plots/models_vs_predict_time.pdf
      hash: md5
      md5: ff7ffac5905b059ec6670c9220caf124
      size: 18153
    - path: truthseeker/plots/models_vs_train_time.pdf
      hash: md5
      md5: f48cdb573700e225810e4ed960768e57
      size: 17725
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 4b92b154563b9c13bb5f177d0e106002
      size: 22192
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 2013309b971cea5728652df1a18ece16
      size: 21586
  plot@sms_spam:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/merged.csv
      hash: md5
      md5: 3e3e63943b3d62dddc79e554cb691405
      size: 1492939
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 695e96d374959cef893859230a15f1a7
      size: 24667
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 857505ffce8416303759a76cb29b26a3
      size: 23552
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 98b34d861b84d36cb30f58c763445eb7
      size: 23637
    - path: sms_spam/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 3d9cda5e091398ec195ff1c763fb0b5a
      size: 23033
    - path: sms_spam/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 06ae4883133a4f2bb4c19f531c693fdd
      size: 19365
    - path: sms_spam/plots/models_vs_train_time.pdf
      hash: md5
      md5: f8af33a8abf0caf4fc83a69b6af565a0
      size: 18945
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 43b4f4865931fca59079491745c20f1c
      size: 22231
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 4f5b0a9ac3efe2e0daa225f79fe0e40c
      size: 21606
  plot@ddos:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/merged.csv
      hash: md5
      md5: 2fd123789b3c749a653aa9c142d23858
      size: 5465498
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 3b2f9c2885d331a0cadd339177318f3f
      size: 24827
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 56c78e45d5932c61b339753810a6fed1
      size: 24347
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 7ba195f1f39c450c7ebd9165eee97f32
      size: 22962
    - path: ddos/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 4e5e04199aa08c3098632cf8fad2c744
      size: 23780
    - path: ddos/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 41c0c84e0b3b737273692f10c366b275
      size: 19529
    - path: ddos/plots/models_vs_train_time.pdf
      hash: md5
      md5: 38dd71a6ac8cd50294d5b81bffd8425b
      size: 19106
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 72331f97089e5465a2df8a071f6dcf10
      size: 22223
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 3014b61ef7c5fe2e5276149ecd20625b
      size: 22143
  condense@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_logistic model=best_gzip_logistic_truthseeker
      hydra.sweeper.study_name=condense_gzip_logistic_truthseeker hydra.sweeper.n_trials=128
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/study.csv
      model.init.m='tag(log, interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_logistic_truthseeker.yaml
      hash: md5
      md5: 448e12c542f48c074057e9374743d61e
      size: 326
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_logistic/
      hash: md5
      md5: 79d74a0dfe0486ada3f03b24c68973dc.dir
      size: 1576129
      nfiles: 513
    - path: truthseeker/reports/condense/gzip_logistic/
      hash: md5
      md5: 3de3011b1d96e4990111f5b1601e3b9d.dir
      size: 400559
      nfiles: 343
  condense@ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_knn model=best_gzip_knn_ddos hydra.sweeper.study_name=condense_gzip_knn_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: 74721f3e7ab6096e246c486d6080e1ab
      size: 259
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_knn/
      hash: md5
      md5: a2dc5aef876897f53c4076e4012b678a.dir
      size: 1542474
      nfiles: 513
    - path: ddos/reports/condense/gzip_knn/
      hash: md5
      md5: 781709e87f2e740f6a0f4e914ee9754f.dir
      size: 340848
      nfiles: 379
  condense@ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_logistic model=best_gzip_logistic_ddos hydra.sweeper.study_name=condense_gzip_logistic_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: 9507b28fa5a18b501fe9d80ec33bed1c
      size: 334
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_logistic/
      hash: md5
      md5: 4f8f846516837f0e7cd63c8911aff99a.dir
      size: 1623568
      nfiles: 513
    - path: ddos/reports/condense/gzip_logistic/
      hash: md5
      md5: 051b71717b4a7986a1965ebadf448838.dir
      size: 350870
      nfiles: 384
  condense@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_kdd_nsl hydra.sweeper.study_name=condense_gzip_knn_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=kdd_nsl files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: 2697918626643d0136286367b83ee6b9
      size: 258
    - path: kdd_nsl/logs/method/
      hash: md5
      md5: de8764bbb2daa13261f3f5d1dff27a30.dir
      size: 79348
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/gzip_knn/
      hash: md5
      md5: 7d53f3534ceb486e6601d344562cfb32.dir
      size: 1564530
      nfiles: 513
    - path: kdd_nsl/reports/condense/gzip_knn/
      hash: md5
      md5: 7e5a283215281be3ee4189ebd5a6e3f1.dir
      size: 342924
      nfiles: 384
  parse_params:
    cmd: python -m deckard.layers.parse
    deps:
    - path: conf/data/default.yaml
      hash: md5
      md5: 86639d6672cfd9529dda3e2ae4036c01
      size: 22
    - path: conf/default.yaml
      hash: md5
      md5: a0a533f84a7ffce197e0db5439219faf
      size: 1504
    - path: conf/files/default.yaml
      hash: md5
      md5: 7a2df5f8b98699376c3fb4da05d70dea
      size: 306
    - path: conf/model/default.yaml
      hash: md5
      md5: 39dc7512b1d19fea54550b080d880153
      size: 27
    - path: conf/scorers/default.yaml
      hash: md5
      md5: d8d00e7d284ea68b1244743dfef8f00c
      size: 280
    outs:
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
  test_each_metric@gzip-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/gzip/20
      hash: md5
      md5: 6091388fcd68296e6ccd16f0955cba96.dir
      size: 7683
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@zstd-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/zstd/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=zstd  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/zstd/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/zstd/20
      hash: md5
      md5: 704acd4e060b20b19dd8c6528ee42b02.dir
      size: 7683
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/zstd/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@pkl-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/pkl/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=pkl  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/pkl/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/pkl/20
      hash: md5
      md5: 539ec713f43133226c23d088f60a66bf.dir
      size: 7668
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/pkl/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@bz2-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/bz2/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=bz2  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/bz2/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/bz2/20
      hash: md5
      md5: dc85f72896e274b978488f36ec121474.dir
      size: 7668
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/bz2/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@lzma-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/lzma/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=lzma  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/lzma/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/lzma/20
      hash: md5
      md5: 3e929ed47c2f62267a513fcc9ac7faec.dir
      size: 7683
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/lzma/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@levenshtein-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/levenshtein/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=levenshtein  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/levenshtein/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/levenshtein/20
      hash: md5
      md5: 6e719f5801c71fe88793e4a42fe47b68.dir
      size: 7767
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/levenshtein/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@ratio-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/ratio/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=ratio  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/ratio/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/ratio/20
      hash: md5
      md5: c7917445640a277d2a898413a74442e3.dir
      size: 7677
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/ratio/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@hamming-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/hamming/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=hamming  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/hamming/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/hamming/20
      hash: md5
      md5: 384b5ae13749ca9006486a64dd50faf0.dir
      size: 7707
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/hamming/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@gzip_knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_dataset  files.name=gzip_knn
      data.sample.train_size=100 files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model_name=gzip_knn model=gzip_knn hydra.run.dir=kdd_nsl/logs/test_each_dataset/gzip_knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 41e95614d524a857c0260b13ce77202b
      size: 488
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_dataset/gzip_knn
      hash: md5
      md5: 955370e62c64341f4410f3f46f6d84fd.dir
      size: 7263
      nfiles: 4
    - path: kdd_nsl/reports/test_each_dataset/gzip_knn/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@gzip_knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_dataset  files.name=gzip_knn
      data.sample.train_size=100 files.directory=truthseeker data=truthseeker dataset=truthseeker
      model_name=gzip_knn model=gzip_knn hydra.run.dir=truthseeker/logs/test_each_dataset/gzip_knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 41e95614d524a857c0260b13ce77202b
      size: 488
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/test_each_dataset/gzip_knn
      hash: md5
      md5: f8dd2e14f7e12daed6ebfd9a552d6c4e.dir
      size: 7305
      nfiles: 4
    - path: truthseeker/reports/test_each_dataset/gzip_knn/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@ddos-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model=gzip_knn
      hydra.run.dir=ddos/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_knn
      hash: md5
      md5: 86973d6369f6a61b442f6387478ccde6.dir
      size: 8041
      nfiles: 4
    - path: ddos/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 1269132e68fc8dff521df51cb2fe321c
      size: 284
  test_each_dataset@ddos-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_svc model=gzip_svc
      hydra.run.dir=ddos/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_svc
      hash: md5
      md5: 67d472318cba51a8f9e7989991cbf09e.dir
      size: 8038
      nfiles: 4
    - path: ddos/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 5728b15f67d338a4bf8160b60715dce8
      size: 283
  test_each_dataset@ddos-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=ddos data=ddos dataset=ddos model_name=gzip_logistic
      model=gzip_logistic hydra.run.dir=ddos/logs/train/gzip_logistic ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_logistic
      hash: md5
      md5: 24fe0f4f52e6989c5a1c65795ea0d936.dir
      size: 8173
      nfiles: 4
    - path: ddos/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 259b4ae57c0c1e8d08b72f7f888fbe45
      size: 281
  test_each_dataset@truthseeker-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model=gzip_knn hydra.run.dir=truthseeker/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_knn
      hash: md5
      md5: ba3eb31317c073b3b07a9c9d1948e656.dir
      size: 8158
      nfiles: 4
    - path: truthseeker/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 2088612d107192d0497e9fd2c569818f
      size: 283
  test_each_dataset@truthseeker-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_svc
      model=gzip_svc hydra.run.dir=truthseeker/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_svc
      hash: md5
      md5: 4512bda479ab6cd5ae74e7f575928b9d.dir
      size: 8154
      nfiles: 4
    - path: truthseeker/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 25d8ec2a07497188e4311c5d62f9ddb6
      size: 281
  test_each_dataset@truthseeker-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=truthseeker data=truthseeker dataset=truthseeker
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=truthseeker/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_logistic
      hash: md5
      md5: e1da0260d3c55bfbf4a44bb1b96206ba.dir
      size: 8315
      nfiles: 4
    - path: truthseeker/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 9ba0565e8f7dcb14a1e45b8e585d9ccb
      size: 283
  test_each_dataset@sms_spam-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model=gzip_knn hydra.run.dir=sms_spam/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_knn
      hash: md5
      md5: 2066e09b41a2f6ce0c835018278b0dc6.dir
      size: 8093
      nfiles: 4
    - path: sms_spam/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 45ab656d14366622402a687082c5feeb
      size: 284
  test_each_dataset@sms_spam-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_svc
      model=gzip_svc hydra.run.dir=sms_spam/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_svc
      hash: md5
      md5: 4f8d2f14bf8ed23f7443b91640fbb2c0.dir
      size: 8090
      nfiles: 4
    - path: sms_spam/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 6cf7317e720631b93bcd699b22a9c4ec
      size: 283
  test_each_dataset@sms_spam-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=sms_spam data=sms_spam dataset=sms_spam
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=sms_spam/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_logistic
      hash: md5
      md5: e9577cb3ce87a9e0a55da46017111e2a.dir
      size: 8225
      nfiles: 4
    - path: sms_spam/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 8c39b120c89ed2d1c51c88d99f202ab1
      size: 281
  test_each_dataset@kdd_nsl-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model=gzip_knn
      hydra.run.dir=kdd_nsl/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_knn
      hash: md5
      md5: d9f95ac89efb51e0b9474a50ed1ee34d.dir
      size: 8108
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 1bb23417615a5663b20ae3c9bb05ab41
      size: 284
  test_each_dataset@kdd_nsl-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_svc model=gzip_svc
      hydra.run.dir=kdd_nsl/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_svc
      hash: md5
      md5: 8efe1af9a07fe35bf35a620aecc9984e.dir
      size: 8105
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 6e851ecef3c53745a566ce54bc9b64e3
      size: 283
  test_each_dataset@kdd_nsl-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=kdd_nsl/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_logistic
      hash: md5
      md5: b3b1f1813a6bc3b51b1aca53b3730892.dir
      size: 8240
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: ce2f45436d570475e2cd62b1d5417305
      size: 281
  test_each_metric@jaro-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/jaro/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=jaro  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/jaro/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/jaro/20
      hash: md5
      md5: 8b71ff09c44e615322095f861b3f1dca.dir
      size: 7662
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/jaro/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@jaro_winkler-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/jaro_winkler/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=jaro_winkler  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/jaro_winkler/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/jaro_winkler/20
      hash: md5
      md5: 2b831c44b315a8b61c3f762b365c8e5f.dir
      size: 7782
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/jaro_winkler/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@seqratio-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/seqratio/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=seqratio  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/seqratio/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/seqratio/20
      hash: md5
      md5: ed632f40ed8ff016cb649ab00c408114.dir
      size: 7722
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/seqratio/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_knn/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_knn/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_knn/gzip/20
      hash: md5
      md5: c8075fa1867cb00a11f6df654086bd97.dir
      size: 7675
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_knn/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_svc-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_svc/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_svc model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_svc/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_svc/gzip/20
      hash: md5
      md5: 6ec9663f42d781dc482f1da6df886312.dir
      size: 7678
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_svc/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_logistic-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_logistic/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_logistic model_name=gzip_knn model.init.metric=gzip  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_logistic/gzip/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 81a03f1290fe4d5eaa739ba9807b5b20
      size: 488
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_logistic/gzip/20
      hash: md5
      md5: 8ba9f7659cef2c4d610fece176de1548.dir
      size: 7767
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_logistic/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  grid_search@20-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/20
      hash: md5
      md5: 5c03e3e52e7a24e15acbd0b2aadfee35.dir
      size: 1389089
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/20/train/
      hash: md5
      md5: a7e0e97547bfac97d8518259bffdd4c1.dir
      size: 1847622
      nfiles: 1661
  grid_search@20-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/20
      hash: md5
      md5: e7528ce71bad9f745a9f5e4fcf3a2df1.dir
      size: 1571121
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/20/train/
      hash: md5
      md5: 127796b95b1817c4b0d9f1846537b0a6.dir
      size: 2083086
      nfiles: 1772
  grid_search@20-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/20
      hash: md5
      md5: a1cb35a26808d09dac04aef8fc7106cb.dir
      size: 1524012
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/20/train/
      hash: md5
      md5: f475c4428240afaaf863bb021eb82890.dir
      size: 2095726
      nfiles: 2092
  grid_search@20-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/20
      hash: md5
      md5: 21da241789a9856418302895c146cd4d.dir
      size: 1370161
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/20/train/
      hash: md5
      md5: 394a7d8c033166c958996d646f822460.dir
      size: 376291
      nfiles: 340
  grid_search@20-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/20
      hash: md5
      md5: 4eceda9fdfa787e48b4a2d397ad89332.dir
      size: 1497002
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/20/train/
      hash: md5
      md5: 9b32f4ef152eda3a3f2e68d424d163d2.dir
      size: 555897
      nfiles: 366
  grid_search@20-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/20
      hash: md5
      md5: 20a01b45b6f1901a8e929bf1cbccd349.dir
      size: 1473672
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/20/train/
      hash: md5
      md5: a2b059debfa307134c83ec03713e8a50.dir
      size: 546743
      nfiles: 384
  grid_search@20-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/20
      hash: md5
      md5: bcee56ea959096e8255fb482a8854457.dir
      size: 1381168
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/20/train/
      hash: md5
      md5: 12133daeda911e75210cff4d8a3fa5a7.dir
      size: 379524
      nfiles: 326
  grid_search@20-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/20
      hash: md5
      md5: 5c7265a3ac4bf4774fbb1c440b9910c4.dir
      size: 1520121
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/20/train/
      hash: md5
      md5: 9ae8109f623b19dcbabe51e4401a1f8c.dir
      size: 552539
      nfiles: 357
  grid_search@20-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/20
      hash: md5
      md5: fe6324545be6dc97b88326e10a65e815.dir
      size: 1451676
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/20/train/
      hash: md5
      md5: 814632194dc03d626a24f0418fd703e1.dir
      size: 542357
      nfiles: 384
  grid_search@20-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/20/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/20
      hash: md5
      md5: 057fc9613b2210a0dd1e03ef46f3d6bc.dir
      size: 1616211
      nfiles: 514
    - path: ddos/reports/gzip_knn/20/train/
      hash: md5
      md5: b0ae22713c6a319a24acb69525a9f01a.dir
      size: 1375974
      nfiles: 1536
  grid_search@20-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/20/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/20
      hash: md5
      md5: f2c036dc149976bc0de5187f8661669d.dir
      size: 1705246
      nfiles: 514
    - path: ddos/reports/gzip_logistic/20/train/
      hash: md5
      md5: 36eee9b3fb432eafed577ca45b477dab.dir
      size: 1608552
      nfiles: 1349
  grid_search@20-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/20/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/20
      hash: md5
      md5: 5934a7b63c96844a0eaa9ecea06a79c2.dir
      size: 1639820
      nfiles: 514
    - path: ddos/reports/gzip_svc/20/train/
      hash: md5
      md5: 0e902831c38cc7b2f2b03d7bb7f4f5cf.dir
      size: 1580188
      nfiles: 1536
  grid_search@100-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/100
      hash: md5
      md5: aa2209bce9b2f829ca22f244b53ed58f.dir
      size: 1416182
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/100/train/
      hash: md5
      md5: 1547fa66fbaac37a7badef9b300577a7.dir
      size: 1163933
      nfiles: 1000
  grid_search@100-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/100
      hash: md5
      md5: b6e7cf1d3984f8029177576f9668944b.dir
      size: 1609157
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/100/train/
      hash: md5
      md5: d40db4814c403a903c7d0cd2a8a5bb7b.dir
      size: 1329546
      nfiles: 1093
  grid_search@100-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/100
      hash: md5
      md5: 4b96e2a3bb0e0d230ebd96591a16e441.dir
      size: 1553624
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/100/train/
      hash: md5
      md5: 3cf8a86de1026ead8fcd1b6cda47e910.dir
      size: 1247698
      nfiles: 1152
  grid_search@100-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/100
      hash: md5
      md5: 818cba0a8349442987e5d6be1f0672d4.dir
      size: 1374869
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/100/train/
      hash: md5
      md5: 261a37d5d497bd477d872aa72a94a13f.dir
      size: 394446
      nfiles: 320
  grid_search@100-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/100
      hash: md5
      md5: dd822b92438871be421644a82afa8e2f.dir
      size: 1528739
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/100/train/
      hash: md5
      md5: d1b22149466a949b86aba9390d7cf992.dir
      size: 556386
      nfiles: 365
  grid_search@100-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/100
      hash: md5
      md5: c9493ae71545ccec0ea01adc6d664bce.dir
      size: 1505603
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/100/train/
      hash: md5
      md5: c9a4bae4aed04fcdb578f44fba94af87.dir
      size: 547282
      nfiles: 384
  grid_search@100-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/100
      hash: md5
      md5: ad8714bbbce96d2c1ff75deda0add5ec.dir
      size: 1415136
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/100/train/
      hash: md5
      md5: 6bcf048da228e84a757916c797891044.dir
      size: 376546
      nfiles: 331
  find_best_model@ddos-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_ddos --config_subdir model --params_file best_gzip_knn_ddos --default_config
      gzip_knn
    deps:
    - path: ddos/logs/gzip_knn/
      hash: md5
      md5: d2c6441e85e3509b8968240a48196d07.dir
      size: 4193267
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: bdea475d3a2bc59106f27dccd0fc27fc
      size: 419
  find_best_model@ddos-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_ddos --config_subdir model --params_file best_gzip_svc_ddos --default_config
      gzip_svc
    deps:
    - path: ddos/logs/gzip_svc/
      hash: md5
      md5: 78cd23f301a93a7c9842abb061e3cc7b.dir
      size: 7447727
      nfiles: 2570
    outs:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: 3a7f27dd470ec9e55c10403814f550f2
      size: 442
  find_best_model@ddos-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_ddos --config_subdir model --params_file best_gzip_logistic_ddos
      --default_config gzip_logistic
    deps:
    - path: ddos/logs/gzip_logistic/
      hash: md5
      md5: b28cadbd10b9bbe40802e39b1beaee18.dir
      size: 6561328
      nfiles: 2056
    outs:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: d5e603d6386dd6cf1167088eaecbdde5
      size: 498
  condense@ddos-knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_knn model=gzip_knn files.directory=ddos
      files.reports=reports/condense/knn/ hydra.sweeper.study_name=condense_knn_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/knn/
      hydra.callbacks.study_dump.output_file=ddos/logs/knn/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_knn --multirun
    deps:
    - path: conf/condense_knn.yaml
      hash: md5
      md5: abd25d17a742e467d39dda34b448ba88
      size: 2181
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/knn/
      hash: md5
      md5: 34f8b7196af71d106965513050a254fb.dir
      size: 10910937
      nfiles: 4097
    - path: ddos/reports/condense/knn/
      hash: md5
      md5: 9b6918814be3bea732abc71b8684fd8d.dir
      size: 8458502
      nfiles: 9157
  condense@ddos-svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_svc model=gzip_svc files.directory=ddos
      files.reports=reports/condense/svc/ hydra.sweeper.study_name=condense_svc_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/svc/
      hydra.callbacks.study_dump.output_file=ddos/logs/svc/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: 3a7f27dd470ec9e55c10403814f550f2
      size: 442
    - path: ddos/logs/method/
      hash: md5
      md5: a09dd0467b0e8a142d6f32a38f205159.dir
      size: 59399
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/svc/
      hash: md5
      md5: 6a15cfc205c7382b8d7d6d67d35ddfb0.dir
      size: 11072739
      nfiles: 4097
    - path: ddos/reports/condense/svc/
      hash: md5
      md5: daaf428c939e9bfcc233bf88ee39f9fb.dir
      size: 2819182
      nfiles: 3072
  condense@ddos-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_logistic model=gzip_logistic
      files.directory=ddos files.reports=reports/condense/logistic/ hydra.sweeper.study_name=condense_logistic_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/logistic/
      hydra.callbacks.study_dump.output_file=ddos/logs/logistic/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: d5e603d6386dd6cf1167088eaecbdde5
      size: 498
    - path: ddos/logs/method/
      hash: md5
      md5: a09dd0467b0e8a142d6f32a38f205159.dir
      size: 59399
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/logistic/
      hash: md5
      md5: 064e5768d0155635c9bc6287914ac9f7.dir
      size: 11690343
      nfiles: 4097
    - path: ddos/reports/condense/logistic/
      hash: md5
      md5: 7ce841278929a90690417685b7c7f143.dir
      size: 5929815
      nfiles: 5888
  grid_search@100-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/100/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/100
      hash: md5
      md5: 41af522bae6f35684d51a90652c37082.dir
      size: 1645388
      nfiles: 514
    - path: ddos/reports/gzip_knn/100/train/
      hash: md5
      md5: b9374a5acb2480c2ed6a35803a344f69.dir
      size: 1341749
      nfiles: 1499
  grid_search@100-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/100/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/100
      hash: md5
      md5: 3f1d14c70e73f668316f86a8d7d0e22b.dir
      size: 1733688
      nfiles: 514
    - path: ddos/reports/gzip_logistic/100/train/
      hash: md5
      md5: c839c1faf70de47c057714c3a8bdc52d.dir
      size: 1562420
      nfiles: 1315
  grid_search@100-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/100/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/100
      hash: md5
      md5: 4adc8c896e06e2d7e8450f2b863b95bf.dir
      size: 1681042
      nfiles: 514
    - path: ddos/reports/gzip_svc/100/train/
      hash: md5
      md5: 8ad9bbb8a118699458753528a263f5ba.dir
      size: 1790102
      nfiles: 1678
  find_best_model@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_kdd_nsl --config_subdir model --params_file best_gzip_knn_kdd_nsl --default_config
      gzip_knn
    deps:
    - path: kdd_nsl/logs/gzip_knn/
      hash: md5
      md5: 6418750af32f15be9c6f35e0975b3276.dir
      size: 4024441
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: f9ad25a19931041146b4b1eab45fda68
      size: 420
  find_best_model@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_kdd_nsl --config_subdir model --params_file best_gzip_svc_kdd_nsl --default_config
      gzip_svc
    deps:
    - path: kdd_nsl/logs/gzip_svc/
      hash: md5
      md5: 381879c377b6eeccbb9d1aa42f78fec2.dir
      size: 4366326
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_svc_kdd_nsl.yaml
      hash: md5
      md5: 0542c20ce7b5a74a20d4ab1c38fdf213
      size: 434
  find_best_model@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_kdd_nsl --config_subdir model --params_file best_gzip_logistic_kdd_nsl
      --default_config gzip_logistic
    deps:
    - path: kdd_nsl/logs/gzip_logistic/
      hash: md5
      md5: 34325e24d16a4af0ec3286ec4b034e14.dir
      size: 4504884
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_logistic_kdd_nsl.yaml
      hash: md5
      md5: e21d828b4b1ad122d7755e986de5b93d
      size: 353
  find_best_model@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_sms_spam --config_subdir model --params_file best_gzip_knn_sms_spam
      --default_config gzip_knn
    deps:
    - path: sms_spam/logs/gzip_knn/
      hash: md5
      md5: 689c69db8c621101649ddef5bd0c1bb5.dir
      size: 2713750
      nfiles: 1028
    outs:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 41fad710bcb8b8b8dd548d669b2ed748
      size: 419
  find_best_model@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_sms_spam --config_subdir model --params_file best_gzip_svc_sms_spam
      --default_config gzip_svc
    deps:
    - path: sms_spam/logs/gzip_svc/
      hash: md5
      md5: b91e15f0eb5ee57aed8aeb5a5d6feeab.dir
      size: 2777710
      nfiles: 1028
    outs:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: bb3008613c3311a696d32fb683732c00
      size: 442
  find_best_model@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_sms_spam --config_subdir model --params_file best_gzip_logistic_sms_spam
      --default_config gzip_logistic
    deps:
    - path: sms_spam/logs/gzip_logistic/
      hash: md5
      md5: 89191dbe147b40192129776ef2652900.dir
      size: 1649284
      nfiles: 578
    outs:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: fd1d0481be57844d935aea28e995a369
      size: 485
  condense@kdd_nsl-knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=kdd_nsl files.reports=reports/condense/knn/ hydra.sweeper.study_name=condense_knn_kdd_nsl
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/knn/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/knn/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_knn --multirun
    deps:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: f9ad25a19931041146b4b1eab45fda68
      size: 420
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/knn/
      hash: md5
      md5: 81f50250e51650881283dcf68d43234c.dir
      size: 10952920
      nfiles: 4097
    - path: kdd_nsl/reports/condense/knn/
      hash: md5
      md5: 3f8eb680f1f8960490e4581bfa16cfd2.dir
      size: 2869636
      nfiles: 3011
  condense@kdd_nsl-svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=kdd_nsl files.reports=reports/condense/svc/ hydra.sweeper.study_name=condense_svc_kdd_nsl
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/svc/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/svc/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_kdd_nsl.yaml
      hash: md5
      md5: 0542c20ce7b5a74a20d4ab1c38fdf213
      size: 434
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/svc/
      hash: md5
      md5: cdf319e0c94e4c6eda84ec9b2e9ea1a9.dir
      size: 10708020
      nfiles: 4097
    - path: kdd_nsl/reports/condense/svc/
      hash: md5
      md5: ad27897c6454024915fdcef827219bd3.dir
      size: 8340639
      nfiles: 5462
  condense@kdd_nsl-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=kdd_nsl files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_kdd_nsl hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=kdd_nsl/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_kdd_nsl.yaml
      hash: md5
      md5: e21d828b4b1ad122d7755e986de5b93d
      size: 353
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/logistic/
      hash: md5
      md5: 0ce56c12dc58fe66c1fa6fec867b2cf5.dir
      size: 11710344
      nfiles: 4097
    - path: kdd_nsl/reports/condense/logistic/
      hash: md5
      md5: ae358823518ca6759ddfa8d1c738e367.dir
      size: 3101125
      nfiles: 2948
  condense@truthseeker-knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=truthseeker files.reports=reports/condense/knn/
      hydra.sweeper.study_name=condense_knn_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/knn/ hydra.callbacks.study_dump.output_file=truthseeker/logs/knn/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_knn --multirun
    deps:
    - path: conf/model/best_gzip_knn_truthseeker.yaml
      hash: md5
      md5: 79baf4709c4a5f2535059ef8d1b6a082
      size: 258
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/knn/
      hash: md5
      md5: 3e8b9011ee1c591904115e67db9a1a50.dir
      size: 11038890
      nfiles: 4097
    - path: truthseeker/reports/condense/knn/
      hash: md5
      md5: 1565eb2348976cc6ac9108396141080b.dir
      size: 2831604
      nfiles: 3016
  condense@truthseeker-svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=truthseeker files.reports=reports/condense/svc/
      hydra.sweeper.study_name=condense_svc_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/svc/ hydra.callbacks.study_dump.output_file=truthseeker/logs/svc/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_truthseeker.yaml
      hash: md5
      md5: 97d9d5857744b1cc077513ac5a659f62
      size: 302
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/svc/
      hash: md5
      md5: 845724e35dc3a54bea549410a35d6afd.dir
      size: 11192018
      nfiles: 4097
    - path: truthseeker/reports/condense/svc/
      hash: md5
      md5: 6cbdc47d51df656dcf7e8ae6221795b3.dir
      size: 2825163
      nfiles: 3064
  condense@truthseeker-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=truthseeker files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=truthseeker/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_truthseeker.yaml
      hash: md5
      md5: 448e12c542f48c074057e9374743d61e
      size: 326
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/logistic/
      hash: md5
      md5: f7e754346e500d1b007b519d86f4c608.dir
      size: 11847643
      nfiles: 4097
    - path: truthseeker/reports/condense/logistic/
      hash: md5
      md5: 8bd6876fc856ea5bd1e95b54093aedb8.dir
      size: 2976098
      nfiles: 3011
  condense@sms_spam-knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=sms_spam files.reports=reports/condense/knn/
      hydra.sweeper.study_name=condense_knn_sms_spam hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/condense/knn/ hydra.callbacks.study_dump.output_file=sms_spam/logs/knn/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_knn --multirun
    deps:
    - path: conf/condense_knn.yaml
      hash: md5
      md5: abd25d17a742e467d39dda34b448ba88
      size: 2181
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/knn/
      hash: md5
      md5: ee1eda16b8989f2a23a7dfeba27b4437.dir
      size: 10519093
      nfiles: 4097
    - path: sms_spam/reports/condense/knn/
      hash: md5
      md5: 84b8fcb1e78a8685141409736c6d6afa.dir
      size: 4713599
      nfiles: 4258
  condense@sms_spam-svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=sms_spam files.reports=reports/condense/svc/
      hydra.sweeper.study_name=condense_svc_sms_spam hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/condense/svc/ hydra.callbacks.study_dump.output_file=sms_spam/logs/svc/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_svc --multirun
    deps:
    - path: conf/condense_svc.yaml
      hash: md5
      md5: 7a311db45e697a23a2bed8180fd45e64
      size: 2182
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/svc/
      hash: md5
      md5: 9d28ee3f4494d207369bd35c2f5d2164.dir
      size: 11082621
      nfiles: 4097
    - path: sms_spam/reports/condense/svc/
      hash: md5
      md5: 200cad31398ec4545e7a490011218c47.dir
      size: 4416840
      nfiles: 3068
  condense@sms_spam-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=sms_spam files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_sms_spam hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=sms_spam/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/condense_logistic.yaml
      hash: md5
      md5: 85b6d1d835afd7e95b5b9f804fbd7119
      size: 2326
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/logistic/
      hash: md5
      md5: 3846050e3a2341b246c2c3366debe0dc.dir
      size: 11620551
      nfiles: 4097
    - path: sms_spam/reports/condense/logistic/
      hash: md5
      md5: 05562ae582796b70d35ae7062a5030d7.dir
      size: 9597627
      nfiles: 6388
  compile@sms_spam-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/logistic  --results_file
      sms_spam/reports/condense/logistic.csv
    deps:
    - path: sms_spam/reports/condense/logistic/
      hash: md5
      md5: 05562ae582796b70d35ae7062a5030d7.dir
      size: 9597627
      nfiles: 6388
    outs:
    - path: sms_spam/reports/condense/logistic.csv
      hash: md5
      md5: 7094b26a582820cc1f88512573ce8c25
      size: 3430438
  compile@kdd_nsl-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/svc  --results_file
      kdd_nsl/reports/condense/svc.csv
    deps:
    - path: kdd_nsl/reports/condense/svc/
      hash: md5
      md5: ad27897c6454024915fdcef827219bd3.dir
      size: 8340639
      nfiles: 5462
    outs:
    - path: kdd_nsl/reports/condense/svc.csv
      hash: md5
      md5: 643a67cb6d5974a787efa6339e3af058
      size: 3003804
  compile@kdd_nsl-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/logistic  --results_file
      kdd_nsl/reports/condense/logistic.csv
    deps:
    - path: kdd_nsl/reports/condense/logistic/
      hash: md5
      md5: df73404e3f7d00371dd55b40e76fa9e0.dir
      size: 3112185
      nfiles: 2954
    outs:
    - path: kdd_nsl/reports/condense/logistic.csv
      hash: md5
      md5: 4193461c63aca8b61956fc443f5bcd3d
      size: 1649004
  compile@ddos-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/svc  --results_file
      ddos/reports/condense/svc.csv
    deps:
    - path: ddos/reports/condense/svc/
      hash: md5
      md5: b40b878f7eca11a9eae0c19e054bee47.dir
      size: 8854939
      nfiles: 7199
    outs:
    - path: ddos/reports/condense/svc.csv
      hash: md5
      md5: 76b35c3e1dfa2d0476a737f9a41c25c4
      size: 3771755
  compile@truthseeker-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/knn  --results_file
      truthseeker/reports/condense/knn.csv
    deps:
    - path: truthseeker/reports/condense/knn/
      hash: md5
      md5: 1565eb2348976cc6ac9108396141080b.dir
      size: 2831604
      nfiles: 3016
    outs:
    - path: truthseeker/reports/condense/knn.csv
      hash: md5
      md5: b4ec50d98f613984be6261a059120255
      size: 1595839
  compile@truthseeker-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/svc  --results_file
      truthseeker/reports/condense/svc.csv
    deps:
    - path: truthseeker/reports/condense/svc/
      hash: md5
      md5: 6cbdc47d51df656dcf7e8ae6221795b3.dir
      size: 2825163
      nfiles: 3064
    outs:
    - path: truthseeker/reports/condense/svc.csv
      hash: md5
      md5: 4cdede4407c88bcda2afc8bbeae91ace
      size: 1617655
  compile@ddos-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/knn  --results_file
      ddos/reports/condense/knn.csv
    deps:
    - path: ddos/reports/condense/knn/
      hash: md5
      md5: 9b6918814be3bea732abc71b8684fd8d.dir
      size: 8458502
      nfiles: 9157
    outs:
    - path: ddos/reports/condense/knn.csv
      hash: md5
      md5: 0cd0ff58f94fb06093779ff81d37d2bf
      size: 4723182
  compile@sms_spam-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/svc  --results_file
      sms_spam/reports/condense/svc.csv
    deps:
    - path: sms_spam/reports/condense/svc/
      hash: md5
      md5: 200cad31398ec4545e7a490011218c47.dir
      size: 4416840
      nfiles: 3068
    outs:
    - path: sms_spam/reports/condense/svc.csv
      hash: md5
      md5: 32f06cbea623f845dcfa7400d707abad
      size: 1573621
  compile@kdd_nsl-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/knn  --results_file
      kdd_nsl/reports/condense/knn.csv
    deps:
    - path: kdd_nsl/reports/condense/knn/
      hash: md5
      md5: 3f8eb680f1f8960490e4581bfa16cfd2.dir
      size: 2869636
      nfiles: 3011
    outs:
    - path: kdd_nsl/reports/condense/knn.csv
      hash: md5
      md5: 29211ec6d9b2b1a5e9193eaabfff3488
      size: 1608857
  compile@truthseeker-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/logistic  --results_file
      truthseeker/reports/condense/logistic.csv
    deps:
    - path: truthseeker/reports/condense/logistic/
      hash: md5
      md5: 8bd6876fc856ea5bd1e95b54093aedb8.dir
      size: 2976098
      nfiles: 3011
    outs:
    - path: truthseeker/reports/condense/logistic.csv
      hash: md5
      md5: 5c01852f352ac96150fb36c2df9bcbbf
      size: 1648856
  compile@sms_spam-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/knn  --results_file
      sms_spam/reports/condense/knn.csv
    deps:
    - path: sms_spam/reports/condense/knn/
      hash: md5
      md5: 84b8fcb1e78a8685141409736c6d6afa.dir
      size: 4713599
      nfiles: 4258
    outs:
    - path: sms_spam/reports/condense/knn.csv
      hash: md5
      md5: c8d4f7036e0c3e1cf8fa5a0b922c6ecc
      size: 2287605
  compile@ddos-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/logistic  --results_file
      ddos/reports/condense/logistic.csv
    deps:
    - path: ddos/reports/condense/logistic/
      hash: md5
      md5: 7ce841278929a90690417685b7c7f143.dir
      size: 5929815
      nfiles: 5888
    outs:
    - path: ddos/reports/condense/logistic.csv
      hash: md5
      md5: b24764aed957fdf6d2ccb541ef490d37
      size: 3150984
  clean@sms_spam-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/svc.csv
      -o sms_spam/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/svc.csv
      hash: md5
      md5: 32f06cbea623f845dcfa7400d707abad
      size: 1573621
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/svc.csv
      hash: md5
      md5: 92b8648f6759e0a56c65aeec4a15aa92
      size: 1223675
  clean@ddos-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/knn.csv -o
      ddos/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/knn.csv
      hash: md5
      md5: 0cd0ff58f94fb06093779ff81d37d2bf
      size: 4723182
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/knn.csv
      hash: md5
      md5: d214914ecfbba6afbd4ff9a61cb96bb1
      size: 3652514
  clean@truthseeker-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/svc.csv
      -o truthseeker/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/svc.csv
      hash: md5
      md5: 4cdede4407c88bcda2afc8bbeae91ace
      size: 1617655
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/svc.csv
      hash: md5
      md5: a17c0cdb6a3fbfae5bd4fcfca1938a96
      size: 1257671
  clean@kdd_nsl-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/knn.csv
      -o kdd_nsl/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/knn.csv
      hash: md5
      md5: 29211ec6d9b2b1a5e9193eaabfff3488
      size: 1608857
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/knn.csv
      hash: md5
      md5: 23789b08b0fd1616555611d0e7971db9
      size: 1204868
  clean@kdd_nsl-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/svc.csv
      -o kdd_nsl/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/svc.csv
      hash: md5
      md5: 643a67cb6d5974a787efa6339e3af058
      size: 3003804
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/svc.csv
      hash: md5
      md5: c9b2ff8546f531fa439c664c63fc06fd
      size: 2021393
  clean@kdd_nsl-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/logistic.csv
      -o kdd_nsl/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/logistic.csv
      hash: md5
      md5: 4193461c63aca8b61956fc443f5bcd3d
      size: 1649004
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/logistic.csv
      hash: md5
      md5: 55a0ac50149a3e3d93b69c63ccd0d7a3
      size: 1174964
  clean@sms_spam-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/knn.csv
      -o sms_spam/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/knn.csv
      hash: md5
      md5: c8d4f7036e0c3e1cf8fa5a0b922c6ecc
      size: 2287605
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/knn.csv
      hash: md5
      md5: 7dda620e8ae59aab14ac83c0071a8b96
      size: 1268504
  clean@sms_spam-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/logistic.csv
      -o sms_spam/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/logistic.csv
      hash: md5
      md5: 7094b26a582820cc1f88512573ce8c25
      size: 3430438
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/logistic.csv
      hash: md5
      md5: 1f89cfa87c87f195079e49eb5d6e7ce5
      size: 2461824
  clean@truthseeker-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/logistic.csv
      -o truthseeker/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/logistic.csv
      hash: md5
      md5: 5c01852f352ac96150fb36c2df9bcbbf
      size: 1648856
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/logistic.csv
      hash: md5
      md5: 9710addb440069a5ea884d90ed4c394a
      size: 1237939
  clean@truthseeker-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/knn.csv
      -o truthseeker/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/knn.csv
      hash: md5
      md5: b4ec50d98f613984be6261a059120255
      size: 1595839
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/knn.csv
      hash: md5
      md5: a0c8deb8fe7617477ec43fae2a851b4d
      size: 1191230
  clean@ddos-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/svc.csv -o
      ddos/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/svc.csv
      hash: md5
      md5: 76b35c3e1dfa2d0476a737f9a41c25c4
      size: 3771755
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/svc.csv
      hash: md5
      md5: 102b712883464d547a4d2119f6c5df60
      size: 2968961
  clean@ddos-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/logistic.csv
      -o ddos/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/logistic.csv
      hash: md5
      md5: b24764aed957fdf6d2ccb541ef490d37
      size: 3150984
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/logistic.csv
      hash: md5
      md5: bfca6e865bca11a25fa1e42dfbdea0ad
      size: 2331762
  merge_condense@ddos:
    cmd: python merge.py --big_dir ddos/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      ddos/plots/ --output_file condensed_merged.csv
    deps:
    - path: ddos/plots/clean/condense/knn.csv
      hash: md5
      md5: d214914ecfbba6afbd4ff9a61cb96bb1
      size: 3652514
    - path: ddos/plots/clean/condense/logistic.csv
      hash: md5
      md5: bfca6e865bca11a25fa1e42dfbdea0ad
      size: 2331762
    - path: ddos/plots/clean/condense/svc.csv
      hash: md5
      md5: 102b712883464d547a4d2119f6c5df60
      size: 2968961
    outs:
    - path: ddos/plots/condensed_merged.csv
      hash: md5
      md5: dc147a2e9c585b39c5e212a46ade70ac
      size: 9306964
  merge_condense@kdd_nsl:
    cmd: python merge.py --big_dir kdd_nsl/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      kdd_nsl/plots/ --output_file condensed_merged.csv
    deps:
    - path: kdd_nsl/plots/clean/condense/knn.csv
      hash: md5
      md5: 23789b08b0fd1616555611d0e7971db9
      size: 1204868
    - path: kdd_nsl/plots/clean/condense/logistic.csv
      hash: md5
      md5: 55a0ac50149a3e3d93b69c63ccd0d7a3
      size: 1174964
    - path: kdd_nsl/plots/clean/condense/svc.csv
      hash: md5
      md5: c9b2ff8546f531fa439c664c63fc06fd
      size: 2021393
    outs:
    - path: kdd_nsl/plots/condensed_merged.csv
      hash: md5
      md5: 1ddcee7de7db0c1a7d4898de4a03d7b7
      size: 4543759
  merge_condense@sms_spam:
    cmd: python merge.py --big_dir sms_spam/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      sms_spam/plots/ --output_file condensed_merged.csv
    deps:
    - path: sms_spam/plots/clean/condense/knn.csv
      hash: md5
      md5: 7dda620e8ae59aab14ac83c0071a8b96
      size: 1268504
    - path: sms_spam/plots/clean/condense/logistic.csv
      hash: md5
      md5: 1f89cfa87c87f195079e49eb5d6e7ce5
      size: 2461824
    - path: sms_spam/plots/clean/condense/svc.csv
      hash: md5
      md5: 92b8648f6759e0a56c65aeec4a15aa92
      size: 1223675
    outs:
    - path: sms_spam/plots/condensed_merged.csv
      hash: md5
      md5: 8f549743001ca622a6c7c8cbb2b3d17d
      size: 5114716
  merge_condense@truthseeker:
    cmd: python merge.py --big_dir truthseeker/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      truthseeker/plots/ --output_file condensed_merged.csv
    deps:
    - path: truthseeker/plots/clean/condense/knn.csv
      hash: md5
      md5: a0c8deb8fe7617477ec43fae2a851b4d
      size: 1191230
    - path: truthseeker/plots/clean/condense/logistic.csv
      hash: md5
      md5: 9710addb440069a5ea884d90ed4c394a
      size: 1237939
    - path: truthseeker/plots/clean/condense/svc.csv
      hash: md5
      md5: a17c0cdb6a3fbfae5bd4fcfca1938a96
      size: 1257671
    outs:
    - path: truthseeker/plots/condensed_merged.csv
      hash: md5
      md5: 738dc93bfff1b9c167949e722ee79665
      size: 3805499
  grid_search@300-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/300/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/300
      hash: md5
      md5: 1e533c118406ca2ffae2b0a3e11a5035.dir
      size: 1671182
      nfiles: 514
    - path: ddos/reports/gzip_knn/300/train/
      hash: md5
      md5: 000376454dd461f25065cdb093e78e7c.dir
      size: 1461265
      nfiles: 1403
  plot_condense@sms_spam:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: sms_spam/plots/condensed_merged.csv
      hash: md5
      md5: 8f549743001ca622a6c7c8cbb2b3d17d
      size: 5114716
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: sms_spam/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 8d3c7b03379f2f16bdb6de450083608b
      size: 40643
    - path: sms_spam/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 095622e64533aedee66d72079f141c0d
      size: 53902
    - path: sms_spam/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: da26bd3fc967c9925975f6c8ad189a88
      size: 50367
  plot_condense@ddos:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: ddos/plots/condensed_merged.csv
      hash: md5
      md5: dc147a2e9c585b39c5e212a46ade70ac
      size: 9306964
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: ddos/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 09737e6b272979bf7fc879ece10d25e5
      size: 57907
    - path: ddos/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 78e2e0111219f86d189dfb952d81cdba
      size: 78230
    - path: ddos/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: ab34ce0b71b6c0153525b0194178ecaf
      size: 64512
  plot_condense@kdd_nsl:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: kdd_nsl/plots/condensed_merged.csv
      hash: md5
      md5: 1ddcee7de7db0c1a7d4898de4a03d7b7
      size: 4543759
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: kdd_nsl/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 1c673220cd32e3f9bd2aa92516d0b20e
      size: 38546
    - path: kdd_nsl/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 4bcb086fcd47e05d2b79e30a12d15869
      size: 50187
    - path: kdd_nsl/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 2b3e91d9b656ba35d06f8e97d1e8359d
      size: 45992
  grid_search@300-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/300/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/300
      hash: md5
      md5: ace39d7825de3ce5c0d678839c812ab6.dir
      size: 1765030
      nfiles: 514
    - path: ddos/reports/gzip_logistic/300/train/
      hash: md5
      md5: 9f23532033970310bd5915d4018de935.dir
      size: 1436932
      nfiles: 963
  grid_search@300-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/300/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/300
      hash: md5
      md5: 7681421b662e0a0690e9a1a6a4cf4b79.dir
      size: 1710386
      nfiles: 514
    - path: ddos/reports/gzip_svc/300/train/
      hash: md5
      md5: c872a806e708289c65e6856bc2a057bf.dir
      size: 1393355
      nfiles: 1045
  plot_condense@truthseeker:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: truthseeker/plots/condensed_merged.csv
      hash: md5
      md5: 738dc93bfff1b9c167949e722ee79665
      size: 3805499
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: truthseeker/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 0d293f64173585cb19c88218a7327f83
      size: 18158
    - path: truthseeker/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: bb494d7b950451096bb639f3a9f1b4cb
      size: 45092
    - path: truthseeker/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 85a9eeb8f5aecc63f5634b12483941cf
      size: 39796
  grid_search@500-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/500/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/500
      hash: md5
      md5: afb6463625f139e82a88976c24b93f16.dir
      size: 1791134
      nfiles: 514
    - path: ddos/reports/gzip_logistic/500/train/
      hash: md5
      md5: dbed10dfbc2747c79e14dcedcbce0661.dir
      size: 968208
      nfiles: 702
  grid_search@500-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/500/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/500
      hash: md5
      md5: 319357234ff9123f09bb6603fe74866f.dir
      size: 1737584
      nfiles: 514
    - path: ddos/reports/gzip_svc/500/train/
      hash: md5
      md5: 63ecb36bf4e16027b60bcd2892330829.dir
      size: 897567
      nfiles: 768
  grid_search@100-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/100
      hash: md5
      md5: d1120618c5a674fe50c5717e2d71d640.dir
      size: 1554813
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/100/train/
      hash: md5
      md5: 89f61791ac36513c4957057485a2e8e3.dir
      size: 553318
      nfiles: 357
  grid_search@100-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/100
      hash: md5
      md5: cb8e4936d6ee03af99fa775d8b4b956b.dir
      size: 1483653
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/100/train/
      hash: md5
      md5: ae31535b48c489e3040a2836c43215a5.dir
      size: 543085
      nfiles: 384
  grid_search@300-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/300/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/300
      hash: md5
      md5: d3f58cbd5181a4f86ac660aba7173dfb.dir
      size: 1437824
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/300/train/
      hash: md5
      md5: d5317915e16e54a5fb4c82963cc0b058.dir
      size: 825336
      nfiles: 612
  grid_search@300-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/300
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/300/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/300
      hash: md5
      md5: 6793362a9053b6f28647bb49875ebcf3.dir
      size: 1634660
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/300/train/
      hash: md5
      md5: f2a46e55c8597a4d4082202f69186083.dir
      size: 945424
      nfiles: 723
  grid_search@300-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/300/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/300
      hash: md5
      md5: 1bd3b191acf0f78e361e1bc3cb6df928.dir
      size: 1584389
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/300/train/
      hash: md5
      md5: b6e64c8b751bf3a140aa9871f341a173.dir
      size: 899234
      nfiles: 765
  grid_search@300-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/300/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/300
      hash: md5
      md5: 09019492218a189aabe0601cb4c3f3a3.dir
      size: 1460894
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/300/train/
      hash: md5
      md5: 3aa09498a167a50051ee2fdf3e46d62d.dir
      size: 364240
      nfiles: 349
  grid_search@300-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/300
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/300/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/300
      hash: md5
      md5: 627574a996abf0037be2b9d798c0a1f6.dir
      size: 1593011
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/300/train/
      hash: md5
      md5: 886edc50f38dc580603074bf8dc46835.dir
      size: 553839
      nfiles: 363
  grid_search@300-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/300/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/300
      hash: md5
      md5: 7d9d939af4228ad75b78ee5c347a984a.dir
      size: 1513139
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/300/train/
      hash: md5
      md5: cb8713e4f13494c3c1ab3c93c238d2d7.dir
      size: 544369
      nfiles: 384
  grid_search@300-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/300/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/300
      hash: md5
      md5: 7fc2fb64903d90052db980e395a73a1b.dir
      size: 1418937
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/300/train/
      hash: md5
      md5: 1b7d0b73ddb24fa30f48675625cad64c.dir
      size: 384561
      nfiles: 332
  grid_search@300-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/300
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/300/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/300
      hash: md5
      md5: 121b624ea70d27aba89bd5448c35580f.dir
      size: 1564349
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/300/train/
      hash: md5
      md5: 7dfeff37b85b221b60c7bad442f21658.dir
      size: 557318
      nfiles: 367
  grid_search@300-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/300/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/300
      hash: md5
      md5: c1b03e3fa37ca812864d04d3a38216db.dir
      size: 1536045
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/300/train/
      hash: md5
      md5: 2cf3648372291b72f9b16020c5c3ad4e.dir
      size: 548358
      nfiles: 384
  grid_search@500-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/500/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/500
      hash: md5
      md5: ebb76a3ffe046f5763072644ec826dd9.dir
      size: 1693130
      nfiles: 514
    - path: ddos/reports/gzip_knn/500/train/
      hash: md5
      md5: 00682fbb7c897d179ed788f09be3b1e9.dir
      size: 732559
      nfiles: 763
  grid_search@500-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/500/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/500
      hash: md5
      md5: f1d5a2b6b59bc61a8c8d9c52d3a2ad11.dir
      size: 1496906
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/500/train/
      hash: md5
      md5: bffa17c78573257f1d85dccf5d93fade.dir
      size: 388686
      nfiles: 335
  grid_search@500-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/500
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/500/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/500
      hash: md5
      md5: 44795a3a64e10088623faf15b87a4548.dir
      size: 1666384
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/500/train/
      hash: md5
      md5: 607cd0515dec2502b0bd11b6480b5d7b.dir
      size: 565896
      nfiles: 357
  grid_search@500-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/500/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/500
      hash: md5
      md5: 1ed2e3d83e888471981684eaaa3f3b8e.dir
      size: 1613038
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/500/train/
      hash: md5
      md5: c53dae7497a8f55965cc708c28280f4e.dir
      size: 555797
      nfiles: 384
  grid_search@500-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/500/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/500
      hash: md5
      md5: 0e5c9c1b5970ef63e76b3adcbb1d9bde.dir
      size: 1465483
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/500/train/
      hash: md5
      md5: dd14847ddf87817f4410aea70b8fdce3.dir
      size: 378991
      nfiles: 331
  grid_search@500-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/500
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/500/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/500
      hash: md5
      md5: 6e6d0761de2d778fbdbebd1d547f04a1.dir
      size: 1619183
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/500/train/
      hash: md5
      md5: fb78d7f4f526194a09b6561a121f734e.dir
      size: 553072
      nfiles: 361
  grid_search@500-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/500/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/500
      hash: md5
      md5: 4b37a4947b8a27e8b050b76a2252f6d2.dir
      size: 1542505
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/500/train/
      hash: md5
      md5: adfaa61acf833b9b2d823fd944876030.dir
      size: 543664
      nfiles: 384
  grid_search@500-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/500/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/500
      hash: md5
      md5: 8f89bb6eee2faa7d319f0e667a455558.dir
      size: 1449788
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/500/train/
      hash: md5
      md5: 22ad9cc6a9f1fc454ff08e23e1194b6a.dir
      size: 382020
      nfiles: 333
  grid_search@500-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/500
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/500/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/500
      hash: md5
      md5: 536a09eb3f82d03737e3cec6aafdbac8.dir
      size: 1605851
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/500/train/
      hash: md5
      md5: 4560cd0abd0609eebe34c6f578d77f2d.dir
      size: 556183
      nfiles: 375
  grid_search@500-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/500/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/500
      hash: md5
      md5: 10808502e0c1c7d780ea6178ae53c19c.dir
      size: 1568093
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/500/train/
      hash: md5
      md5: 1fb9105254065d6d93e9647e12d650b2.dir
      size: 547905
      nfiles: 384
