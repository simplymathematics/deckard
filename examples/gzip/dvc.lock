schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/default/predictions.json
      hash: md5
      md5: 943e695ced6e7ba99228cc09be4c53ee
      size: 1200
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
  test_each_method@knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/knn/score_dict.json
      hash: md5
      md5: 7a2ba294ebe01af252db5bf3ddd2db29
      size: 237
  test_each_method@knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: e2f4cf1dd374dc864a3ee9b20a1f192c
      size: 239
  test_each_method@svc-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/svc/score_dict.json
      hash: md5
      md5: 05b5726bd07c98a7a416dad13be92ca4
      size: 416
  test_each_method@svc-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: 266b9228c72d8ee7139c6f80f47982e3
      size: 419
  test_each_method@medoid-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/medoid.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/medoid/score_dict.json
      hash: md5
      md5: 2d868ff8cebfbb3dd7d375420d2239ce
      size: 414
  test_each_method@medoid-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/medoid.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: 6f749b051086d9cec455814a38c87f6a
      size: 415
  test_each_method@sum-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/sum.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/sum/score_dict.json
      hash: md5
      md5: 67c070696d25fb9b0d59d2f4baf31ca5
      size: 415
  test_each_method@sum-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/sum.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: df61541994a392faa072978f709f23e3
      size: 418
  test_each_method@random-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/random.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/random/score_dict.json
      hash: md5
      md5: a8975371afdb0dfec6ad6db7b92d9996
      size: 414
  test_each_method@random-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/random.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: d276281702f1ac48c66253c438c271a8
      size: 417
  prepare_distance_matrices@0-10-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-10 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=10 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 3332d80113acf55f8e69e46aea82a1cc
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/0-10/score_dict.json
      hash: md5
      md5: cae521db2dcda14d0d3ed880c26adf62
      size: 233
  prepare_distance_matrices@0-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/0-100/score_dict.json
      hash: md5
      md5: bdfeb6c5d8f23b1306d773a1dd3a3c9a
      size: 413
  prepare_distance_matrices@0-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=0-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/0-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/0-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/0-100/score_dict.json
      hash: md5
      md5: d9d3d8cabccce498750d5120277587bd
      size: 414
  prepare_distance_matrices@0-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/0-1000/score_dict.json
      hash: md5
      md5: 028cd1c7c219a1ab11734ccaaf00c69b
      size: 411
  prepare_distance_matrices@0-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=0-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/0-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/0-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/0-1000/score_dict.json
      hash: md5
      md5: da6bebbcffadc477c16a02693f638ea5
      size: 413
  prepare_distance_matrices@0-0.8-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-0.8 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-0.8.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 09a79d92c8f88933802fdc9eac568816
      size: 414
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-0.8.npz
      hash: md5
      md5: d568e60dc42c6e6a34bef7acfe3103cd
      size: 183652
    - path: kdd_nsl/reports/train/0-0.8/score_dict.json
      hash: md5
      md5: 4490f3be4b945ad74283a190a5b4bf74
      size: 432
  prepare_distance_matrices@1-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=1-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=1 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/1-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/1-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/1-100/score_dict.json
      hash: md5
      md5: 3dc4b5354af4ed3eedfe14f4215f2ebd
      size: 414
  prepare_distance_matrices@1-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=1-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=1 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/1-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/1-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/1-100/score_dict.json
      hash: md5
      md5: 2c1b2e77d7cc221497f7a5f9c217f2ae
      size: 412
  prepare_distance_matrices@1-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=1-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=1 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/1-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/1-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/1-1000/score_dict.json
      hash: md5
      md5: f107495e753cd4f89393783688f1181d
      size: 414
  prepare_distance_matrices@1-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=1-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=1 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/1-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/1-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/1-1000/score_dict.json
      hash: md5
      md5: 9288520cc3d056b31d4e56d64205a8e3
      size: 415
  prepare_distance_matrices@2-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=2-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=2 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/2-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/2-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/2-100/score_dict.json
      hash: md5
      md5: 56dcb108bd79801bf5a1f3e0542f918c
      size: 413
  prepare_distance_matrices@2-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=2-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=2 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/2-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/2-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/2-100/score_dict.json
      hash: md5
      md5: 1c44d8feb1b902c6b13c010aac3a1849
      size: 410
  prepare_distance_matrices@2-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=2-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=2 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/2-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/2-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/2-1000/score_dict.json
      hash: md5
      md5: 8135b47ad6a936e2e4ed3863c3d85fdc
      size: 415
  prepare_distance_matrices@2-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=2-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=2 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/2-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/2-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/2-1000/score_dict.json
      hash: md5
      md5: 73f67b0c903d4cb33a6a7c146aaa8db8
      size: 414
  prepare_distance_matrices@3-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=3-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=3 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/3-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/3-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/3-100/score_dict.json
      hash: md5
      md5: 12e5e5de5b5fa65486ae222284ea96a7
      size: 412
  prepare_distance_matrices@3-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=3-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=3 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/3-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/3-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/3-100/score_dict.json
      hash: md5
      md5: e26ad1594de85e5e24e199f7509d0c6b
      size: 414
  prepare_distance_matrices@3-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=3-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=3 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/3-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/3-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/3-1000/score_dict.json
      hash: md5
      md5: 345bd613f13bbb6f1194962d13bb3950
      size: 417
  prepare_distance_matrices@3-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=3-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=3 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/3-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/3-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/3-1000/score_dict.json
      hash: md5
      md5: b528f8bf28c43d94c9fea0d4493bf27a
      size: 413
  prepare_distance_matrices@4-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=4-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=4 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/4-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/4-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/4-100/score_dict.json
      hash: md5
      md5: b495831eafadd892f01a4f842819f211
      size: 413
  prepare_distance_matrices@4-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=4-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=4 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/4-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/4-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/4-100/score_dict.json
      hash: md5
      md5: c1009d7661e7fd33dba1073daf1de323
      size: 410
  prepare_distance_matrices@4-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=4-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=4 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/4-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/4-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/4-1000/score_dict.json
      hash: md5
      md5: c29ed42a0083a1f04649c90d135b9ec5
      size: 414
  prepare_distance_matrices@4-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=4-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=4 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/4-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/4-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/4-1000/score_dict.json
      hash: md5
      md5: ab626d73a9581a65463fb74cf3706698
      size: 415
  prepare_distance_matrices@5-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=5-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=5 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/5-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/5-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/5-100/score_dict.json
      hash: md5
      md5: 9f8ca07fada8aa4121b47a0c97d11e3a
      size: 410
  prepare_distance_matrices@5-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=5-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=5 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/5-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/5-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/5-100/score_dict.json
      hash: md5
      md5: 08df034d7b89dcc4bdab3438590cbcde
      size: 414
  prepare_distance_matrices@5-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=5-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=5 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/5-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/5-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/5-1000/score_dict.json
      hash: md5
      md5: 98db3e006186d3844e6520180e9c9e4f
      size: 416
  prepare_distance_matrices@5-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=5-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=5 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/5-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/5-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/5-1000/score_dict.json
      hash: md5
      md5: b25e409b97b2869259c9ed71162aa025
      size: 415
  prepare_distance_matrices@6-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=6-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=6 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/6-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/6-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/6-100/score_dict.json
      hash: md5
      md5: 919c5479a19c2dd3dfee656cc8f9e821
      size: 414
  prepare_distance_matrices@6-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=6-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=6 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/6-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/6-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/6-100/score_dict.json
      hash: md5
      md5: 211065f13f035ae99329a458782dc8ef
      size: 413
  prepare_distance_matrices@6-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=6-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=6 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/6-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/6-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/6-1000/score_dict.json
      hash: md5
      md5: 90cdbbdb1c0983d0240e17ef3d0f6b33
      size: 417
  prepare_distance_matrices@6-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=6-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=6 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/6-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/6-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/6-1000/score_dict.json
      hash: md5
      md5: b4034a85fcc60592ae4ecfd7f6277908
      size: 404
  prepare_distance_matrices@7-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=7-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=7 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/7-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/7-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/7-100/score_dict.json
      hash: md5
      md5: bfe3a3dae643a630301928a500d604f1
      size: 412
  prepare_distance_matrices@7-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=7-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=7 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/7-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/7-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/7-100/score_dict.json
      hash: md5
      md5: 37a45b2da213b9c0eb4e38d29dbc9820
      size: 409
  prepare_distance_matrices@7-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=7-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=7 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/7-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/7-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/7-1000/score_dict.json
      hash: md5
      md5: 198c19feb728f014b8d48dcc4f357224
      size: 413
  prepare_distance_matrices@7-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=7-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=7 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/7-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/7-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/7-1000/score_dict.json
      hash: md5
      md5: 7defb3630e3fe7d994f38ccbaaa45722
      size: 415
  prepare_distance_matrices@8-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=8-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=8 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/8-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/8-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/8-100/score_dict.json
      hash: md5
      md5: cdc9fa2cbde99e3d152ec364d27c5c4f
      size: 413
  prepare_distance_matrices@8-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=8-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=8 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/8-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/8-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/8-100/score_dict.json
      hash: md5
      md5: 9d114ea90026094dcd6a5aed14f98626
      size: 411
  prepare_distance_matrices@8-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=8-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=8 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/8-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/8-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/8-1000/score_dict.json
      hash: md5
      md5: f222551eee9820fcc2d0492c250b15c1
      size: 416
  prepare_distance_matrices@8-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=8-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=8 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/8-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/8-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/8-1000/score_dict.json
      hash: md5
      md5: 184fc122ac4dd91bf75735e4e66b0e12
      size: 415
  prepare_distance_matrices@9-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=9-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=9 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/9-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/9-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/9-100/score_dict.json
      hash: md5
      md5: aca27d6c01c3b093ab2b1e00853aaa79
      size: 413
  prepare_distance_matrices@9-100-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=9-100 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=9 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/9-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/9-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: truthseeker/reports/train/9-100/score_dict.json
      hash: md5
      md5: d7f4c4e589d2089df4e741ca4a426c16
      size: 413
  prepare_distance_matrices@9-1000-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=9-1000 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=9 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/9-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/9-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: kdd_nsl/reports/train/9-1000/score_dict.json
      hash: md5
      md5: 8378aa58cdb0c191e355fc128f14aef8
      size: 416
  prepare_distance_matrices@9-1000-truthseeker:
    cmd: python -m deckard.layers.optimise  files.name=9-1000 stage=train  data=truthseeker
      dataset=truthseeker data.sample.random_state=9 data.sample.train_size=1000 dataset=kdd_nsl
      files.directory=truthseeker model_name=gzip_classifier model=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/gzip/9-1000.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/gzip/9-1000.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/9-1000/score_dict.json
      hash: md5
      md5: d5e71937a8137488fdc578738bdafc4b
      size: 416
  model_optimise_k@kdd_nsl-gzip_classifier:
    cmd: 'python -m deckard.layers.optimise stage=train data.sample.random_state=0,1,2,3,4,5,6,7,8,9
      data.sample.train_size=100,1000,3000 dataset=kdd_nsl  data=kdd_nsl  model=gzip_classifier  model_name=gzip_classifier  model.init.k=1,3,5,7
      files.directory=kdd_nsl hydra.sweep.dir=kdd_nsl/logs/k/gzip_classifier  hydra.sweeper.study_name=gzip_classifier_kdd_nsl_k  hydra.sweeper.n_trials=120  --multirun '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        dataset: kdd_nsl
        model_name: gzip_classifier
      conf/default.yaml:
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/k/gzip_classifier
      hash: md5
      md5: 893ba37920a6eb8a49ca675e7a81f3d4.dir
      size: 1700902
      nfiles: 481
  model_optimise_k@truthseeker-gzip_classifier:
    cmd: 'python -m deckard.layers.optimise stage=train data.sample.random_state=0,1,2,3,4,5,6,7,8,9
      data.sample.train_size=100,1000,3000 dataset=truthseeker  data=truthseeker  model=gzip_classifier  model_name=gzip_classifier  model.init.k=1,3,5,7
      files.directory=truthseeker hydra.sweep.dir=truthseeker/logs/k/gzip_classifier  hydra.sweeper.study_name=gzip_classifier_truthseeker_k  hydra.sweeper.n_trials=120  --multirun '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        dataset: kdd_nsl
        model_name: gzip_classifier
      conf/default.yaml:
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/k/gzip_classifier
      hash: md5
      md5: 5580eb737035babcf06dd30d90206b91.dir
      size: 1710554
      nfiles: 481
  find_best_k@kdd_nsl-gzip_classifier:
    cmd: python -m deckard.layers.find_best  --params_file best_k_gzip_classifier_kdd_nsl  --config_folder
      conf --default_config default.yaml --study_name gzip_classifier_kdd_nsl_k --config_subdir
      model   --study_csv kdd_nsl/reports/summaries/gzip_classifier_kdd_nsl.csv   --study_name=gzip_classifier_kdd_nsl_k
      --storage_name=sqlite:///optuna.db
    deps:
    - path: kdd_nsl/logs/k/gzip_classifier
      hash: md5
      md5: 893ba37920a6eb8a49ca675e7a81f3d4.dir
      size: 1700902
      nfiles: 481
    params:
      params.yaml:
        dataset: kdd_nsl
        model_name: gzip_classifier
      conf/default.yaml:
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: conf/model/best_k_gzip_classifier_kdd_nsl.yaml
      hash: md5
      md5: 122fe8629fedf7394ff0c26cf9a5a815
      size: 474
  find_best_k@truthseeker-gzip_classifier:
    cmd: python -m deckard.layers.find_best  --params_file best_k_gzip_classifier_truthseeker  --config_folder
      conf --default_config default.yaml --study_name gzip_classifier_truthseeker_k
      --config_subdir model   --study_csv truthseeker/reports/summaries/gzip_classifier_truthseeker.csv   --study_name=gzip_classifier_truthseeker_k
      --storage_name=sqlite:///optuna.db
    deps:
    - path: truthseeker/logs/k/gzip_classifier
      hash: md5
      md5: 5580eb737035babcf06dd30d90206b91.dir
      size: 1710554
      nfiles: 481
    params:
      params.yaml:
        dataset: kdd_nsl
        model_name: gzip_classifier
      conf/default.yaml:
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: conf/model/best_k_gzip_classifier_truthseeker.yaml
      hash: md5
      md5: a24bdf6199b0815c11728cbc99d87039
      size: 474
  model_optimise_m@kdd_nsl-gzip_classifier:
    cmd: 'python -m deckard.layers.optimise   stage=train data.sample.random_state=0,1,2,3,4,5,6,7,8,9  data.sample.test_size=1000
      data=kdd_nsl  dataset=kdd_nsl model=best_k_gzip_classifier_kdd_nsl.yaml  model_name=gzip_classifier  model.init.m=10,20,50,100   model.init.method="random","svc","medoid","sum"  hydra.sweep.dir=kdd_nsl/logs/m//gzip_classifier  hydra.sweeper.n_trials=160
      hydra.sweeper.study_name=gzip_classifier_kdd_nsl_m --multirun '
    deps:
    - path: conf/model/best_k_gzip_classifier_kdd_nsl.yaml
      hash: md5
      md5: 122fe8629fedf7394ff0c26cf9a5a815
      size: 474
    - path: kdd_nsl/reports/train/medoid/score_dict.json
      hash: md5
      md5: 543c1fee5156e9a1c8d5adec52a1e8d3
      size: 413
    - path: kdd_nsl/reports/train/random/score_dict.json
      hash: md5
      md5: 638281c7ad774b6d82a1874bb0b494c2
      size: 411
    - path: kdd_nsl/reports/train/sum/score_dict.json
      hash: md5
      md5: 40349262ae4d23aba2d011a4f88b480c
      size: 412
    - path: kdd_nsl/reports/train/svc/score_dict.json
      hash: md5
      md5: eac9938c5615fffad2f6d464282907d2
      size: 413
    params:
      params.yaml:
        dataset: kdd_nsl
        model_name: gzip_classifier
      conf/default.yaml:
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/m/gzip_classifier
      hash: md5
      md5: aef98feb9bd49bdaac2e9dca14675d93.dir
      size: 2293483
      nfiles: 641
  find_best_m@kdd_nsl-gzip_classifier:
    cmd: python -m deckard.layers.find_best  --study_name gzip_classifier_kdd_nsl_m  --config_folder
      conf   --config_subdir model   --params_file best_m_gzip_classifier_kdd_nsl
      --study_csv kdd_nsl/reports/summaries/gzip_classifier_kdd_nsl.csv --storage_name=sqlite:///optuna.db
    deps:
    - path: kdd_nsl/logs/m/gzip_classifier
      hash: md5
      md5: aef98feb9bd49bdaac2e9dca14675d93.dir
      size: 2293483
      nfiles: 641
    params:
      conf/default.yaml:
        dataset: kdd_nsl
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_classifier
    outs:
    - path: conf/model/best_m_gzip_classifier_kdd_nsl.yaml
      hash: md5
      md5: 15020394a5f335475dd90d5578dd2e0c
      size: 477
  model_optimise_m@truthseeker-gzip_classifier:
    cmd: 'python -m deckard.layers.optimise   stage=train data.sample.random_state=0,1,2,3,4,5,6,7,8,9  data.sample.test_size=1000
      data=truthseeker  dataset=truthseeker model=best_k_gzip_classifier_truthseeker.yaml  model_name=gzip_classifier  model.init.m=10,20,50,100   model.init.method="random","svc","medoid","sum"  hydra.sweep.dir=truthseeker/logs/m//gzip_classifier  hydra.sweeper.n_trials=160
      hydra.sweeper.study_name=gzip_classifier_truthseeker_m --multirun '
    deps:
    - path: conf/model/best_k_gzip_classifier_truthseeker.yaml
      hash: md5
      md5: a24bdf6199b0815c11728cbc99d87039
      size: 474
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: b9279631062b0b72b763d148a9f6dd35
      size: 415
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 2efc5d3ad59cb898a320646b7fa3aacd
      size: 414
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: b0f5c0ef68a8c93f330339b3130cc702
      size: 413
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: 8b2c5ff2199f3eaf60431e65caf1f5fa
      size: 411
    params:
      params.yaml:
        dataset: kdd_nsl
        model_name: gzip_classifier
      conf/default.yaml:
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/m/gzip_classifier
      hash: md5
      md5: 9bfbd8ac3ffc7f32ecb87b12e260b845.dir
      size: 2305747
      nfiles: 641
  find_best_m@truthseeker-gzip_classifier:
    cmd: python -m deckard.layers.find_best  --study_name gzip_classifier_truthseeker_m  --config_folder
      conf   --config_subdir model   --params_file best_m_gzip_classifier_truthseeker
      --study_csv truthseeker/reports/summaries/gzip_classifier_truthseeker.csv --storage_name=sqlite:///optuna.db
    deps:
    - path: truthseeker/logs/m/gzip_classifier
      hash: md5
      md5: 9bfbd8ac3ffc7f32ecb87b12e260b845.dir
      size: 2305747
      nfiles: 641
    params:
      conf/default.yaml:
        dataset: kdd_nsl
        hydra:
          run:
            dir: ${files.directory}/logs/${stage}/
          sweep:
            dir: ${files.directory}/logs/
            subdir: ${hydra.sweeper.study_name}/${hydra.job.num}
          sweeper:
            sampler:
              _target_: optuna.samplers.GridSampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${dataset}
            storage: sqlite:///optuna.db
            n_jobs: 8
            n_trials: ???
            params:
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_classifier
    outs:
    - path: conf/model/best_m_gzip_classifier_truthseeker.yaml
      hash: md5
      md5: 0f7c5c75b792aa74957378c440dfb5d5
      size: 474
  compile@truthseeker-gzip_classifier-train:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/train  --results_file
      truthseeker/reports/train-gzip_classifier.csv
    deps:
    - path: truthseeker/reports/train/
      hash: md5
      md5: af636bc568055613cceeb49dbff53e7e.dir
      size: 490596
      nfiles: 431
    outs:
    - path: truthseeker/reports/train-gzip_classifier.csv
      hash: md5
      md5: 858a00a4384f431b67505fefc6826d92
      size: 214752
  compile@kdd_nsl-gzip_classifier-train:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/train  --results_file
      kdd_nsl/reports/train-gzip_classifier.csv
    deps:
    - path: kdd_nsl/reports/train/
      hash: md5
      md5: 21d14e88ff421db1e1f1963f29ea5478.dir
      size: 1441007
      nfiles: 836
    outs:
    - path: kdd_nsl/reports/train-gzip_classifier.csv
      hash: md5
      md5: 5540216a1c76dd487ba420fb5b33028f
      size: 500805
  clean@kdd_nsl-gzip_classifier-train:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/train-gzip_classifier.csv
      -o kdd_nsl/plots/clean_train-gzip_classifier.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/train-gzip_classifier.csv
      hash: md5
      md5: 5540216a1c76dd487ba420fb5b33028f
      size: 500805
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: kdd_nsl/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: b6dc21a8f1d57530944fbedff605775f
      size: 352434
  clean@truthseeker-gzip_classifier-train:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/train-gzip_classifier.csv
      -o truthseeker/plots/clean_train-gzip_classifier.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/train-gzip_classifier.csv
      hash: md5
      md5: 858a00a4384f431b67505fefc6826d92
      size: 214752
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: truthseeker/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: d50b81480e3b77e4ab17990c76a23d3d
      size: 151821
  plot@kdd_nsl-gzip_classifier-train:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/clean_train-gzip_classifier.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: b6dc21a8f1d57530944fbedff605775f
      size: 352434
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: kdd_nsl/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: 3463f2a8a67c0b7d16c9e43d462ee8a5
      size: 21139
    - path: kdd_nsl/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: 3ea03a085478d2b50f0666e5e78656a8
      size: 18917
    - path: kdd_nsl/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: b3b05dfe8c40f4e1c37708232631168a
      size: 20253
    - path: kdd_nsl/plots/method_vs_accuracy.pdf
      hash: md5
      md5: 14a1269073306e242316a804f3e5da81
      size: 21171
    - path: kdd_nsl/plots/method_vs_predict_time.pdf
      hash: md5
      md5: a5d6a49046f7b71a69d6068d119d374e
      size: 19324
    - path: kdd_nsl/plots/method_vs_train_time.pdf
      hash: md5
      md5: 93eefe95773efba0ce526b7dea52d7a3
      size: 20520
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 7d2f50070825abeb340bc327ea5a383a
      size: 23348
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: f767a6f7302b654191e75039282aacf7
      size: 21805
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 8a57012689d7ccf9c689dc90ed1db3aa
      size: 22421
    - path: kdd_nsl/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: cbd30bfe91175430292c7d1676ebde19
      size: 17216
    - path: kdd_nsl/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: d2c6d16788079246e88982c2b209f19a
      size: 19062
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 719d1a662276e24a98184be12ea6c603
      size: 20578
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0cdb910b34365528c5a423b01e51211f
      size: 20605
  plot@truthseeker-gzip_classifier-train:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/clean_train-gzip_classifier.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: d50b81480e3b77e4ab17990c76a23d3d
      size: 151821
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: truthseeker/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: e684b6526313bae0ee9ffbd2e2c41686
      size: 20382
    - path: truthseeker/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: fef11c1df9fa6923cd945e22a6f32123
      size: 18902
    - path: truthseeker/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: b7797d2e626f44f6b992ee20d6bd851b
      size: 19993
    - path: truthseeker/plots/method_vs_accuracy.pdf
      hash: md5
      md5: cbe4e3381847875fe8b8fe7724f56958
      size: 21054
    - path: truthseeker/plots/method_vs_predict_time.pdf
      hash: md5
      md5: 3392c7fc6634cde3780c1ed6548e2f4d
      size: 19181
    - path: truthseeker/plots/method_vs_train_time.pdf
      hash: md5
      md5: 75e206918f260fd402ea89058909b1dc
      size: 20237
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 02c8fe7080a79e9d9295353ff2da02b9
      size: 22781
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 02d9eb1efb65daf57e1739f46ba3408a
      size: 20819
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 0f77c8f67b9096fd5ea20c749e0c0d98
      size: 22210
    - path: truthseeker/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: c3abffbdda236c7cfce587dd9f19590e
      size: 17158
    - path: truthseeker/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: de75f5e72c50d0974d207e1eca2faa86
      size: 18551
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 91a53b1babf74fddda32c0b601f2e6a9
      size: 20399
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: f5e4f54bf4da83ae564dac2f63689bfd
      size: 20454
  test_symmetric_methods@true-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 71ace7fbb55a719f83dfdf4a1f8bc6ab
      size: 237
  test_symmetric_methods@true-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=truthseeker/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: truthseeker/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 46f63fffdf09aa7528f983a4dbb0c978
      size: 238
  test_symmetric_methods@false-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: a22d0352b7b764330c226f05015c703c
      size: 22599
    - path: kdd_nsl/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 18151d60f7bf60b24f05b5ea76d7756d
      size: 236
  test_symmetric_methods@false-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=truthseeker/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: a3d7509ff4ab4a4b615dfb4a5c349e88
      size: 2430609
    - path: truthseeker/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 1601f622d06a7909a496120a1332b617
      size: 238
  test_each_compressor@gzip-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/gzip.npz model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip/score_dict.json
      hash: md5
      md5: 4ad10ab169dac8e61b86704272eb9569
      size: 413
  test_each_compressor@gzip-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/gzip.npz model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip/score_dict.json
      hash: md5
      md5: f1e0892b27f5667ea32e7bab97fec532
      size: 419
  test_each_compressor@lzma-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=lzma files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/lzma.npz model.init.compressor=lzma  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/lzma/score_dict.json
      hash: md5
      md5: 06341c91ce0e05daaa2d3656f15c3f5a
      size: 414
  test_each_compressor@lzma-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=lzma files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/lzma.npz model.init.compressor=lzma  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/lzma/score_dict.json
      hash: md5
      md5: 817f826d73d4f63d8f493f4a0eddd42a
      size: 414
  test_each_compressor@zstd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/zstd.npz model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/zstd/score_dict.json
      hash: md5
      md5: 090615ec96f73531242e6f86c261aadb
      size: 412
  test_each_compressor@zstd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/zstd.npz model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/zstd/score_dict.json
      hash: md5
      md5: 81726c6f57c7d76aab41d69527fc5883
      size: 418
  test_each_compressor@pkl-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/pkl.npz model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/pkl/score_dict.json
      hash: md5
      md5: 0ff564c2f1b83e58e00c3de499ce507c
      size: 414
  test_each_compressor@pkl-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/pkl.npz model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/pkl/score_dict.json
      hash: md5
      md5: c0098c8dfb6b22f8ff982f95c614dd67
      size: 420
  test_each_compressor@bz2-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/bz2.npz model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/bz2/score_dict.json
      hash: md5
      md5: 4d7a4c6a6908b089d67da1dbe272fb46
      size: 412
  test_each_compressor@bz2-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_classifier/None/bz2.npz model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/bz2/score_dict.json
      hash: md5
      md5: ae06fabdb07756f21ee1b1f5cf7b559b
      size: 416
  test_each_precompute@True-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/True.npz
      +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: bb7c920dcd4ffd585aae42076a95adc1
      size: 413
  test_each_precompute@True-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/True.npz
      +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: b77cb59e130d1e146ecd4b21e0d712f9
      size: 419
  test_each_precompute@False-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/False.npz
      +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 2e860766dc183ec26858a9d417d6c67e
      size: 415
  test_each_precompute@False-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/False.npz
      +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 5dca587042db8c415cd3da18999d81fa
      size: 414
  test_each_precompute@ball_tree-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_ball_tree
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/ball_tree.npz
      +model.init.precompute=ball_tree  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_ball_tree/score_dict.json
      hash: md5
      md5: b5a2ac6a3cccd471796cd308959bce9e
      size: 414
  test_each_precompute@ball_tree-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_ball_tree
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/ball_tree.npz
      +model.init.precompute=ball_tree  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_ball_tree/score_dict.json
      hash: md5
      md5: 6c564e875ec7ce659e33909033c3a7f5
      size: 415
  test_each_precompute@kd_tree-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_kd_tree
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/kd_tree.npz
      +model.init.precompute=kd_tree  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_kd_tree/score_dict.json
      hash: md5
      md5: 172aae526bea98314733e5f0daabf2b7
      size: 416
  test_each_precompute@kd_tree-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_kd_tree
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/kd_tree.npz
      +model.init.precompute=kd_tree  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_kd_tree/score_dict.json
      hash: md5
      md5: 8b07dc4f2affc8140acfe04214f8730c
      size: 413
  test_each_precompute@brute-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_brute
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_classifier/None/brute.npz
      +model.init.precompute=brute  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_brute/score_dict.json
      hash: md5
      md5: eb5cc1c2a2f9c7073d83f7914bd27226
      size: 416
  test_each_precompute@brute-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_brute
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_classifier/None/brute.npz
      +model.init.precompute=brute  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    - path: params.yaml
      hash: md5
      md5: 9826aaa2fd8ed16a97382f148dc7492d
      size: 2357
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_brute/score_dict.json
      hash: md5
      md5: 631a47ce8734f947d82125e076cfaf4f
      size: 414
  test_each_metric@levenshtein-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 995eb773200cc4d39f19823fe3453761
      size: 415
  test_each_metric@levenshtein-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 3076917b6416002b6cf3d6d3bd3aeb0c
      size: 421
  test_each_metric@ratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/ratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ratio/score_dict.json
      hash: md5
      md5: 7efabac8da55b740418c99564436f06d
      size: 414
  test_each_metric@ratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/ratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ratio/score_dict.json
      hash: md5
      md5: e16da604ced6755ca59a1efeedbde1e7
      size: 420
  test_each_metric@hamming-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/hamming.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/hamming/score_dict.json
      hash: md5
      md5: b99d44d1659d4abda3600fc99638dc51
      size: 413
  test_each_metric@hamming-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/hamming.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/hamming/score_dict.json
      hash: md5
      md5: 6b2006dd0afcd126b30942140dec32e4
      size: 418
  test_each_metric@jaro-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/jaro.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro/score_dict.json
      hash: md5
      md5: 938c162bf8e974c758ea43fa710da720
      size: 412
  test_each_metric@jaro-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/jaro.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro/score_dict.json
      hash: md5
      md5: be3bd7fdc6311c65be389283f17618d9
      size: 420
  test_each_metric@jaro_winkler-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: fc74d025e67f07fb49a3ceb6a973be78
      size: 413
  test_each_metric@jaro_winkler-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 2792b79117cdca4eb216abbe8d0bd28c
      size: 420
  test_each_metric@seqratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/seqratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 78556e32b563914fc2675acd53b8f142
      size: 415
  test_each_metric@seqratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/seqratio.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/seqratio/score_dict.json
      hash: md5
      md5: cdfccdfc91972a40e71797ebe6738e75
      size: 418
  test_each_metric@ncd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_classifier
      model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ncd/ncd.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ncd/score_dict.json
      hash: md5
      md5: 35774c773ba08904a0534f076ce0d922
      size: 414
  test_each_metric@ncd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_classifier
      model.init.distance_matrix=truthseeker/model/gzip_classifier/ncd/ncd.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ncd/score_dict.json
      hash: md5
      md5: 1d52b2e7168fea7fa95300fa1cda7ce4
      size: 418
  grid_search_compressors@0-100-kdd_nsl-gzip:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0
      model.init.method=random,svc,medoid,sum,knn model.init.m=10,20,50,100,200,500,1000
      model.init.compressor=gzip hydra.sweep.dir=kdd_nsl/logs/compressor/gzip  --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 2113f21540c42931dc798705140315fe
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
  grid_search_compressors@0-100-kdd_nsl-lzma:
    cmd: python -m deckard.layers.optimise  files.name=0-100-lzma stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/lzma/0-100.npz
      model.init.method=random,svc,medoid,sum,knn model.init.m=10,20,50,100,200,500,1000
      model.init.compressor=lzma --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 2113f21540c42931dc798705140315fe
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/lzma/0-100.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: kdd_nsl/reports/train/0-100-lzma/score_dict.json
      hash: md5
      md5: d5ad2e09daab9e1468a154463a14e04d
      size: 418
  grid_search_compressors@0-0.8-kdd_nsl-gzip-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=gzip
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-0.8_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/gzip hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-0.8_symmetric_true.npz
      hash: md5
      md5: d568e60dc42c6e6a34bef7acfe3103cd
      size: 183652
  grid_search_compressors@0-0.8-kdd_nsl-gzip-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=gzip
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-0.8_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/gzip hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-0.8_symmetric_false.npz
      hash: md5
      md5: a7449855e64010dbbf6408cb2e527c20
      size: 48902416
  grid_search_compressors@0-0.8-kdd_nsl-lzma-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=lzma
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/lzma/0-0.8_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/lzma hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/lzma/0-0.8_symmetric_true.npz
      hash: md5
      md5: d568e60dc42c6e6a34bef7acfe3103cd
      size: 183652
  grid_search_compressors@0-0.8-kdd_nsl-zstd-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=zstd
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/zstd/0-0.8_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/zstd hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/zstd/0-0.8_symmetric_true.npz
      hash: md5
      md5: d568e60dc42c6e6a34bef7acfe3103cd
      size: 183652
  grid_search_compressors@0-0.8-kdd_nsl-zstd-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=zstd
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/zstd/0-0.8_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/zstd hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/zstd/0-0.8_symmetric_false.npz
      hash: md5
      md5: fa68a7ee3fb233ddeb771cd30b099a7e
      size: 50305023
  grid_search_compressors@0-0.8-kdd_nsl-pkl-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=pkl model.init.m=-1
      model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/pkl/0-0.8_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/pkl hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/pkl/0-0.8_symmetric_true.npz
      hash: md5
      md5: d568e60dc42c6e6a34bef7acfe3103cd
      size: 183652
  grid_search_compressors@0-0.8-kdd_nsl-pkl-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=pkl model.init.m=-1
      model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/pkl/0-0.8_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/pkl hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/pkl/0-0.8_symmetric_false.npz
      hash: md5
      md5: 674908d65700a57b16109c01070025bb
      size: 4664671
  grid_search_compressors@0-0.8-kdd_nsl-bz2-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=bz2 model.init.m=-1
      model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/bz2/0-0.8_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/bz2 hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/bz2/0-0.8_symmetric_true.npz
      hash: md5
      md5: d568e60dc42c6e6a34bef7acfe3103cd
      size: 183652
  grid_search_compressors@0-0.8-kdd_nsl-bz2-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=0.8 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=bz2 model.init.m=-1
      model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/bz2/0-0.8_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/bz2 hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-0.8-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/bz2/0-0.8_symmetric_false.npz
      hash: md5
      md5: 1dc34dfc68ebd4bc3dad2987fa7d53d1
      size: 45621947
  grid_search_compressors@0-4000-kdd_nsl-gzip-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=4000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=gzip
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-4000_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/gzip hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-4000-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-4000_symmetric_true.npz
      hash: md5
      md5: 428c743829b7111885a1a57c01af9b95
      size: 124637
  grid_search_compressors@0-4000-kdd_nsl-gzip-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=4000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=gzip
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-4000_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/gzip hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-4000-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-4000_symmetric_false.npz
      hash: md5
      md5: d2eb13fb157a0e3458e232b6adec1b78
      size: 32886878
  grid_search_compressors@0-4000-kdd_nsl-zstd-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=4000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=zstd
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/zstd/0-4000_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/zstd hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-4000-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/zstd/0-4000_symmetric_true.npz
      hash: md5
      md5: 428c743829b7111885a1a57c01af9b95
      size: 124637
  grid_search_compressors@0-4000-kdd_nsl-zstd-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=4000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=zstd
      model.init.m=-1 model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/zstd/0-4000_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/zstd hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-4000-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/zstd/0-4000_symmetric_false.npz
      hash: md5
      md5: 4ee5fdc4696df3a5ffe3806d4294c1ee
      size: 33364592
  grid_search_compressors@0-4000-kdd_nsl-pkl-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=4000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=pkl model.init.m=-1
      model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/pkl/0-4000_symmetric_true.npz
      model.init.symmetric=true hydra.sweep.dir=kdd_nsl/logs/compressor/pkl hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-4000-true
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/pkl/0-4000_symmetric_true.npz
      hash: md5
      md5: 428c743829b7111885a1a57c01af9b95
      size: 124637
  grid_search_compressors@0-4000-kdd_nsl-pkl-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=4000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.compressor=pkl model.init.m=-1
      model.init.method=random 
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/pkl/0-4000_symmetric_false.npz
      model.init.symmetric=false hydra.sweep.dir=kdd_nsl/logs/compressor/pkl hydra.sweeper.study_name=gzip_classifier_kdd_nsl_compressors
      hydra.sweep.subdir=0-4000-false
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/pkl/0-4000_symmetric_false.npz
      hash: md5
      md5: 2b374366985ad343ef92073d5398914f
      size: 930742
  grid_search_metrics@0-1000-kdd_nsl-levenshtein-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.m=-1 model.init.method=random
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/levenshtein/0-1000_symmetric_true.npz
      model.init.symmetric=true model.init.metric=levenshtein hydra.sweep.dir=kdd_nsl/logs/metrics/levenshtein
      hydra.sweep.subdir=0-1000-true hydra.sweeper.study_name=gzip_classifier_kdd_nsl_metrics
      --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/levenshtein/0-1000_symmetric_true.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
  grid_search_metrics@0-1000-kdd_nsl-levenshtein-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.m=-1 model.init.method=random
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/levenshtein/0-1000_symmetric_false.npz
      model.init.symmetric=false model.init.metric=levenshtein hydra.sweep.dir=kdd_nsl/logs/metrics/levenshtein
      hydra.sweep.subdir=0-1000-false hydra.sweeper.study_name=gzip_classifier_kdd_nsl_metrics
      --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/levenshtein/0-1000_symmetric_false.npz
      hash: md5
      md5: 7ef011c6a883fd0df6e187e8e6ab46fc
      size: 1578392
  grid_search_metrics@0-1000-kdd_nsl-ratio-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.m=-1 model.init.method=random
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ratio/0-1000_symmetric_true.npz
      model.init.symmetric=true model.init.metric=ratio hydra.sweep.dir=kdd_nsl/logs/metrics/ratio
      hydra.sweep.subdir=0-1000-true hydra.sweeper.study_name=gzip_classifier_kdd_nsl_metrics
      --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/ratio/0-1000_symmetric_true.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
  grid_search_metrics@0-1000-kdd_nsl-ratio-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.m=-1 model.init.method=random
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/ratio/0-1000_symmetric_false.npz
      model.init.symmetric=false model.init.metric=ratio hydra.sweep.dir=kdd_nsl/logs/metrics/ratio
      hydra.sweep.subdir=0-1000-false hydra.sweeper.study_name=gzip_classifier_kdd_nsl_metrics
      --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/ratio/0-1000_symmetric_false.npz
      hash: md5
      md5: 098d32975da10b66c57f62b6796e6b26
      size: 3370759
  grid_search_metrics@0-1000-kdd_nsl-hamming-true-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.m=-1 model.init.method=random
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/hamming/0-1000_symmetric_true.npz
      model.init.symmetric=true model.init.metric=hamming hydra.sweep.dir=kdd_nsl/logs/metrics/hamming
      hydra.sweep.subdir=0-1000-true hydra.sweeper.study_name=gzip_classifier_kdd_nsl_metrics
      --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/hamming/0-1000_symmetric_true.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
  grid_search_metrics@0-1000-kdd_nsl-hamming-false-gzip_classifier:
    cmd: python -m deckard.layers.optimise  stage=train  data=kdd_nsl dataset=kdd_nsl
      data.sample.random_state=0 data.sample.train_size=1000 dataset=kdd_nsl files.directory=kdd_nsl
      model_name=gzip_classifier model=gzip_classifier model.init.m=-1 model.init.method=random
      ++model.init.distance_matrix=kdd_nsl/model/gzip_classifier/hamming/0-1000_symmetric_false.npz
      model.init.symmetric=false model.init.metric=hamming hydra.sweep.dir=kdd_nsl/logs/metrics/hamming
      hydra.sweep.subdir=0-1000-false hydra.sweeper.study_name=gzip_classifier_kdd_nsl_metrics
      --multirun
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f841c7dcd361e9a78ac387be42842a81
      size: 415
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: true
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/hamming/0-1000_symmetric_false.npz
      hash: md5
      md5: 97064f92a22c92603baff3757dcbb62b
      size: 1677067
  grid_search@0-1000-kdd_nsl-metrics:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=1000 data.sample.test_size=100 model_name=metrics model.init.distance_matrix=null
      hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256 --multirun --config-name
      metrics
    deps:
    - path: conf/metrics.yaml
      hash: md5
      md5: 4f91f9172fa15365439f1b98801e90cd
      size: 1454
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/metrics.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.metric: levenshtein,ratio,hamming,jaro,jaro_winkler
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/metrics_1000_0
      hash: md5
      md5: e02d9e0fe5d934657e2f2d2e8a507c4a.dir
      size: 3748821
      nfiles: 1025
  grid_search@0-1000-kdd_nsl-compressors:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=1000 data.sample.test_size=100 model_name=compressors
      model.init.distance_matrix=null hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256
      --multirun --config-name compressors
    deps:
    - path: conf/compressors.yaml
      hash: md5
      md5: 892b877f50d912f61c7e542e9e35ee8a
      size: 1432
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/compressors.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/compressors_1000_0
      hash: md5
      md5: 4dec3c95e1d4bdca93ec5d7330381df6.dir
      size: 3664913
      nfiles: 1025
  grid_search@0-1000-kdd_nsl-sklearn_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=1000 data.sample.test_size=100 model_name=sklearn_knn
      model.init.distance_matrix=null hydra.sweeper.n_jobs=1 hydra.sweeper.n_trials=100
      --multirun --config-name sklearn_knn
    deps:
    - path: conf/sklearn_knn.yaml
      hash: md5
      md5: 95af120c5b2ce6c86abffa0a1988b073
      size: 1423
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/sklearn_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              ++model.init.precompute: True,False
              model.init.method: random,svc,medoid,sum
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: kdd_nsl/logs/sklearn_knn_1000_0
      hash: md5
      md5: 30b0edaebd4bcdf803751aa447fa694e.dir
      size: 1445373
      nfiles: 401
  grid_search@0-1000-truthseeker-metrics:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=1000 data.sample.test_size=100 model_name=metrics model.init.distance_matrix=null
      hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256 --multirun --config-name
      metrics
    deps:
    - path: conf/metrics.yaml
      hash: md5
      md5: 4f91f9172fa15365439f1b98801e90cd
      size: 1454
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/metrics.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.metric: levenshtein,ratio,hamming,jaro,jaro_winkler
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: truthseeker/logs/metrics_1000_0
      hash: md5
      md5: 273d57541b42426d42a11262e384af7b.dir
      size: 3113905
      nfiles: 1025
  grid_search@0-1000-truthseeker-compressors:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=1000 data.sample.test_size=100 model_name=compressors
      model.init.distance_matrix=null hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256
      --multirun --config-name compressors
    deps:
    - path: conf/compressors.yaml
      hash: md5
      md5: 892b877f50d912f61c7e542e9e35ee8a
      size: 1432
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/compressors.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: truthseeker/logs/compressors_1000_0
      hash: md5
      md5: d70e6e7107e68b8825843597fc72ff43.dir
      size: 3162604
      nfiles: 1025
  grid_search@0-1000-truthseeker-sklearn_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=1000 data.sample.test_size=100 model_name=sklearn_knn
      model.init.distance_matrix=null hydra.sweeper.n_jobs=1 hydra.sweeper.n_trials=100
      --multirun --config-name sklearn_knn
    deps:
    - path: conf/sklearn_knn.yaml
      hash: md5
      md5: 95af120c5b2ce6c86abffa0a1988b073
      size: 1423
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/sklearn_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              ++model.init.precompute: True,False
              model.init.method: random,svc,medoid,sum
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: -1
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: truthseeker/logs/sklearn_knn_1000_0
      hash: md5
      md5: 52c9b47d1ab6f2363c52da702597a828.dir
      size: 1225890
      nfiles: 401
  copy@kdd_nsl:
    cmd: 'rm -rf ~/Gzip-KNN/figs/kdd_nsl/ && mkdir -p ~/Gzip-KNN/figs/kdd_nsl/ &&
      cp -r kdd_nsl/plots/* ~/Gzip-KNN/figs/kdd_nsl/ '
    deps:
    - path: kdd_nsl/plots/
      hash: md5
      md5: c9d7f04255bbdec02be260a3483218c4.dir
      size: 656941
      nfiles: 16
  copy@truthseeker:
    cmd: 'rm -rf ~/Gzip-KNN/figs/truthseeker/ && mkdir -p ~/Gzip-KNN/figs/truthseeker/
      && cp -r truthseeker/plots/* ~/Gzip-KNN/figs/truthseeker/ '
    deps:
    - path: truthseeker/plots/
      hash: md5
      md5: b07a31aa4d560c8e1c5af6a4ffc2829e.dir
      size: 452789
      nfiles: 16
  test_symmetric_methods@true-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=sms_spam/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: f6d6ffda64767062bdff87547e20fc07
      size: 7995
    - path: sms_spam/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: c167c853d7f08c9a3de265cb555373e1
      size: 419
  test_symmetric_methods@false-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=sms_spam/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: 66eac51de7ae13c11073dfd7ed17e6dc
      size: 2366630
    - path: sms_spam/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 4838545563b0032689465ffcc914d191
      size: 419
  test_each_method@knn-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/knn.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/knn/score_dict.json
      hash: md5
      md5: d0188714d017feeb45b1a2c1064a09bd
      size: 416
  test_each_method@svc-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/svc.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/svc/score_dict.json
      hash: md5
      md5: ef5c71dbd138d8271249d8ed24c50a64
      size: 417
  test_each_method@medoid-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/medoid.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/medoid/score_dict.json
      hash: md5
      md5: a3864107083231d9746d926e2588ce87
      size: 415
  test_each_method@sum-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/sum.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/sum/score_dict.json
      hash: md5
      md5: 2242e2b71579e19b93f6f3c0943f8ce5
      size: 417
  test_each_method@random-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/random.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/random/score_dict.json
      hash: md5
      md5: aaaadc767d602b387f4c91a9aa3cfb15
      size: 418
  test_each_compressor@gzip-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/gzip.npz model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip/score_dict.json
      hash: md5
      md5: a0eb5794d01f7e6b96608a979a30c248
      size: 417
  test_each_compressor@zstd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/zstd.npz model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/zstd/score_dict.json
      hash: md5
      md5: 72bb00acefcd2367e0278b8c44f645fd
      size: 417
  test_each_compressor@pkl-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/pkl.npz model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/pkl/score_dict.json
      hash: md5
      md5: 2de2d28f669d5bb3d86b4104f9f4d7d6
      size: 417
  test_each_compressor@bz2-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_classifier/None/bz2.npz model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/bz2/score_dict.json
      hash: md5
      md5: 5b052d4aeb3f106c63cd63a735caf5c7
      size: 416
  test_each_precompute@True-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_classifier/None/True.npz
      +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 0b3fc1dcdff418c38d69c80ff80411ec
      size: 415
  test_each_precompute@False-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_classifier/None/False.npz
      +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 3240a3bc3efdc4005ff0108608917b1c
      size: 418
  test_symmetric_methods@true-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_classifier model.init.symmetric=true model.init.distance_matrix=ddos/model/gzip_classifier/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_classifier/None/symmetric_true.npz
      hash: md5
      md5: 681e0517e2970e5864701a9a583c2799
      size: 306
    - path: ddos/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 2297f7f462f412f49177e3ef4068b26c
      size: 396
  test_symmetric_methods@false-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_classifier model.init.symmetric=false model.init.distance_matrix=ddos/model/gzip_classifier/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_classifier/None/symmetric_false.npz
      hash: md5
      md5: b207888c7a36c10c445e53d515852945
      size: 31491
    - path: ddos/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 7430aa63e789ab760a03279d84cd88c2
      size: 415
  test_each_method@knn-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=knn  model.init.m=10  files.name=knn
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/knn.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/knn/score_dict.json
      hash: md5
      md5: 3beee67b2184512bce568ae47809bcaf
      size: 414
  test_each_method@svc-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=svc  model.init.m=10  files.name=svc
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/svc.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/svc/score_dict.json
      hash: md5
      md5: 67f5c4765413f43d2008c339ffb42565
      size: 413
  test_each_method@medoid-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=medoid  model.init.m=10  files.name=medoid
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/medoid.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/medoid/score_dict.json
      hash: md5
      md5: a5c64250d470cc514d9c10ecd64409c0
      size: 413
  test_each_method@sum-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=sum  model.init.m=10  files.name=sum
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/sum.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/sum/score_dict.json
      hash: md5
      md5: 65d59f9e0b9c369a0ef05c6a5a5495d7
      size: 412
  test_each_method@random-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random  model.init.m=10  files.name=random
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/None/random.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/random/score_dict.json
      hash: md5
      md5: 9676666addb7d0c69beb0178ede542b6
      size: 415
  test_each_compressor@gzip-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip/score_dict.json
      hash: md5
      md5: 7633a41700e400362d6a64c931ff8e07
      size: 416
  test_each_compressor@zstd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/zstd/score_dict.json
      hash: md5
      md5: 205f4b0671830411132658576aa739e7
      size: 414
  test_each_compressor@pkl-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/pkl/score_dict.json
      hash: md5
      md5: f4c5fbda7cfc8080c29d988547f5ea19
      size: 414
  test_each_compressor@bz2-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random model.init.distance_matrix=ddos/model/gzip_classifier/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/bz2/score_dict.json
      hash: md5
      md5: 0cbf6432a131a6b795dd94a50b452edf
      size: 415
  test_each_precompute@True-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_classifier/None/True.npz +model.init.precompute=True  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 47ef3241b139b5de723cdb22d1d7bb25
      size: 416
  test_each_precompute@False-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_classifier/None/False.npz +model.init.precompute=False  model.init.m=10  ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 563b25775e03207004a179f84f7d24f7
      size: 397
  test_each_metric@levenshtein-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 1343652ea6934fb02c4df0f297f77879
      size: 413
  test_each_metric@levenshtein-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 0a9f019d840ce378c5d0c13b57519011
      size: 413
  test_each_metric@ratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/ratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ratio/score_dict.json
      hash: md5
      md5: 9c153323b8ceffdcc65e6b3b93c1a630
      size: 412
  test_each_metric@ratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/ratio.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ratio/score_dict.json
      hash: md5
      md5: 0cbb981501728d780a91024532796e6b
      size: 414
  test_each_metric@hamming-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/hamming.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/hamming/score_dict.json
      hash: md5
      md5: ac5f31be2523172e7509a0e277cb9b31
      size: 415
  test_each_metric@hamming-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/hamming.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/hamming/score_dict.json
      hash: md5
      md5: 9dc097bfd66660e7998c2c486ac8daa3
      size: 416
  test_each_metric@jaro-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/jaro.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro/score_dict.json
      hash: md5
      md5: 6a3bc5b998924d210a89958fbf0b1421
      size: 415
  test_each_metric@jaro-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/jaro.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro/score_dict.json
      hash: md5
      md5: 0f54ad977acb567552e9255fbc45be6d
      size: 410
  test_each_metric@jaro_winkler-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 7a3d8dbdcff7e835873fada55216a2b1
      size: 415
  test_each_metric@jaro_winkler-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 1b652dd1916ef5b8f245f9a60f01cdad
      size: 412
  test_each_metric@seqratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/seqratio.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/seqratio/score_dict.json
      hash: md5
      md5: ec2bb0f4dd95aa0deb2f3440f5464674
      size: 414
  test_each_metric@seqratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/seqratio.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 4d2f8b2f6ead37695dc17a30aaec30a5
      size: 413
  test_each_metric@ncd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_classifier
      model.init.distance_matrix=sms_spam/model/gzip_classifier/ncd/ncd.npz hydra.sweeper.n_jobs=1
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ncd/score_dict.json
      hash: md5
      md5: 7947285d67402b008a7fcf3997c39f7d
      size: 416
  test_each_metric@ncd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ncd  files.name=ncd
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_classifier model.init.distance_matrix=ddos/model/gzip_classifier/ncd/ncd.npz
      hydra.sweeper.n_jobs=1 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: d81b04077355e4922d606a4a7113e8b1
      size: 410
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          generate:
            name: raw_data/kdd_nsl.csv
            target: label
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            generate:
              name: raw_data/kdd_nsl.csv
              target: label
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipClassifier
            symmetric: false
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ncd/score_dict.json
      hash: md5
      md5: 4558bf79b48988ee4593781a881c6ce1
      size: 415
  grid_search@0-1000-sms_spam-metrics:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=1000 data.sample.test_size=100 model_name=metrics model.init.distance_matrix=null
      hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256 --multirun --config-name
      metrics
    deps:
    - path: conf/metrics.yaml
      hash: md5
      md5: 4f91f9172fa15365439f1b98801e90cd
      size: 1454
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/metrics.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.metric: levenshtein,ratio,hamming,jaro,jaro_winkler
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: sms_spam/logs/metrics_1000_0
      hash: md5
      md5: 13d30d5137ca1fa0de970be288580b65.dir
      size: 3120080
      nfiles: 1025
  grid_search@0-1000-sms_spam-compressors:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=1000 data.sample.test_size=100 model_name=compressors
      model.init.distance_matrix=null hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256
      --multirun --config-name compressors
    deps:
    - path: conf/compressors.yaml
      hash: md5
      md5: 892b877f50d912f61c7e542e9e35ee8a
      size: 1432
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/compressors.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: sms_spam/logs/compressors_1000_0
      hash: md5
      md5: a1a6742b26eecf32c66d067c7a7fadf4.dir
      size: 3131018
      nfiles: 1025
  grid_search@0-1000-ddos-metrics:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=1000
      data.sample.test_size=100 model_name=metrics model.init.distance_matrix=null
      hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256 --multirun --config-name
      metrics
    deps:
    - path: conf/metrics.yaml
      hash: md5
      md5: 4f91f9172fa15365439f1b98801e90cd
      size: 1454
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/metrics.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.metric: levenshtein,ratio,hamming,jaro,jaro_winkler
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: ddos/logs/metrics_1000_0
      hash: md5
      md5: e888661db03389400b97eecaf5f688c5.dir
      size: 3140120
      nfiles: 1025
  compile@ddos-gzip_classifier-train:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/train  --results_file
      ddos/reports/train-gzip_classifier.csv
    deps:
    - path: ddos/reports/train/
      hash: md5
      md5: 45e3a08d483101856961d1f25c3f8f45.dir
      size: 134588
      nfiles: 116
    outs:
    - path: ddos/reports/train-gzip_classifier.csv
      hash: md5
      md5: 2dfdbab8354618ef445ea9af1e106829
      size: 54116
  clean@ddos-gzip_classifier-train:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/train-gzip_classifier.csv
      -o ddos/plots/clean_train-gzip_classifier.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/train-gzip_classifier.csv
      hash: md5
      md5: 2dfdbab8354618ef445ea9af1e106829
      size: 54116
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: ddos/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: 2ec1661b125af94979397c3bbfd679ad
      size: 40690
  compile@sms_spam-gzip_classifier-train:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/train  --results_file
      sms_spam/reports/train-gzip_classifier.csv
    deps:
    - path: sms_spam/reports/train/
      hash: md5
      md5: a92b6cd7f0ac55c3198a84a7362dc13a.dir
      size: 907571
      nfiles: 676
    outs:
    - path: sms_spam/reports/train-gzip_classifier.csv
      hash: md5
      md5: a7cf247cc9b08eccf891fb254c448af2
      size: 337383
  clean@sms_spam-gzip_classifier-train:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/train-gzip_classifier.csv
      -o sms_spam/plots/clean_train-gzip_classifier.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/train-gzip_classifier.csv
      hash: md5
      md5: a7cf247cc9b08eccf891fb254c448af2
      size: 337383
    params:
      conf/clean.yaml:
        fillna:
          model.init.compressor: None
          model.init.metric: ncd
          model.init.method: random
          model.init.m: -1
        params:
          control:
            data.sample.train_size: 100
          defaults:
            model.init.m: -1
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
          model.init.method:
            svc: SVC
            knn: KNN
            medoid: Medoid
            sum: Sum
            random: Random
          model.init.compressor:
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
          model.init.m:
            '-1': '1000'
    outs:
    - path: sms_spam/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: a880ba3446bcc418d541bd77db7aa6c4
      size: 212903
  plot@sms_spam-gzip_classifier-train:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/clean_train-gzip_classifier.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: a880ba3446bcc418d541bd77db7aa6c4
      size: 212903
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: sms_spam/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: 45fe19368bb3d3045d21491c4ed15566
      size: 20515
    - path: sms_spam/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: 2097cdffd3f66e1a0aa71f60ec92df46
      size: 18819
    - path: sms_spam/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: 5e79fefc3c6ec880d5f2ef64daf11793
      size: 20148
    - path: sms_spam/plots/method_vs_accuracy.pdf
      hash: md5
      md5: 55e70043d596373fd0438426e252cf17
      size: 21102
    - path: sms_spam/plots/method_vs_predict_time.pdf
      hash: md5
      md5: 1f1274ea292ff442537a58795dccf516
      size: 19338
    - path: sms_spam/plots/method_vs_train_time.pdf
      hash: md5
      md5: 0766c7d0a8d35537401898d2e309e72c
      size: 20528
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: f481b6bd7058bec18eb870d948d6d5d7
      size: 23183
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: ac3a09b82775ea30a6339d5782c173b5
      size: 21252
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 32de265db17531e2128538a4ced7322a
      size: 21806
    - path: sms_spam/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: 139ca3e8a58528c9d76fd58e3f0b2d72
      size: 17161
    - path: sms_spam/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: f8088920529b187c3ea9769dc27e5413
      size: 18575
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 5ffef8be0b623f82ee6d7965444a7e25
      size: 20523
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 7c238d114d538457ab410449f1c109b0
      size: 19794
  copy@sms_spam:
    cmd: 'rm -rf ~/Gzip-KNN/figs/sms_spam/ && mkdir -p ~/Gzip-KNN/figs/sms_spam/ &&
      cp -r sms_spam/plots/* ~/Gzip-KNN/figs/sms_spam/ '
    deps:
    - path: sms_spam/plots/
      hash: md5
      md5: 98e750261cac08ca5347587540455c62.dir
      size: 512756
      nfiles: 16
  plot@ddos-gzip_classifier-train:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/clean_train-gzip_classifier.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/clean_train-gzip_classifier.csv
      hash: md5
      md5: 2ec1661b125af94979397c3bbfd679ad
      size: 40690
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_compressor.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Accuracy
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: symmetric_vs_compressor_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.compressor
          errorbar: se
          kind: bar
          titles:
          xlabels: Assume Symmetric
          ylabels: Training Time (s)
          legend_title: Compressors
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: left center
          set:
            yscale: log
        line_plot:
        - file: method_vs_accuracy.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_accuracy.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
        - file: method_vs_train_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_train_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlabel: $m$-best Samples
          y: train_time
          ylabel: Training Time (s)
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          xlim:
          - 10
          - 500
          errorbar: se
          err_style: bars
          y_scale: log
        - file: method_vs_predict_time.pdf
          hue: model.init.method
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          hue_order:
          - Random
          - Sum
          - Medoid
          - SVC
          - KNN
          xlim:
          - 10
          - 500
          y_scale: log
          legend:
            title: Methods
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: model.init.m
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - NCD
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: compressor_vs_predict_time.pdf
          hue: model.init.compressor
          title:
          x: model.init.m
          xlim:
          - 10
          - 500
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          legend:
            title: Compressors
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          errorbar: se
          err_style: bars
    outs:
    - path: ddos/plots/compressor_vs_accuracy.pdf
      hash: md5
      md5: 7d6faade69932720587cc5e8664ef1a6
      size: 20128
    - path: ddos/plots/compressor_vs_predict_time.pdf
      hash: md5
      md5: 7b5a5957015f9bdf895e5bd9fb60bab8
      size: 18634
    - path: ddos/plots/compressor_vs_train_time.pdf
      hash: md5
      md5: 2546fdf65df7d163c70d54951f349bd3
      size: 19895
    - path: ddos/plots/method_vs_accuracy.pdf
      hash: md5
      md5: 0044ae95e85cd07289f83fa8ed4e307a
      size: 20777
    - path: ddos/plots/method_vs_predict_time.pdf
      hash: md5
      md5: e708eca48126ba89614b62a532075ba3
      size: 18948
    - path: ddos/plots/method_vs_train_time.pdf
      hash: md5
      md5: 8c89ee8bb5e41a5ad81fd684d77168bc
      size: 19530
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 5d62790502dcdc9e5735564a82c2c697
      size: 22587
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: cf5a1f6bbcd304f5c9a21f5b742788ef
      size: 20582
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 4a06ba816f72cb04d1e15e8472011aeb
      size: 21484
    - path: ddos/plots/symmetric_vs_compressor.pdf
      hash: md5
      md5: 2828afd6bf680df702abbae7615cdc1c
      size: 16992
    - path: ddos/plots/symmetric_vs_compressor_train_time.pdf
      hash: md5
      md5: 5862ca5b6a3351ba40873d5811704d0e
      size: 18323
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 6336e460aa351695bf92d5eabbbc30f9
      size: 20152
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: a95ee62e422d0ff7dadd7d65bffa5e28
      size: 19752
  copy@ddos:
    cmd: 'rm -rf ~/Gzip-KNN/figs/ddos/ && mkdir -p ~/Gzip-KNN/figs/ddos/ && cp -r
      ddos/plots/* ~/Gzip-KNN/figs/ddos/ '
    deps:
    - path: ddos/plots/
      hash: md5
      md5: 586a257a3b513df7aa16a773250e54d2.dir
      size: 335186
      nfiles: 16
  grid_search@0-1000-ddos-compressors:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=1000
      data.sample.test_size=100 model_name=compressors model.init.distance_matrix=null
      hydra.sweeper.n_jobs=32 hydra.sweeper.n_trials=256 --multirun --config-name
      compressors
    deps:
    - path: conf/compressors.yaml
      hash: md5
      md5: 892b877f50d912f61c7e542e9e35ee8a
      size: 1432
    - path: params.yaml
      hash: md5
      md5: 874fd10b7db83da0c6fe548e110f3b5f
      size: 2108
    params:
      conf/compressors.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ${dataset}/logs/${hydra.sweeper.study_name}/
            subdir: ${hydra.job.id}
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${model_name}_${data.sample.train_size}_${data.sample.random_state}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              model.init.k: 1,3,5,7,11
              model.init.m: 10,20,50,100,200,500
              model.init.symmetric: True,False
              model.init.compressor: gzip,zstd,pkl,bz2
              model.init.method: random,svc,medoid,sum,knn
              model_name: ${model_name}
            direction: ${direction}
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 16
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: n_jobs
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: ???
    outs:
    - path: ddos/logs/compressors_1000_0
      hash: md5
      md5: 3953b5179d9efa67d6927504060ac8de.dir
      size: 3121987
      nfiles: 1025
