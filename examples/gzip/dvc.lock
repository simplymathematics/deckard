schema: '2.0'
stages:
  train:
    cmd: python -m deckard.layers.experiment train
    deps:
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    - path: raw_data/
      hash: md5
      md5: 33d46673e0631bef98be9e8991ed1ed1.dir
      size: 50328647
      nfiles: 8
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/default/predictions.json
      hash: md5
      md5: 986d2f0abe9b96253b196a222a550609
      size: 702
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 28a66df15b858d73e5c93b40d316ce35
      size: 485
  test_each_method@knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=10  files.name=knn
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/knn
      hash: md5
      md5: f902bdd8882aa06bba0d1fef19c4a313.dir
      size: 11613
      nfiles: 4
    - path: kdd_nsl/reports/train/knn/score_dict.json
      hash: md5
      md5: 4e7f0750779df5202e5dec6228f94f99
      size: 490
  test_each_method@knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=10  files.name=knn
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/knn
      hash: md5
      md5: 5a52da2681ff444c53a1623722c2d431.dir
      size: 11642
      nfiles: 4
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: f09f746efa5c7a56f4dd1a3e20a7ab6b
      size: 485
  test_each_method@svc-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=10  files.name=svc
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/svc
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/svc
      hash: md5
      md5: 433b30d37ba64e71527ac2d837b44fa2.dir
      size: 11612
      nfiles: 4
    - path: kdd_nsl/reports/train/svc/score_dict.json
      hash: md5
      md5: f41538adb6ffa9182ea126c85c353abf
      size: 489
  test_each_method@svc-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=10  files.name=svc
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/svc
      hash: md5
      md5: bc37655235ef0d2919a62c85456d379c.dir
      size: 11645
      nfiles: 4
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: 97f1fed3ee2887773ca9a50eeeb5b1ed
      size: 488
  test_each_method@medoid-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=10  files.name=medoid
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/medoid
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/medoid
      hash: md5
      md5: 5b972c1f6a8c4ebff94a088e2be12b28.dir
      size: 11661
      nfiles: 4
    - path: kdd_nsl/reports/train/medoid/score_dict.json
      hash: md5
      md5: 10a0913632dea0d6717263ba1854b1e2
      size: 484
  test_each_method@medoid-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=10  files.name=medoid
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=medoid
      hydra.run.dir=truthseeker/logs/method/medoid ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/medoid
      hash: md5
      md5: 7b6fef8487e5b8dec0f76f4b4fc59ccb.dir
      size: 10226
      nfiles: 4
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: 8cebb3ee0098d2ee2bb4130e346e8e0f
      size: 282
  test_each_method@sum-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=10  files.name=sum
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/sum
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/sum
      hash: md5
      md5: 41cd7632a1d85e7380d14b0e8eccc819.dir
      size: 11607
      nfiles: 4
    - path: kdd_nsl/reports/train/sum/score_dict.json
      hash: md5
      md5: 2a97e468ea2e9071e1f7d5bdb1e7495b
      size: 484
  test_each_method@sum-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=10  files.name=sum
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=sum
      hydra.run.dir=truthseeker/logs/method/sum ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/sum
      hash: md5
      md5: e7f9741f777d98f3d3416264b9f3e6b2.dir
      size: 10164
      nfiles: 4
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: d49a3cbdeb348bbf9ad3b59e9e8e0e32
      size: 283
  test_each_method@random-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=10  files.name=random
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn hydra.run.dir=kdd_nsl/logs/method/random
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/method/random
      hash: md5
      md5: 723e8c93428a09edb21943a20fca5c3c.dir
      size: 11639
      nfiles: 4
    - path: kdd_nsl/reports/train/random/score_dict.json
      hash: md5
      md5: ed402e68904e8888b8ba6b0bebf6fa05
      size: 488
  test_each_method@random-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=10  files.name=random
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      hydra.run.dir=truthseeker/logs/method/random ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: f8a4019adc566855c2a704a0311ff7c4
      size: 489
    - path: params.yaml
      hash: md5
      md5: f6a5538a55c3c37d8a2d6d1d4eb95ec2
      size: 1467
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/random
      hash: md5
      md5: f785fe50b4007a169c37e6e9cb856268.dir
      size: 11670
      nfiles: 4
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 8bfb4b2efa55e9944cec7331401762f9
      size: 485
  prepare_distance_matrices@0-10-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-10 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=10 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 3332d80113acf55f8e69e46aea82a1cc
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: 
              https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix: kdd_nsl/model/gzip_classifier/gzip/0-100.npz
            k: 1
            m: -1
            method:
            name: gzip_classifier.GzipClassifier
          library: sklearn
        model_name: gzip_classifier
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_classifier/gzip/0-10.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/0-10/score_dict.json
      hash: md5
      md5: cae521db2dcda14d0d3ed880c26adf62
      size: 233
  prepare_distance_matrices@0-100-kdd_nsl:
    cmd: python -m deckard.layers.optimise  files.name=0-100 stage=train  data=kdd_nsl
      dataset=kdd_nsl data.sample.random_state=0 data.sample.train_size=100 dataset=kdd_nsl
      files.directory=kdd_nsl model_name=gzip_classifier model=gzip_classifier model.init.distance_matrix=kdd_nsl/model/gzip_classifier/gzip/0-100.npz
      model.init.method=random  model.init.m=100 ++raise_exception=True
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 222b4b55b1b16639ce30218bf60c1f32
      size: 412
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: 
            https://gist.githubusercontent.com/simplymathematics/8c6c04bd151950d5ea9e62825db97fdd/raw/d6a22cdb42a1db624c89f0298cb4f654d3812703/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
  data:
    cmd: python data_prep.py
    deps:
    - path: data_prep.py
      hash: md5
      md5: 18244c921ed2d7cbf25b8362b3ca33aa
      size: 5146
    outs:
    - path: raw_data/
      hash: md5
      md5: 33d46673e0631bef98be9e8991ed1ed1.dir
      size: 50328647
      nfiles: 8
  test_symmetric_methods@true-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_knn model.init.symmetric=true hydra.run.dir=kdd_nsl/logs/symmetric/true
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: kdd_nsl/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: bb10a010ac3f8790cdbe4310288efc63
      size: 432
  test_symmetric_methods@true-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_knn model.init.symmetric=true hydra.run.dir=truthseeker/logs/symmetric/true
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/symmetric_true.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: f71a2727e708fdfb7867a6983f3aa8cf
      size: 223
    - path: truthseeker/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 6d7a4eb01733e4e2fda1c40b5562646c
      size: 434
  test_symmetric_methods@true-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_knn model.init.symmetric=true hydra.run.dir=sms_spam/logs/symmetric/true
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: sms_spam/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 0b8d690ffca7173942d490a2f0cbeec4
      size: 432
  test_symmetric_methods@true-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_true files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_knn model.init.symmetric=true hydra.run.dir=ddos/logs/symmetric/true
      model.init.distance_matrix=ddos/model/gzip_knn/None/symmetric_true.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_knn/None/symmetric_true.npz
      hash: md5
      md5: 1b745ff8dbc88f247f3245d9efd6de7e
      size: 208
    - path: ddos/reports/train/symmetric_true/score_dict.json
      hash: md5
      md5: 2c12176f8bf7355f284e059b2527cf44
      size: 418
  test_symmetric_methods@false-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=kdd_nsl data=kdd_nsl
      dataset=kdd_nsl model_name=gzip_knn model.init.symmetric=false hydra.run.dir=kdd_nsl/logs/symmetric/false
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/symmetric_false.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: 9a9fcf9ba5dbc34eb2ca1f203088fc47
      size: 740
    - path: kdd_nsl/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 8ae56e642565330a37e731472a6c2d76
      size: 429
  test_symmetric_methods@false-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=gzip_knn model.init.symmetric=false hydra.run.dir=truthseeker/logs/symmetric/false
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: b02cc76ddfb10d1e0e63e0f6e05cdaae
      size: 1791
    - path: truthseeker/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 4ef36cb0b198d778dc8e0e6ff282d778
      size: 433
  test_symmetric_methods@false-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=sms_spam data=sms_spam
      dataset=sms_spam model_name=gzip_knn model.init.symmetric=false hydra.run.dir=sms_spam/logs/symmetric/false
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/symmetric_false.npz
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: ac71e5af3607731b783a490caf81c37f
      size: 694
    - path: sms_spam/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: 66d92f0ed630b08fbddb1a9c07f13981
      size: 432
  test_symmetric_methods@false-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.method=random
      model.init.m=10  files.name=symmetric_false files.directory=ddos data=ddos dataset=ddos
      model_name=gzip_knn model.init.symmetric=false hydra.run.dir=ddos/logs/symmetric/false
      model.init.distance_matrix=ddos/model/gzip_knn/None/symmetric_false.npz ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    - path: raw_data/
      hash: md5
      md5: d897229dd67895957a0a4330ce95b09a.dir
      size: 42279674
      nfiles: 4
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/model/gzip_knn/None/symmetric_false.npz
      hash: md5
      md5: 0d3f08d9c6cb8ddc6d3e68f8208c9bc5
      size: 821
    - path: ddos/reports/train/symmetric_false/score_dict.json
      hash: md5
      md5: ba81be29d56943d6d573597c93ba8081
      size: 412
  test_each_compressor@gzip-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/gzip
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/gzip/score_dict.json
      hash: md5
      md5: b3f76b5e7fe68821d9336c4968888b08
      size: 431
  test_each_compressor@gzip-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/gzip.npz model.init.compressor=gzip  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/gzip ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/gzip/score_dict.json
      hash: md5
      md5: df9b8a302dfb3b85b5c3c7623d86383e
      size: 434
  test_each_compressor@gzip-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/gzip.npz model.init.compressor=gzip  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/gzip ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/gzip/score_dict.json
      hash: md5
      md5: 39a6710366ed557259ef981fc0b45a6a
      size: 432
  test_each_compressor@gzip-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=gzip files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/gzip.npz
      model.init.compressor=gzip  model.init.m=10 hydra.run.dir=ddos/logs/compressor/gzip
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/gzip/score_dict.json
      hash: md5
      md5: 1919cb29d6196b8dd14c01458e341a6b
      size: 414
  test_each_compressor@zstd-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/zstd
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/zstd/score_dict.json
      hash: md5
      md5: 868509c201cbb0093818357427896da7
      size: 416
  test_each_compressor@zstd-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/zstd.npz model.init.compressor=zstd  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/zstd ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/zstd/score_dict.json
      hash: md5
      md5: 89546ca3a3510fd73671341863c69cb9
      size: 434
  test_each_compressor@zstd-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/zstd.npz model.init.compressor=zstd  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/zstd ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/zstd/score_dict.json
      hash: md5
      md5: e5a10b0013b032b22dd6cc596a7810bb
      size: 429
  test_each_compressor@zstd-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=zstd files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/zstd.npz
      model.init.compressor=zstd  model.init.m=10 hydra.run.dir=ddos/logs/compressor/zstd
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/zstd/score_dict.json
      hash: md5
      md5: 898feb287504053c9de9c1a809733c4b
      size: 432
  test_each_compressor@pkl-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/pkl
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/pkl/score_dict.json
      hash: md5
      md5: 3e01c227095014ab9f4665ea98e7f3b5
      size: 430
  test_each_compressor@pkl-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/pkl.npz model.init.compressor=pkl  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/pkl ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/pkl/score_dict.json
      hash: md5
      md5: 85d4598fcbe6077a465a9edeadd3843a
      size: 430
  test_each_compressor@pkl-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/pkl.npz model.init.compressor=pkl  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/pkl ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/pkl/score_dict.json
      hash: md5
      md5: a4667414e7721ee7ed489df1e412e0b0
      size: 431
  test_each_compressor@pkl-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=pkl files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/pkl.npz
      model.init.compressor=pkl  model.init.m=10 hydra.run.dir=ddos/logs/compressor/pkl
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/pkl/score_dict.json
      hash: md5
      md5: 340261dd836239b846699c4c687b3042
      size: 432
  test_each_compressor@bz2-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=kdd_nsl
      data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10 hydra.run.dir=kdd_nsl/logs/compressor/bz2
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/bz2/score_dict.json
      hash: md5
      md5: 05fd4b45d252c648d4afb4ba3ffc05e4
      size: 430
  test_each_compressor@bz2-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=truthseeker
      data=truthseeker dataset=truthseeker model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=truthseeker/model/gzip_knn/None/bz2.npz model.init.compressor=bz2  model.init.m=10
      hydra.run.dir=truthseeker/logs/compressor/bz2 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/bz2/score_dict.json
      hash: md5
      md5: 1b3094ea4075cb1b5b8cd3f74bf0c3dc
      size: 432
  test_each_compressor@bz2-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=sms_spam
      data=sms_spam dataset=sms_spam model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=sms_spam/model/gzip_knn/None/bz2.npz model.init.compressor=bz2  model.init.m=10
      hydra.run.dir=sms_spam/logs/compressor/bz2 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/bz2/score_dict.json
      hash: md5
      md5: 45303b7d052fb91e65c9f3ad97999b6a
      size: 431
  test_each_compressor@bz2-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=bz2 files.directory=ddos
      data=ddos dataset=ddos model_name=gzip_knn model.init.method=random model.init.distance_matrix=ddos/model/gzip_knn/None/bz2.npz
      model.init.compressor=bz2  model.init.m=10 hydra.run.dir=ddos/logs/compressor/bz2
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/bz2/score_dict.json
      hash: md5
      md5: fdfa470b2053f561dea2e047423b54cd
      size: 431
  test_each_precompute@True-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/True.npz +model.init.precompute=True  model.init.m=10  hydra.run.dir=kdd_nsl/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: f5c9a9ce41a0680f1e18874d6f21bd25
      size: 433
  test_each_precompute@True-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_knn/None/True.npz
      +model.init.precompute=True  model.init.m=10  hydra.run.dir=truthseeker/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 76dcdbf7dc1fb63ce7b978c2f6bef8a2
      size: 435
  test_each_precompute@True-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_knn/None/True.npz
      +model.init.precompute=True  model.init.m=10  hydra.run.dir=sms_spam/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: fe9a23520513840fe4a90fb8413e62da
      size: 432
  test_each_precompute@True-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_True
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_knn/None/True.npz +model.init.precompute=True  model.init.m=10  hydra.run.dir=ddos/logs/precompute/True
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_True/score_dict.json
      hash: md5
      md5: 0d72c99dc99df13629a383ca9745712e
      size: 429
  test_each_precompute@False-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=kdd_nsl/model/gzip_knn/None/False.npz +model.init.precompute=False  model.init.m=10  hydra.run.dir=kdd_nsl/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: d225ea006c02f56f552431e223ef6576
      size: 429
  test_each_precompute@False-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=truthseeker/model/gzip_knn/None/False.npz
      +model.init.precompute=False  model.init.m=10  hydra.run.dir=truthseeker/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: e8094fb43b55432d298346a0a291ac71
      size: 431
  test_each_precompute@False-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.method=random model.init.distance_matrix=sms_spam/model/gzip_knn/None/False.npz
      +model.init.precompute=False  model.init.m=10  hydra.run.dir=sms_spam/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 0f3b13aba3cc817f2327769f36b54939
      size: 432
  test_each_precompute@False-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  files.name=precompute_False
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.method=random
      model.init.distance_matrix=ddos/model/gzip_knn/None/False.npz +model.init.precompute=False  model.init.m=10  hydra.run.dir=ddos/logs/precompute/False
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/precompute_False/score_dict.json
      hash: md5
      md5: 9cc47f921a908ad81e486980d134f453
      size: 418
  test_each_metric@levenshtein-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=kdd_nsl/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 4f517489b794c13bbbbb477bd7b14ea8
      size: 248
  test_each_metric@levenshtein-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/levenshtein.npz hydra.sweeper.n_jobs=1
      hydra.run.dir=truthseeker/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 2f0fa43167cde43c2d8c901ee6bc360d
      size: 250
  test_each_metric@levenshtein-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/levenshtein.npz hydra.sweeper.n_jobs=1
      hydra.run.dir=sms_spam/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: bb8456e5a2457e841619d5750922bd0c
      size: 246
  test_each_metric@levenshtein-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=levenshtein  files.name=levenshtein
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/levenshtein.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=ddos/logs/metric/levenshtein ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/levenshtein/score_dict.json
      hash: md5
      md5: 1956a0651292bf6919a103e46c0c5906
      size: 248
  test_each_metric@ratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/ratio.npz
      hydra.sweeper.n_jobs=1 hydra.run.dir=kdd_nsl/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/ratio/score_dict.json
      hash: md5
      md5: 841058c500666af10a3a84fd7769e53d
      size: 244
  test_each_metric@ratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/ratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/ratio/score_dict.json
      hash: md5
      md5: 5cbc24c928a073a9459428d4e1984ba1
      size: 426
  test_each_metric@ratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/ratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/ratio/score_dict.json
      hash: md5
      md5: b8ea7bf8de9af2250f1a2c84695be1f9
      size: 425
  test_each_metric@ratio-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=ratio  files.name=ratio
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/ratio.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/ratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/ratio/score_dict.json
      hash: md5
      md5: 5f9750a5729db8f4912f50a8610fc48c
      size: 429
  test_each_metric@hamming-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/hamming.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/hamming/score_dict.json
      hash: md5
      md5: ed699605a76c4116a461994f139da237
      size: 429
  test_each_metric@hamming-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/hamming.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/hamming/score_dict.json
      hash: md5
      md5: 8a3f87734f208a61bc27114729fd4fd6
      size: 432
  test_each_metric@hamming-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/hamming.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/hamming/score_dict.json
      hash: md5
      md5: 0c0988090568dc526d0137ff7e38ca6a
      size: 428
  test_each_metric@hamming-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=hamming  files.name=hamming
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/hamming.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/hamming ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/hamming/score_dict.json
      hash: md5
      md5: 949f7ea27f2521fbbb2b05ec3a111346
      size: 428
  test_each_metric@jaro-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/jaro.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro/score_dict.json
      hash: md5
      md5: 3bd4e5c89097070d439c3f13359ff369
      size: 428
  test_each_metric@jaro-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/jaro.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro/score_dict.json
      hash: md5
      md5: b86d70f18ea7ee85132f4d8407058d60
      size: 429
  test_each_metric@jaro-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/jaro.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro/score_dict.json
      hash: md5
      md5: b7550248d10852d10a16610f707ea50f
      size: 429
  test_each_metric@jaro-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro  files.name=jaro
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/jaro.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/jaro ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro/score_dict.json
      hash: md5
      md5: e7987cb2d248f7eaa20a842bbcacc442
      size: 430
  test_each_metric@jaro_winkler-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: a44e09663d05f8330352712ccfd72f17
      size: 428
  test_each_metric@jaro_winkler-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/jaro_winkler.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 2a80298804f36bc7af477e11ff9f6679
      size: 428
  test_each_metric@jaro_winkler-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/jaro_winkler.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: 8b7d0f92e14d74042fb8cd907e3a8274
      size: 430
  test_each_metric@jaro_winkler-ddos:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=jaro_winkler  files.name=jaro_winkler
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model.init.distance_matrix=ddos/model/gzip_knn/ncd/jaro_winkler.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=ddos/logs/metric/jaro_winkler ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/reports/train/jaro_winkler/score_dict.json
      hash: md5
      md5: aa4130c79130ddbaaebaa35a1cae7d91
      size: 426
  test_each_metric@seqratio-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model.init.distance_matrix=kdd_nsl/model/gzip_knn/ncd/seqratio.npz
      hydra.sweeper.n_jobs=8 hydra.run.dir=kdd_nsl/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/reports/train/seqratio/score_dict.json
      hash: md5
      md5: 9075115a02136aaa59bd87074589ce42
      size: 430
  test_each_metric@seqratio-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model.init.distance_matrix=truthseeker/model/gzip_knn/ncd/seqratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=truthseeker/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/reports/train/seqratio/score_dict.json
      hash: md5
      md5: ac2bdff9261ce4c9e511294dd69b19f8
      size: 434
  test_each_metric@seqratio-sms_spam:
    cmd: 'python -m deckard.layers.optimise  stage=train  model.init.metric=seqratio  files.name=seqratio
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model.init.distance_matrix=sms_spam/model/gzip_knn/ncd/seqratio.npz hydra.sweeper.n_jobs=8
      hydra.run.dir=sms_spam/logs/metric/seqratio ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 14173762472fe294a1d3228b4ee83d4b
      size: 431
    - path: params.yaml
      hash: md5
      md5: 4999b48c21cb63a45801003d03576594
      size: 2082
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 10
            train_size: 10
          sklearn_pipeline:
            encoder:
              handle_unknown: use_encoded_value
              name: sklearn.preprocessing.OrdinalEncoder
              unknown_value: -1
            preprocessor:
              name: sklearn.preprocessing.StandardScaler
              with_mean: true
              with_std: true
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          art:
            _target_: deckard.base.model.art_pipeline.ArtPipeline
            initialize:
              nb_classes: 2
            library: sklearn
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 10
              train_size: 10
            sklearn_pipeline:
              encoder:
                handle_unknown: use_encoded_value
                name: sklearn.preprocessing.OrdinalEncoder
                unknown_value: -1
              preprocessor:
                name: sklearn.preprocessing.StandardScaler
                with_mean: true
                with_std: true
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            compressor: gzip
            distance_matrix:
            k: 1
            m: -1
            method:
            metric: ncd
  test_each_method@ddos-random:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=3
      data.sample.train_size=100 files.name=random files.directory=ddos data=ddos
      dataset=ddos model_name=random hydra.run.dir=ddos/logs/method/random ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/random
      hash: md5
      md5: 29a986df4db8948c2ea6811b04bbdebb.dir
      size: 8943
      nfiles: 4
    - path: ddos/reports/train/random/score_dict.json
      hash: md5
      md5: b872883c62c790b4f95cb465b6764e46
      size: 485
  test_each_method@ddos-medoid:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=3
      data.sample.train_size=100 files.name=medoid files.directory=ddos data=ddos
      dataset=ddos model_name=medoid hydra.run.dir=ddos/logs/method/medoid ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/medoid
      hash: md5
      md5: 133714b5aace8be0844f1ae067b8fc88.dir
      size: 8974
      nfiles: 4
    - path: ddos/reports/train/medoid/score_dict.json
      hash: md5
      md5: 9fa569b8ca4d0ace8b86481327414340
      size: 482
  test_each_method@ddos-sum:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=3
      data.sample.train_size=100 files.name=sum files.directory=ddos data=ddos dataset=ddos
      model_name=sum hydra.run.dir=ddos/logs/method/sum ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/sum
      hash: md5
      md5: 9ad704553613244def3c71d19475de52.dir
      size: 8917
      nfiles: 4
    - path: ddos/reports/train/sum/score_dict.json
      hash: md5
      md5: 32e8e92591cdbdd9f01b7011fc8f6956
      size: 485
  test_each_method@ddos-svc:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=3
      data.sample.train_size=100 files.name=svc files.directory=ddos data=ddos dataset=ddos
      model_name=svc hydra.run.dir=ddos/logs/method/svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/svc
      hash: md5
      md5: 7c6f3e4cfed1d02a4868eb559c2f98e2.dir
      size: 8917
      nfiles: 4
    - path: ddos/reports/train/svc/score_dict.json
      hash: md5
      md5: 5f41c1a6d48486c25f5b8cbcdf9c60a1
      size: 485
  test_each_method@ddos-condensed:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=condensed  model.init.m=1
      files.name=condensed files.directory=ddos data=ddos dataset=ddos model_name=condensed
      hydra.run.dir=ddos/logs/method/condensed ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/condensed
      hash: md5
      md5: 5dfc9ebfe1c6f3e496814c86a05a5329.dir
      size: 10117
      nfiles: 4
    - path: ddos/reports/train/condensed/score_dict.json
      hash: md5
      md5: 56bcddf54558d9cdd1a7587878aceffa
      size: 284
  test_each_method@ddos-hardness:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=hardness  model.init.m=3
      data.sample.train_size=100 files.name=hardness files.directory=ddos data=ddos
      dataset=ddos model_name=hardness hydra.run.dir=ddos/logs/method/hardness ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/hardness
      hash: md5
      md5: 2009d992e93043783624a9b8c06c8224.dir
      size: 9017
      nfiles: 4
    - path: ddos/reports/train/hardness/score_dict.json
      hash: md5
      md5: 7384df7fafdf729b83b81f6e8cf2dcc1
      size: 485
  test_each_method@ddos-nearmiss:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=nearmiss  model.init.m=3
      data.sample.train_size=100 files.name=nearmiss files.directory=ddos data=ddos
      dataset=ddos model_name=nearmiss hydra.run.dir=ddos/logs/method/nearmiss ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/nearmiss
      hash: md5
      md5: 607b7a4c87f67644af483f6b8cd8bf73.dir
      size: 9017
      nfiles: 4
    - path: ddos/reports/train/nearmiss/score_dict.json
      hash: md5
      md5: eac48d691d334069383832fb917363f6
      size: 485
  test_each_method@truthseeker-svc:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=svc  model.init.m=3
      data.sample.train_size=100 files.name=svc files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=svc hydra.run.dir=truthseeker/logs/method/svc
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/svc
      hash: md5
      md5: 7f9ad95f5b5a7d8ea8a41d09560bca7e.dir
      size: 10252
      nfiles: 4
    - path: truthseeker/reports/train/svc/score_dict.json
      hash: md5
      md5: dca27d752d8d9db2b52a61d9e0d9bebf
      size: 283
  test_each_method@truthseeker-medoid:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=medoid  model.init.m=3
      data.sample.train_size=100 files.name=medoid files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=medoid hydra.run.dir=truthseeker/logs/method/medoid
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/medoid
      hash: md5
      md5: 57b1e2e154ae8653331898992d0d7f7c.dir
      size: 10316
      nfiles: 4
    - path: truthseeker/reports/train/medoid/score_dict.json
      hash: md5
      md5: a728020aeb632257e52cc9b13337870e
      size: 284
  test_each_method@truthseeker-sum:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=sum  model.init.m=3
      data.sample.train_size=100 files.name=sum files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=sum hydra.run.dir=truthseeker/logs/method/sum
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/sum
      hash: md5
      md5: b8934f0660e9e6043e5a7117d2e3d462.dir
      size: 10252
      nfiles: 4
    - path: truthseeker/reports/train/sum/score_dict.json
      hash: md5
      md5: 0a4117f35aab6ec4b41ac526f8715aa2
      size: 283
  test_each_method@truthseeker-random:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=random  model.init.m=3
      data.sample.train_size=100 files.name=random files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=random hydra.run.dir=truthseeker/logs/method/random
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/random
      hash: md5
      md5: a77f4e67f85e529063b18617cda5525a.dir
      size: 10289
      nfiles: 4
    - path: truthseeker/reports/train/random/score_dict.json
      hash: md5
      md5: 08f3cc499d61caaa4ab912af1a2ff558
      size: 283
  test_each_method@truthseeker-nearmiss:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=nearmiss  model.init.m=3
      data.sample.train_size=100 files.name=nearmiss files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=nearmiss hydra.run.dir=truthseeker/logs/method/nearmiss
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/nearmiss
      hash: md5
      md5: 6ea3f0a574d7abd052e3ee5466356e13.dir
      size: 10359
      nfiles: 4
    - path: truthseeker/reports/train/nearmiss/score_dict.json
      hash: md5
      md5: f03918d65cac7f21e210a14be8ee1373
      size: 285
  test_each_method@truthseeker-hardness:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=hardness  model.init.m=3
      data.sample.train_size=100 files.name=hardness files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=hardness hydra.run.dir=truthseeker/logs/method/hardness
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/hardness
      hash: md5
      md5: c5ea09925ae34a0fee42f1ec06d88090.dir
      size: 10355
      nfiles: 4
    - path: truthseeker/reports/train/hardness/score_dict.json
      hash: md5
      md5: 87bdbb0cafd4462b87035af79efc81c5
      size: 281
  test_each_method@truthseeker-knn:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=3
      data.sample.train_size=100 files.name=knn files.directory=truthseeker data=truthseeker
      dataset=truthseeker model_name=knn hydra.run.dir=truthseeker/logs/method/knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 064e5bb42979e36c917c538b2a7bc0cc
      size: 489
    - path: params.yaml
      hash: md5
      md5: 8e937140db56a135e97c05461c573520
      size: 1345
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/method/knn
      hash: md5
      md5: 5c5fe8f17151816b01d863f51db3d01a.dir
      size: 10254
      nfiles: 4
    - path: truthseeker/reports/train/knn/score_dict.json
      hash: md5
      md5: 4157a5deabda43d207a543b9f038b5af
      size: 285
  test_each_method@ddos-knn:
    cmd: 'python -m deckard.layers.optimise  stage=train  +model.init.sampling_method=knn  model.init.m=3
      data.sample.train_size=100 files.name=knn files.directory=ddos data=ddos dataset=ddos
      model_name=knn hydra.run.dir=ddos/logs/method/knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/method/knn
      hash: md5
      md5: 21f2fbc9dd76645ccdfee5605c66d339.dir
      size: 8916
      nfiles: 4
    - path: ddos/reports/train/knn/score_dict.json
      hash: md5
      md5: a1d6839e09a63dfdab8ea61ccc0d485b
      size: 484
  condense@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_logistic model=gzip_logistic hydra.sweeper.study_name=condense_gzip_logistic_sms_spam
      hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32 hydra.sweep.dir=sms_spam/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/study.csv
      ++data.sample.train_size='int(interval(30, 1000))' ++data.sample.random_state='int(interval(10000,
      20000))' ++data.sample.stratify=True model.init.m='tag(log, interval(.1, 1))'
      +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn files.directory=sms_spam
      files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=32 --config-name
      gzip_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: 026fca7fe5d7bb75c4a3ae245f86a2c2
      size: 332
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: int(interval(20, 1000))
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.1, 1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_logistic/
      hash: md5
      md5: 9496098bd1497b6c46124e40e665ee74.dir
      size: 14280
      nfiles: 5
    - path: sms_spam/reports/condense/gzip_logistic/
      hash: md5
      md5: c7e2a43c1dc170c3d593825f57ad0e9b.dir
      size: 2707
      nfiles: 3
  condense@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_svc model=gzip_svc hydra.sweeper.study_name=condense_gzip_svc_truthseeker
      hydra.sweeper.n_trials=1 hydra.sweeper.n_jobs=32 hydra.sweep.dir=truthseeker/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/study.csv ++data.sample.train_size='int(interval(30,
      1000))' ++data.sample.random_state='int(interval(10000, 20000))' ++data.sample.stratify=True
      model.init.m='tag(log, interval(.1, 1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=32
      --config-name gzip_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_truthseeker.yaml
      hash: md5
      md5: 97d9d5857744b1cc077513ac5a659f62
      size: 302
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: int(interval(20, 1000))
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.1, 1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_svc/
      hash: md5
      md5: bd7cbae34fd6feecf60a49cb537b0f80.dir
      size: 13751
      nfiles: 5
    - path: truthseeker/reports/condense/gzip_svc/
      hash: md5
      md5: a24584cdc3464b86b6ff88b90dc62e5e.dir
      size: 2701
      nfiles: 3
  condense@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_svc model=best_gzip_svc_sms_spam hydra.sweeper.study_name=condense_gzip_svc_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=sms_spam files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: 771cd8e3b1368f0fbb30e518002db80f
      size: 317
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_svc/
      hash: md5
      md5: c6ef4ecf2bec03894b2f2018cffc0888.dir
      size: 1597147
      nfiles: 513
    - path: sms_spam/reports/condense/gzip_svc/
      hash: md5
      md5: aff4ca5c41e7043fe0d36b4a669ad6a7.dir
      size: 344414
      nfiles: 381
  condense@ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_svc model=best_gzip_svc_ddos hydra.sweeper.study_name=condense_gzip_svc_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_svc/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_svc/ hydra.launcher.n_jobs=16
      ++raise_exception=True --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: f2ec5b2ff8103b93ca61a5b86888a3e6
      size: 305
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_svc/
      hash: md5
      md5: 98f11cc76f9f370871bfb325ec4186e4.dir
      size: 1589126
      nfiles: 513
    - path: ddos/reports/condense/gzip_svc/
      hash: md5
      md5: 87ca8778bbdb8363a1e237019c87ebf5.dir
      size: 345583
      nfiles: 384
  condense@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_sms_spam hydra.sweeper.study_name=condense_gzip_knn_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=sms_spam files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 430e2be20ddaa39808a6739627a98d77
      size: 259
    - path: sms_spam/logs/method/
      hash: md5
      md5: e8e327bbd5859a6c1c362fd482435727.dir
      size: 69377
      nfiles: 24
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/gzip_knn/
      hash: md5
      md5: a45625dcc1d1cc1f1e20d19440e1cdf1.dir
      size: 1559584
      nfiles: 513
    - path: sms_spam/reports/condense/gzip_knn/
      hash: md5
      md5: 0ac87faa8d16d77b4e7d5a96cfdde177.dir
      size: 335094
      nfiles: 384
  compile@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_knn  --results_file
      sms_spam/reports/gzip_knn.csv
    deps:
    - path: sms_spam/reports/gzip_knn/
      hash: md5
      md5: 1e4bd6f4f64ae27f0563c9f749af5844.dir
      size: 1428322
      nfiles: 1419
    outs:
    - path: sms_spam/reports/gzip_knn.csv
      hash: md5
      md5: f4e3e2a76c7a2faca4862de57bef75fd
      size: 627317
  compile@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_knn  --results_file
      truthseeker/reports/gzip_knn.csv
    deps:
    - path: truthseeker/reports/gzip_knn/
      hash: md5
      md5: e5702237f62021b85240717035b53d81.dir
      size: 1537318
      nfiles: 1325
    outs:
    - path: truthseeker/reports/gzip_knn.csv
      hash: md5
      md5: 183afe36078f60e3e478f3813b1b52a7
      size: 711959
  compile@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_knn  --results_file
      kdd_nsl/reports/gzip_knn.csv
    deps:
    - path: kdd_nsl/reports/gzip_knn/
      hash: md5
      md5: 5ae8335951f3ab0ba19d97e7fca7300e.dir
      size: 1493484
      nfiles: 1411
    outs:
    - path: kdd_nsl/reports/gzip_knn.csv
      hash: md5
      md5: ccc8afe2274d4133de9777ef19db82b0
      size: 663510
  compile@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_svc  --results_file
      truthseeker/reports/gzip_svc.csv
    deps:
    - path: truthseeker/reports/gzip_svc/
      hash: md5
      md5: e6e273bb143c7a8949d5be4acca87eb9.dir
      size: 1536370
      nfiles: 1725
    outs:
    - path: truthseeker/reports/gzip_svc.csv
      hash: md5
      md5: 746aae81f4af3c8ce4c8c7e3c3e866b1
      size: 870818
  compile@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/gzip_logistic  --results_file
      truthseeker/reports/gzip_logistic.csv
    deps:
    - path: truthseeker/reports/gzip_logistic/
      hash: md5
      md5: 5074027dccab644424973514ae7c8922.dir
      size: 2225784
      nfiles: 1473
    outs:
    - path: truthseeker/reports/gzip_logistic.csv
      hash: md5
      md5: ed858c429ea35f3dac4eca9c52e036ce
      size: 786129
  compile@ddos-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_logistic  --results_file
      ddos/reports/gzip_logistic.csv
    deps:
    - path: ddos/reports/gzip_logistic/
      hash: md5
      md5: 6349daea939a27d36ded546b54d7f930.dir
      size: 2370952
      nfiles: 1527
    outs:
    - path: ddos/reports/gzip_logistic.csv
      hash: md5
      md5: 923840c89f3b2ffa5a6b206a283d11ca
      size: 722803
  compile@ddos-gzip_knn:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_knn  --results_file
      ddos/reports/gzip_knn.csv
    deps:
    - path: ddos/reports/gzip_knn/
      hash: md5
      md5: 2803b737e4d632f8e6b3c51b20122d9e.dir
      size: 2110621
      nfiles: 2298
    outs:
    - path: ddos/reports/gzip_knn.csv
      hash: md5
      md5: 020ec9b121d87045903d2a06c407d879
      size: 1025696
  compile@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_logistic  --results_file
      kdd_nsl/reports/gzip_logistic.csv
    deps:
    - path: kdd_nsl/reports/gzip_logistic/
      hash: md5
      md5: 69899acdacb66fea2b065186b94c823f.dir
      size: 2252531
      nfiles: 1450
    outs:
    - path: kdd_nsl/reports/gzip_logistic.csv
      hash: md5
      md5: 717dc514ddfc831b201602c4b79b6481
      size: 697000
  compile@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/gzip_svc  --results_file
      kdd_nsl/reports/gzip_svc.csv
    deps:
    - path: kdd_nsl/reports/gzip_svc/
      hash: md5
      md5: 5a17f3a37936bce8f3c48742b2b8bcad.dir
      size: 2217855
      nfiles: 1533
    outs:
    - path: kdd_nsl/reports/gzip_svc.csv
      hash: md5
      md5: 49ac432e2fe12371b79c7d1f13814bb1
      size: 703910
  compile@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_logistic  --results_file
      sms_spam/reports/gzip_logistic.csv
    deps:
    - path: sms_spam/reports/gzip_logistic/
      hash: md5
      md5: 9f7db05e10754c5ecc4da28cafb2465a.dir
      size: 2207285
      nfiles: 1469
    outs:
    - path: sms_spam/reports/gzip_logistic.csv
      hash: md5
      md5: 03af493e4f340bc94e6669749f1b93fe
      size: 666006
  compile@ddos-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/gzip_svc  --results_file
      ddos/reports/gzip_svc.csv
    deps:
    - path: ddos/reports/gzip_svc/
      hash: md5
      md5: bedf50f5955fcf2a231efde77931b3e8.dir
      size: 2208783
      nfiles: 1536
    outs:
    - path: ddos/reports/gzip_svc.csv
      hash: md5
      md5: e6a761ee6e103e7b57a7251cc2b7042e
      size: 689158
  compile@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/gzip_svc  --results_file
      sms_spam/reports/gzip_svc.csv
    deps:
    - path: sms_spam/reports/gzip_svc/
      hash: md5
      md5: 659b5b78a0134f1ad10d5fa867067b74.dir
      size: 2170821
      nfiles: 1536
    outs:
    - path: sms_spam/reports/gzip_svc.csv
      hash: md5
      md5: 2e5f3b40875a790db808872c65fc73ef
      size: 664866
  clean@truthseeker-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_svc.csv
      -o truthseeker/plots/clean/gzip_svc.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_svc.csv
      hash: md5
      md5: 746aae81f4af3c8ce4c8c7e3c3e866b1
      size: 870818
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_svc.csv
      hash: md5
      md5: cdb96b7ba00dc0bf6b4c8db38311447b
      size: 679004
  clean@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_svc.csv -o kdd_nsl/plots/clean/gzip_svc.csv
      -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_svc.csv
      hash: md5
      md5: 49ac432e2fe12371b79c7d1f13814bb1
      size: 703910
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_svc.csv
      hash: md5
      md5: e0b8b895887d4d243b43274f722773f3
      size: 581625
  clean@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_knn.csv -o kdd_nsl/plots/clean/gzip_knn.csv
      -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_knn.csv
      hash: md5
      md5: ccc8afe2274d4133de9777ef19db82b0
      size: 663510
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_knn.csv
      hash: md5
      md5: 4d844c3227459afa876952f176216c33
      size: 436451
  clean@ddos-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_knn.csv -o ddos/plots/clean/gzip_knn.csv
      -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_knn.csv
      hash: md5
      md5: 020ec9b121d87045903d2a06c407d879
      size: 1025696
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_knn.csv
      hash: md5
      md5: b0b99d435ad867232db8a243ef62c051
      size: 822043
  clean@ddos-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_svc.csv -o ddos/plots/clean/gzip_svc.csv
      -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_svc.csv
      hash: md5
      md5: e6a761ee6e103e7b57a7251cc2b7042e
      size: 689158
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_svc.csv
      hash: md5
      md5: 226094721223ed497570e1addadd5efd
      size: 559957
  clean@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/gzip_logistic.csv
      -o kdd_nsl/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/gzip_logistic.csv
      hash: md5
      md5: 717dc514ddfc831b201602c4b79b6481
      size: 697000
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/gzip_logistic.csv
      hash: md5
      md5: cbc25910d449719a898903a86f443f35
      size: 504190
  clean@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_knn.csv
      -o truthseeker/plots/clean/gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_knn.csv
      hash: md5
      md5: 183afe36078f60e3e478f3813b1b52a7
      size: 711959
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_knn.csv
      hash: md5
      md5: dbbbb4c6ab13f540b1b4d9ee23d4a91a
      size: 354842
  clean@ddos-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/gzip_logistic.csv -o
      ddos/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/gzip_logistic.csv
      hash: md5
      md5: 923840c89f3b2ffa5a6b206a283d11ca
      size: 722803
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/gzip_logistic.csv
      hash: md5
      md5: ea6974bfb86de59d5cc77b5082edcff3
      size: 511437
  clean@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_knn.csv -o
      sms_spam/plots/clean/gzip_knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_knn.csv
      hash: md5
      md5: f4e3e2a76c7a2faca4862de57bef75fd
      size: 627317
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_knn.csv
      hash: md5
      md5: eeaaa80725256e5beba9c95958533e9c
      size: 417929
  clean@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_logistic.csv
      -o sms_spam/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_logistic.csv
      hash: md5
      md5: 03af493e4f340bc94e6669749f1b93fe
      size: 666006
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 280c2094c04ea09f1559217cbc3ec47f
      size: 492146
  clean@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/gzip_svc.csv -o
      sms_spam/plots/clean/gzip_svc.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/gzip_svc.csv
      hash: md5
      md5: 2e5f3b40875a790db808872c65fc73ef
      size: 664866
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/gzip_svc.csv
      hash: md5
      md5: d7cf076fa27322a406727c66c38d0f12
      size: 542023
  clean@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/gzip_logistic.csv
      -o truthseeker/plots/clean/gzip_logistic.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/gzip_logistic.csv
      hash: md5
      md5: 276fcd9d025d60418d6a92db6bee859e
      size: 748894
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 82450f3b94f517f586b35ed85b494add
      size: 417258
  copy@sms_spam:
    cmd: 'rm -rf ~/Gzip-KNN/figs/sms_spam/ && mkdir -p ~/Gzip-KNN/figs/sms_spam/ &&
      cp -r sms_spam/plots/* ~/Gzip-KNN/figs/sms_spam/ '
    deps:
    - path: sms_spam/plots/
      hash: md5
      md5: b4562b1ad06e680bf0247d4e8dab85c1.dir
      size: 10160120
      nfiles: 19
  copy@truthseeker:
    cmd: 'rm -rf ~/Gzip-KNN/figs/truthseeker/ && mkdir -p ~/Gzip-KNN/figs/truthseeker/
      && cp -r truthseeker/plots/* ~/Gzip-KNN/figs/truthseeker/ '
    deps:
    - path: truthseeker/plots/
      hash: md5
      md5: 47a062972487c796e962fa241d4bf108.dir
      size: 8761443
      nfiles: 18
  copy@kdd_nsl:
    cmd: 'rm -rf ~/Gzip-KNN/figs/kdd_nsl/ && mkdir -p ~/Gzip-KNN/figs/kdd_nsl/ &&
      cp -r kdd_nsl/plots/* ~/Gzip-KNN/figs/kdd_nsl/ '
    deps:
    - path: kdd_nsl/plots/
      hash: md5
      md5: 526bfd7a3ffd1b1cee332632d79a96f8.dir
      size: 13281984
      nfiles: 18
  copy@ddos:
    cmd: 'rm -rf ~/Gzip-KNN/figs/ddos/ && mkdir -p ~/Gzip-KNN/figs/ddos/ && cp -r
      ddos/plots/* ~/Gzip-KNN/figs/ddos/ '
    deps:
    - path: ddos/plots/
      hash: md5
      md5: 22ac4455d4f24b7a0624f5d670f81e24.dir
      size: 15551940
      nfiles: 19
  condense@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_truthseeker
      hydra.sweeper.study_name=condense_gzip_knn_truthseeker hydra.sweeper.n_trials=128
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/gzip_knn/ hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/study.csv
      model.init.m='tag(log, interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_truthseeker.yaml
      hash: md5
      md5: 79baf4709c4a5f2535059ef8d1b6a082
      size: 258
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_knn/
      hash: md5
      md5: 029aa9a618d0edd127756b0b724a1742.dir
      size: 1568426
      nfiles: 513
    - path: truthseeker/reports/condense/gzip_knn/
      hash: md5
      md5: ef4ee3a0a4c954cea9b4f557a216e421.dir
      size: 353591
      nfiles: 374
  plot@ddos-gzip_knn:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/clean_gzip_knn.csv
      hash: md5
      md5: c730af75faf35ba958b15b2da82b25be
      size: 451405
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: b8279045dcf3a1fc574578e991427e73
      size: 23629
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 1512c0c363753afc28a3c093cc8e252c
      size: 22784
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: dd17a922e53b59b2d9b2d91c1237bb54
      size: 22329
    - path: ddos/plots/models_vs_accuracy.pdf
      hash: md5
      md5: bbbc08a7161735b6174984688003809f
      size: 13970
    - path: ddos/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 9b6acd61045df87af51626be2bdff7ab
      size: 15507
    - path: ddos/plots/models_vs_train_time.pdf
      hash: md5
      md5: 6a2303b531dfc78f20d9bf3dc62d8d42
      size: 16118
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 9cd54391a16400664710c9f0589a4d5f
      size: 22044
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0397f39f681300638b6fcc7c2d4e3bda
      size: 21616
  plot@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/clean_gzip_knn.csv
      hash: md5
      md5: 1c001f5a7008b439ee4c7946998cbe25
      size: 1002255
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: a146ab8c45d548ecd6c285a40c5d49e7
      size: 23228
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 59f7befb701cf34c5bf62a78206d7867
      size: 22642
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 938036a897293cbf7dc0b4caa19a5596
      size: 22182
    - path: kdd_nsl/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 0dad2f21fc6049c3a24972a35514ee71
      size: 15035
    - path: kdd_nsl/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 4361ffb492bff25d3cde95fcdb941ced
      size: 16578
    - path: kdd_nsl/plots/models_vs_train_time.pdf
      hash: md5
      md5: 416681afbf2e0e87dcc7dfe97f0835fc
      size: 16239
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 05a28fb9adea7b847f396fdd96c37d02
      size: 22208
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 0a0a9daf98ab6efe98cb31b69cba2c65
      size: 21578
  plot@truthseeker-gzip_knn:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/clean_gzip_knn.csv
      hash: md5
      md5: ff0162ac672b57d59126b965580901d9
      size: 620009
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 3cef9a04adf0d3378d4627c1a8b097a7
      size: 23348
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: a4a5f2426ffaf289e124fb09235e374b
      size: 22838
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: cda8914da9fabcfb40ea1eb0943e28d3
      size: 22333
    - path: truthseeker/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 7ef865e460d2652c873cfe333e7a308d
      size: 15215
    - path: truthseeker/plots/models_vs_predict_time.pdf
      hash: md5
      md5: eb57bd848d231a47615e311dbd1102b1
      size: 17930
    - path: truthseeker/plots/models_vs_train_time.pdf
      hash: md5
      md5: e7bc6589ed86e8f5c3fbb5a747c652fe
      size: 17739
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 0e7c326bef4c0d835f810c67172b2698
      size: 22057
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: ce21956e382cc48f0a71ef7ccfd79751
      size: 21593
  plot@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/clean_gzip_knn.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/clean_gzip_knn.csv
      hash: md5
      md5: 13a5803849f7dfdefe18ba16b0a5010f
      size: 448070
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: train_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: predict_time
          hue: dataset
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
    outs:
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 507715814c07145dbb140b2b6714973b
      size: 23499
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 97ec5498625837c79fc02850afba09f1
      size: 22606
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: f4c9d0805ea5d0ac8e1a2210ee788d47
      size: 22104
    - path: sms_spam/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 2eb9ea23cba4e5b734565b7aacdcf43c
      size: 14146
    - path: sms_spam/plots/models_vs_predict_time.pdf
      hash: md5
      md5: b518bf6b070e7916ad71febd3d3face6
      size: 15523
    - path: sms_spam/plots/models_vs_train_time.pdf
      hash: md5
      md5: 617f20892ba643f5c47077af63ae727f
      size: 14895
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 40aa8607331327c4f667fda367defb5f
      size: 22033
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 775c0bdfc7d9524f1e63b8879ddefccd
      size: 21590
  merge@truthseeker:
    cmd: python merge.py --big_dir truthseeker/plots/ --data_file clean/gzip_knn.csv
      --little_dir_data_file clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder
      truthseeker/plots --output_file merged.csv
    deps:
    - path: truthseeker/plots/clean/gzip_knn.csv
      hash: md5
      md5: 1f46e4b3afd875ee11939b23bd1c0852
      size: 560551
    - path: truthseeker/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 82450f3b94f517f586b35ed85b494add
      size: 417258
    - path: truthseeker/plots/clean/gzip_svc.csv
      hash: md5
      md5: cdb96b7ba00dc0bf6b4c8db38311447b
      size: 679004
    outs:
    - path: truthseeker/plots/merged.csv
      hash: md5
      md5: a9b4f71f4d7eccde5a901730969b0bb1
      size: 1711555
  merge@sms_spam:
    cmd: python merge.py --big_dir sms_spam/plots/ --data_file clean/gzip_knn.csv
      --little_dir_data_file clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder
      sms_spam/plots --output_file merged.csv
    deps:
    - path: sms_spam/plots/clean/gzip_knn.csv
      hash: md5
      md5: eeaaa80725256e5beba9c95958533e9c
      size: 417929
    - path: sms_spam/plots/clean/gzip_logistic.csv
      hash: md5
      md5: 280c2094c04ea09f1559217cbc3ec47f
      size: 492146
    - path: sms_spam/plots/clean/gzip_svc.csv
      hash: md5
      md5: d7cf076fa27322a406727c66c38d0f12
      size: 542023
    outs:
    - path: sms_spam/plots/merged.csv
      hash: md5
      md5: 534291e353ef58c5ce65ac66c3381654
      size: 1504936
  merge@ddos:
    cmd: python merge.py --big_dir ddos/plots/ --data_file clean/gzip_knn.csv --little_dir_data_file
      clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder ddos/plots --output_file
      merged.csv
    deps:
    - path: ddos/plots/clean/gzip_knn.csv
      hash: md5
      md5: b0b99d435ad867232db8a243ef62c051
      size: 822043
    - path: ddos/plots/clean/gzip_logistic.csv
      hash: md5
      md5: ea6974bfb86de59d5cc77b5082edcff3
      size: 511437
    - path: ddos/plots/clean/gzip_svc.csv
      hash: md5
      md5: 226094721223ed497570e1addadd5efd
      size: 559957
    outs:
    - path: ddos/plots/merged.csv
      hash: md5
      md5: 4d967dc422fd9f25b15fc4181e92778f
      size: 1961397
  merge@kdd_nsl:
    cmd: python merge.py --big_dir kdd_nsl/plots/ --data_file clean/gzip_knn.csv --little_dir_data_file
      clean/gzip_logistic.csv clean/gzip_svc.csv --output_folder kdd_nsl/plots --output_file
      merged.csv
    deps:
    - path: kdd_nsl/plots/clean/gzip_knn.csv
      hash: md5
      md5: 4d844c3227459afa876952f176216c33
      size: 436451
    - path: kdd_nsl/plots/clean/gzip_logistic.csv
      hash: md5
      md5: cbc25910d449719a898903a86f443f35
      size: 504190
    - path: kdd_nsl/plots/clean/gzip_svc.csv
      hash: md5
      md5: e0b8b895887d4d243b43274f722773f3
      size: 581625
    outs:
    - path: kdd_nsl/plots/merged.csv
      hash: md5
      md5: 888018922b696e148cd9d36b32075af9
      size: 1573889
  plot@kdd_nsl:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: kdd_nsl/plots/merged.csv
      hash: md5
      md5: 888018922b696e148cd9d36b32075af9
      size: 1573889
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: kdd_nsl/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: e9d548a5e926f285654804b2f484c054
      size: 24697
    - path: kdd_nsl/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 14c6752580fb9f764dffd6e00dbb7d8b
      size: 24260
    - path: kdd_nsl/plots/metric_vs_train_time.pdf
      hash: md5
      md5: aee452c8d796ee31e04ed2309335140c
      size: 23263
    - path: kdd_nsl/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 3c4f26f1d95b12df8b1f4d776c1eb450
      size: 22926
    - path: kdd_nsl/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 31f939c60279bef48afcd11ad37ded6a
      size: 19840
    - path: kdd_nsl/plots/models_vs_train_time.pdf
      hash: md5
      md5: 56411639dc8ad805a8f75e0b75bbaa21
      size: 19419
    - path: kdd_nsl/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 959d2acbe4a5d87921fa1ccf66b21e9f
      size: 22222
    - path: kdd_nsl/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: d1e9df1cf1a8290451cac1e04b7b1593
      size: 21620
  plot@truthseeker:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: truthseeker/plots/merged.csv
      hash: md5
      md5: a9b4f71f4d7eccde5a901730969b0bb1
      size: 1711555
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: truthseeker/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 935a8c7365ac4b738a1ab222357db671
      size: 23824
    - path: truthseeker/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: d5095d1375ed12b1a9b9f8ce5bfee839
      size: 22984
    - path: truthseeker/plots/metric_vs_train_time.pdf
      hash: md5
      md5: c6dec8707d3da6a57eb64874b8489aa1
      size: 23404
    - path: truthseeker/plots/models_vs_accuracy.pdf
      hash: md5
      md5: c09acc549b30af58463a3a8af31b80d1
      size: 20437
    - path: truthseeker/plots/models_vs_predict_time.pdf
      hash: md5
      md5: ff7ffac5905b059ec6670c9220caf124
      size: 18153
    - path: truthseeker/plots/models_vs_train_time.pdf
      hash: md5
      md5: f48cdb573700e225810e4ed960768e57
      size: 17725
    - path: truthseeker/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 4b92b154563b9c13bb5f177d0e106002
      size: 22192
    - path: truthseeker/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 2013309b971cea5728652df1a18ece16
      size: 21586
  plot@sms_spam:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: sms_spam/plots/merged.csv
      hash: md5
      md5: 3e3e63943b3d62dddc79e554cb691405
      size: 1492939
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: sms_spam/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: 695e96d374959cef893859230a15f1a7
      size: 24667
    - path: sms_spam/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 857505ffce8416303759a76cb29b26a3
      size: 23552
    - path: sms_spam/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 98b34d861b84d36cb30f58c763445eb7
      size: 23637
    - path: sms_spam/plots/models_vs_accuracy.pdf
      hash: md5
      md5: 3d9cda5e091398ec195ff1c763fb0b5a
      size: 23033
    - path: sms_spam/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 06ae4883133a4f2bb4c19f531c693fdd
      size: 19365
    - path: sms_spam/plots/models_vs_train_time.pdf
      hash: md5
      md5: f8af33a8abf0caf4fc83a69b6af565a0
      size: 18945
    - path: sms_spam/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: 43b4f4865931fca59079491745c20f1c
      size: 22231
    - path: sms_spam/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 4f5b0a9ac3efe2e0daa225f79fe0e40c
      size: 21606
  plot@ddos:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/merged.csv  -c
      conf/plots.yaml
    deps:
    - path: ddos/plots/merged.csv
      hash: md5
      md5: 4d967dc422fd9f25b15fc4181e92778f
      size: 1961397
    params:
      conf/plots.yaml:
        cat_plot:
        - file: symmetric_vs_metric.pdf
          x: model.init.symmetric
          y: accuracy
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Accuracy
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
        - file: symmetric_vs_metric_train_time.pdf
          x: model.init.symmetric
          y: train_time
          hue: model.init.metric
          errorbar: se
          kind: bar
          titles:
          xlabels: ''
          ylabels: Training Time (s)
          legend_title: Metrics
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_accuracy.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: boxen
          titles:
          xlabels: Model
          ylabels: Accuracy
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: linear
            ylim:
            - 0
            - 1
          rotation: 90
        - file: models_vs_train_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Training Time (s)
          legend_title: Samples
          rotation: 90
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
        - file: models_vs_predict_time.pdf
          x: model_name
          y: accuracy
          hue: data.sample.train_size
          errorbar: se
          kind: bar
          titles:
          xlabels: Model
          ylabels: Prediction Time (s)
          legend_title: Samples
          legend:
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
          set:
            yscale: log
          rotation: 90
        line_plot:
        - file: metric_vs_accuracy.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_train_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: metric_vs_predict_time.pdf
          hue: model.init.metric
          title:
          x: data.sample.train_size
          xlabel: Number of Training Samples
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: linear
          hue_order:
          - Gzip
          - Pickle
          - BZ2
          - Zstd
          - Lzma
          - Levenshtein
          - Ratio
          - Hamming
          - Jaro
          - Jaro-Winkler
          - SeqRatio
          errorbar: se
          err_style: bars
          xlim:
          - 10
          - 500
          legend:
            title: Metrics
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: ddos/plots/metric_vs_accuracy.pdf
      hash: md5
      md5: bca86297bef41787bb36fd06cfb8bf2f
      size: 24684
    - path: ddos/plots/metric_vs_predict_time.pdf
      hash: md5
      md5: 92e1f01777252a1e818620ca418d951f
      size: 23249
    - path: ddos/plots/metric_vs_train_time.pdf
      hash: md5
      md5: 4195de5934e58cbab9afedccd721c4af
      size: 23136
    - path: ddos/plots/models_vs_accuracy.pdf
      hash: md5
      md5: dabac7041fa81f072f70a2b317915777
      size: 22241
    - path: ddos/plots/models_vs_predict_time.pdf
      hash: md5
      md5: 34e6604bea2a20e85c9464a722c12fd7
      size: 19837
    - path: ddos/plots/models_vs_train_time.pdf
      hash: md5
      md5: 1ca29825abe607fd9b7c16ccde130580
      size: 19411
    - path: ddos/plots/symmetric_vs_metric.pdf
      hash: md5
      md5: efcb40057243e307c1302cad19a711ef
      size: 22228
    - path: ddos/plots/symmetric_vs_metric_train_time.pdf
      hash: md5
      md5: 14bc1aa22843b3899c8653b943ef45bd
      size: 22116
  condense@truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.test_size=100 model_name=gzip_logistic model=best_gzip_logistic_truthseeker
      hydra.sweeper.study_name=condense_gzip_logistic_truthseeker hydra.sweeper.n_trials=128
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/study.csv
      model.init.m='tag(log, interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=truthseeker files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_logistic_truthseeker.yaml
      hash: md5
      md5: 448e12c542f48c074057e9374743d61e
      size: 326
    - path: truthseeker/logs/method/
      hash: md5
      md5: 6f6693db2bb9520dc7956f0d0c003e23.dir
      size: 116543
      nfiles: 44
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/gzip_logistic/
      hash: md5
      md5: 79d74a0dfe0486ada3f03b24c68973dc.dir
      size: 1576129
      nfiles: 513
    - path: truthseeker/reports/condense/gzip_logistic/
      hash: md5
      md5: 3de3011b1d96e4990111f5b1601e3b9d.dir
      size: 400559
      nfiles: 343
  condense@ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_knn model=best_gzip_knn_ddos hydra.sweeper.study_name=condense_gzip_knn_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: 74721f3e7ab6096e246c486d6080e1ab
      size: 259
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_knn/
      hash: md5
      md5: a2dc5aef876897f53c4076e4012b678a.dir
      size: 1542474
      nfiles: 513
    - path: ddos/reports/condense/gzip_knn/
      hash: md5
      md5: 781709e87f2e740f6a0f4e914ee9754f.dir
      size: 340848
      nfiles: 379
  condense@ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.test_size=100
      model_name=gzip_logistic model=best_gzip_logistic_ddos hydra.sweeper.study_name=condense_gzip_logistic_ddos
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/gzip_logistic/
      hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=ddos files.reports=reports/condense/gzip_logistic/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: 9507b28fa5a18b501fe9d80ec33bed1c
      size: 334
    - path: ddos/logs/method/
      hash: md5
      md5: 7128c67930147170f54fb89880528199.dir
      size: 120518
      nfiles: 48
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/gzip_logistic/
      hash: md5
      md5: 4f8f846516837f0e7cd63c8911aff99a.dir
      size: 1623568
      nfiles: 513
    - path: ddos/reports/condense/gzip_logistic/
      hash: md5
      md5: 051b71717b4a7986a1965ebadf448838.dir
      size: 350870
      nfiles: 384
  condense@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.test_size=100 model_name=gzip_knn model=best_gzip_knn_kdd_nsl hydra.sweeper.study_name=condense_gzip_knn_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/gzip_knn/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/study.csv model.init.m='tag(log,
      interval(.01, .1))' +model.init.sampling_method=medoid,sum,svc,random,hardness,nearmiss,knn
      files.directory=kdd_nsl files.reports=reports/condense/gzip_knn/ hydra.launcher.n_jobs=16
      --config-name condense --multirun
    deps:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: 2697918626643d0136286367b83ee6b9
      size: 258
    - path: kdd_nsl/logs/method/
      hash: md5
      md5: de8764bbb2daa13261f3f5d1dff27a30.dir
      size: 79348
      nfiles: 28
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: ???
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 2
            direction: ${direction}
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/gzip_knn/
      hash: md5
      md5: 7d53f3534ceb486e6601d344562cfb32.dir
      size: 1564530
      nfiles: 513
    - path: kdd_nsl/reports/condense/gzip_knn/
      hash: md5
      md5: 7e5a283215281be3ee4189ebd5a6e3f1.dir
      size: 342924
      nfiles: 384
  parse_params:
    cmd: python -m deckard.layers.parse
    deps:
    - path: conf/data/default.yaml
      hash: md5
      md5: 86639d6672cfd9529dda3e2ae4036c01
      size: 22
    - path: conf/default.yaml
      hash: md5
      md5: a0a533f84a7ffce197e0db5439219faf
      size: 1504
    - path: conf/files/default.yaml
      hash: md5
      md5: 7a2df5f8b98699376c3fb4da05d70dea
      size: 306
    - path: conf/model/default.yaml
      hash: md5
      md5: 39dc7512b1d19fea54550b080d880153
      size: 27
    - path: conf/scorers/default.yaml
      hash: md5
      md5: d8d00e7d284ea68b1244743dfef8f00c
      size: 280
    outs:
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
  test_each_metric@gzip-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/gzip/20
      hash: md5
      md5: 13a41c1dee24226c155c7cd919d7be72.dir
      size: 7896
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@zstd-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/zstd/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=zstd  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/zstd/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/zstd/20
      hash: md5
      md5: 2a9de1bf8f13a51810454b0f8e542813.dir
      size: 7896
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/zstd/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@pkl-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/pkl/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=pkl  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/pkl/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/pkl/20
      hash: md5
      md5: 547875056b9e7537bb6b547f9a12d663.dir
      size: 7881
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/pkl/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@bz2-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/bz2/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=bz2  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/bz2/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/bz2/20
      hash: md5
      md5: 78e71b1316246e3eb1d2204f065fe315.dir
      size: 7881
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/bz2/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@lzma-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/lzma/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=lzma  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/lzma/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/lzma/20
      hash: md5
      md5: 181e750b0b50a3ee26430453289ebff3.dir
      size: 7896
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/lzma/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@levenshtein-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/levenshtein/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=levenshtein  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/levenshtein/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/levenshtein/20
      hash: md5
      md5: 7f5aa2c40f749f116843ad495f377c69.dir
      size: 7980
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/levenshtein/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@ratio-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/ratio/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=ratio  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/ratio/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/ratio/20
      hash: md5
      md5: 4a94942040f87457812b1bf29e530c34.dir
      size: 7890
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/ratio/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@hamming-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/hamming/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=hamming  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/hamming/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/hamming/20
      hash: md5
      md5: 0f632830e12eebb966911772f2835aa9.dir
      size: 7920
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/hamming/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@gzip_knn-kdd_nsl:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_dataset  files.name=gzip_knn
      data.sample.train_size=100 files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model_name=gzip_knn model=gzip_knn hydra.run.dir=kdd_nsl/logs/test_each_dataset/gzip_knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 41e95614d524a857c0260b13ce77202b
      size: 488
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_dataset/gzip_knn
      hash: md5
      md5: 955370e62c64341f4410f3f46f6d84fd.dir
      size: 7263
      nfiles: 4
    - path: kdd_nsl/reports/test_each_dataset/gzip_knn/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@gzip_knn-truthseeker:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_dataset  files.name=gzip_knn
      data.sample.train_size=100 files.directory=truthseeker data=truthseeker dataset=truthseeker
      model_name=gzip_knn model=gzip_knn hydra.run.dir=truthseeker/logs/test_each_dataset/gzip_knn
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 41e95614d524a857c0260b13ce77202b
      size: 488
    - path: params.yaml
      hash: md5
      md5: 9a178db02b5ad8f990c7a557790a36c7
      size: 1381
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/test_each_dataset/gzip_knn
      hash: md5
      md5: f8dd2e14f7e12daed6ebfd9a552d6c4e.dir
      size: 7305
      nfiles: 4
    - path: truthseeker/reports/test_each_dataset/gzip_knn/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_dataset@ddos-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_knn model=gzip_knn
      hydra.run.dir=ddos/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_knn
      hash: md5
      md5: 3138594b2987a54b6196684bdd2fd2dc.dir
      size: 8270
      nfiles: 4
    - path: ddos/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 50948425401e9655694b7bae24a4b24a
      size: 282
  test_each_dataset@ddos-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=ddos data=ddos dataset=ddos model_name=gzip_svc model=gzip_svc
      hydra.run.dir=ddos/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_svc
      hash: md5
      md5: 35f0d02aabaf1976bb3cedb8d0e37f95.dir
      size: 8267
      nfiles: 4
    - path: ddos/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: bc8aa822c76d4b1d76800780f3ea72e8
      size: 281
  test_each_dataset@ddos-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=ddos data=ddos dataset=ddos model_name=gzip_logistic
      model=gzip_logistic hydra.run.dir=ddos/logs/train/gzip_logistic ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: ddos/logs/train/gzip_logistic
      hash: md5
      md5: 059857ff224bd0df8bbb6aa1052565fb.dir
      size: 8405
      nfiles: 4
    - path: ddos/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: f5d793be8917596666827272421f0b32
      size: 282
  test_each_dataset@truthseeker-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_knn
      model=gzip_knn hydra.run.dir=truthseeker/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_knn
      hash: md5
      md5: b2c2b8a6bf5e3de7e2b9fcb27ebc9b0e.dir
      size: 8766
      nfiles: 4
    - path: truthseeker/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: dddc45ec409b3bd343d743789a2735fb
      size: 485
  test_each_dataset@truthseeker-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=truthseeker data=truthseeker dataset=truthseeker model_name=gzip_svc
      model=gzip_svc hydra.run.dir=truthseeker/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_svc
      hash: md5
      md5: a92b8a9af468c50e22a1b70393f80383.dir
      size: 8764
      nfiles: 4
    - path: truthseeker/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: ef9a491e592eb39757863246ef9ea9ee
      size: 485
  test_each_dataset@truthseeker-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=truthseeker data=truthseeker dataset=truthseeker
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=truthseeker/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: truthseeker/logs/train/gzip_logistic
      hash: md5
      md5: 4307ed8d2c6c1842abf7c919effa5585.dir
      size: 8927
      nfiles: 4
    - path: truthseeker/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: c924984f0bc0a668bd204cd1368cca29
      size: 484
  test_each_dataset@sms_spam-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_knn
      model=gzip_knn hydra.run.dir=sms_spam/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_knn
      hash: md5
      md5: 288289a63ad41945ee6f553954e63fb6.dir
      size: 8696
      nfiles: 4
    - path: sms_spam/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: cbf84c1419d004160232153789ef857e
      size: 484
  test_each_dataset@sms_spam-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=sms_spam data=sms_spam dataset=sms_spam model_name=gzip_svc
      model=gzip_svc hydra.run.dir=sms_spam/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_svc
      hash: md5
      md5: 2092d70cd452792ca000dc00fa339c98.dir
      size: 8693
      nfiles: 4
    - path: sms_spam/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 570fd51555af3014e9cc9d7ede806f99
      size: 483
  test_each_dataset@sms_spam-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=sms_spam data=sms_spam dataset=sms_spam
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=sms_spam/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: sms_spam/logs/train/gzip_logistic
      hash: md5
      md5: 529420680b63e63951e2ea7fee603c6e.dir
      size: 8839
      nfiles: 4
    - path: sms_spam/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 609514cfb9a8a234c82823b402deebd5
      size: 487
  test_each_dataset@kdd_nsl-gzip_knn:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_knn data.sample.train_size=100
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_knn model=gzip_knn
      hydra.run.dir=kdd_nsl/logs/train/gzip_knn ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_knn
      hash: md5
      md5: b4064f5ba018d961ca5d94272f10cc98.dir
      size: 8332
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_knn/score_dict.json
      hash: md5
      md5: 15433bc09490e34086340cdc126809af
      size: 279
  test_each_dataset@kdd_nsl-gzip_svc:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_svc data.sample.train_size=100
      files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl model_name=gzip_svc model=gzip_svc
      hydra.run.dir=kdd_nsl/logs/train/gzip_svc ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_svc
      hash: md5
      md5: 82aa62187135fa6761797bffad730bf5.dir
      size: 8333
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_svc/score_dict.json
      hash: md5
      md5: 8d6cc7f69c732f2bf2618889dbc4d27f
      size: 282
  test_each_dataset@kdd_nsl-gzip_logistic:
    cmd: 'python -m deckard.layers.optimise  stage=train files.name=gzip_logistic
      data.sample.train_size=100 files.directory=kdd_nsl data=kdd_nsl dataset=kdd_nsl
      model_name=gzip_logistic model=gzip_logistic hydra.run.dir=kdd_nsl/logs/train/gzip_logistic
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/train/gzip_logistic
      hash: md5
      md5: 9c885fb9fc086d581e13a69b83e3168f.dir
      size: 8469
      nfiles: 4
    - path: kdd_nsl/reports/train/gzip_logistic/score_dict.json
      hash: md5
      md5: 8d9b7d68ae18c0b4d887522cdfb620f8
      size: 281
  test_each_metric@jaro-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/jaro/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=jaro  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/jaro/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/jaro/20
      hash: md5
      md5: 52a4717452195943e7f45e9cece5b870.dir
      size: 7875
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/jaro/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@jaro_winkler-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/jaro_winkler/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=jaro_winkler  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/jaro_winkler/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/jaro_winkler/20
      hash: md5
      md5: 389e1b4dbd6f40645320412591511d48.dir
      size: 7995
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/jaro_winkler/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_metric@seqratio-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_metric  files.name=gzip_knn/seqratio/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=seqratio  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_metric/gzip_knn/seqratio/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_metric/gzip_knn/seqratio/20
      hash: md5
      md5: aa1bc45346aa8fa60bf6e8b91df7559a.dir
      size: 7935
      nfiles: 4
    - path: kdd_nsl/reports/test_each_metric/gzip_knn/seqratio/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_knn-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_knn/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_knn model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_knn/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_knn/gzip/20
      hash: md5
      md5: 3f15457aa4eb5b13f14c84d6299d6033.dir
      size: 7888
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_knn/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_svc-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_svc/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_svc model_name=gzip_knn model.init.metric=gzip  model.init.m=-1 hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_svc/gzip/20
      ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_svc/gzip/20
      hash: md5
      md5: 7ab534004d714b2a74f8c5fdb5d75b61.dir
      size: 7891
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_svc/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  test_each_model@gzip-gzip_logistic-kdd_nsl-20:
    cmd: 'python -m deckard.layers.optimise  stage=test_each_model  files.name=gzip_logistic/gzip/20
      files.directory=kdd_nsl data=kdd_nsl data.sample.train_size=20 dataset=kdd_nsl
      model=gzip_logistic model_name=gzip_knn model.init.metric=gzip  model.init.m=-1
      hydra.run.dir=kdd_nsl/logs/test_each_model/gzip_logistic/gzip/20 ++raise_exception=True '
    deps:
    - path: kdd_nsl/reports/train/default/score_dict.json
      hash: md5
      md5: 973ed0af499fa6561450dcb64d7984e3
      size: 485
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      params.yaml:
        data:
          _target_: deckard.base.data.Data
          drop:
          - id
          name: raw_data/kdd_nsl_undersampled_5000.csv
          sample:
            _target_: deckard.base.data.SklearnDataSampler
            random_state: 0
            stratify: true
            test_size: 100
            train_size: 100
          target: label
        dataset: kdd_nsl
        device_id: cpu
        files:
          _target_: deckard.base.files.FileConfig
          data_dir: data
          data_type: .csv
          directory: kdd_nsl
          model_dir: model
          name: default
          params_file: params.yaml
          predictions_file: predictions.json
          reports: reports
          score_dict_file: score_dict.json
        model:
          _target_: deckard.base.model.Model
          data:
            _target_: deckard.base.data.Data
            drop:
            - id
            name: raw_data/kdd_nsl_undersampled_5000.csv
            sample:
              _target_: deckard.base.data.SklearnDataSampler
              random_state: 0
              stratify: true
              test_size: 100
              train_size: 100
            target: label
          init:
            _target_: deckard.base.model.ModelInitializer
            distance_matrix: kdd_nsl/model/gzip/100-100/0.npz
            k: 1
            m: -1
            metric: gzip
            name: gzip_classifier.GzipKNN
            symmetric: false
          library: sklearn
        model_name: gzip_knn
        scorers:
          _target_: deckard.base.scorer.ScorerDict
          accuracy:
            _target_: deckard.base.scorer.ScorerConfig
            direction: maximize
            name: sklearn.metrics.accuracy_score
          log_loss:
            _target_: deckard.base.scorer.ScorerConfig
            direction: minimize
            name: sklearn.metrics.log_loss
    outs:
    - path: kdd_nsl/logs/test_each_model/gzip_logistic/gzip/20
      hash: md5
      md5: 5f861380183240881b3d9a73a67b18e4.dir
      size: 7980
      nfiles: 4
    - path: kdd_nsl/reports/test_each_model/gzip_logistic/gzip/20/score_dict.json
      hash: md5
      md5: 5d8bf090bc8e34df8ed01766adfca5eb
      size: 26
  grid_search@20-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/20
      hash: md5
      md5: 115a41970ebe91128cffd1e8c3b61498.dir
      size: 1296774
      nfiles: 513
    - path: kdd_nsl/reports/gzip_knn/20/train/
      hash: md5
      md5: 4d755edd5b38adc5b7f526e3d15ebac2.dir
      size: 359689
      nfiles: 368
  grid_search@20-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/20
      hash: md5
      md5: a8595a459255817fd6640cc39046e4a1.dir
      size: 1388361
      nfiles: 513
    - path: kdd_nsl/reports/gzip_logistic/20/train/
      hash: md5
      md5: 3873a418a31a09159aa0613c29f84612.dir
      size: 559098
      nfiles: 362
  grid_search@20-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/20/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/20
      hash: md5
      md5: 1e27f2d1dbecceabc4ae0cd019e492f6.dir
      size: 1348650
      nfiles: 513
    - path: kdd_nsl/reports/gzip_svc/20/train/
      hash: md5
      md5: 0fd2193b53abea1c13ef342dfa19f2ee.dir
      size: 554769
      nfiles: 384
  grid_search@20-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/20
      hash: md5
      md5: 4282261388bfb47a0ecc305c43c0774e.dir
      size: 1308247
      nfiles: 513
    - path: truthseeker/reports/gzip_knn/20/train/
      hash: md5
      md5: b10cdd98077d4675ca84697074387129.dir
      size: 347576
      nfiles: 372
  grid_search@20-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/20
      hash: md5
      md5: 03df4633c0f5202339af4e4ce28986a7.dir
      size: 1385960
      nfiles: 513
    - path: truthseeker/reports/gzip_logistic/20/train/
      hash: md5
      md5: b8710b865151f76a1dba111e029ba3e0.dir
      size: 555685
      nfiles: 357
  grid_search@20-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/20/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/20
      hash: md5
      md5: ff0d33bc9c6ce8637eedd463d73c22a3.dir
      size: 1352377
      nfiles: 513
    - path: truthseeker/reports/gzip_svc/20/train/
      hash: md5
      md5: 7d179884b582e5b8ef27863c6b6f1445.dir
      size: 545932
      nfiles: 384
  grid_search@20-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: a58015cd6f327e171842b045a2524bfd
      size: 2062
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/20
      hash: md5
      md5: e9e56d342ed2c474422627ff4d66a2bf.dir
      size: 1299391
      nfiles: 513
    - path: sms_spam/reports/gzip_knn/20/train/
      hash: md5
      md5: 125eb4c7a912bd644ad2d883b63756e2.dir
      size: 342531
      nfiles: 374
  grid_search@20-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/20
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/20
      hash: md5
      md5: cbf374500fd5125d98f2f65d4a5b2fa2.dir
      size: 1374488
      nfiles: 513
    - path: sms_spam/reports/gzip_logistic/20/train/
      hash: md5
      md5: 5a05a497802592f4fc283e42d47d3c3b.dir
      size: 551814
      nfiles: 356
  grid_search@20-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=20 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/20/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/20
      hash: md5
      md5: 79953e6df3b0bc872d6e777c46915b12.dir
      size: 1340891
      nfiles: 513
    - path: sms_spam/reports/gzip_svc/20/train/
      hash: md5
      md5: 61a986d1b7c3deaa918526f61eb9897b.dir
      size: 542016
      nfiles: 384
  grid_search@20-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/20/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/20
      hash: md5
      md5: 1c588820bb8cc7ed0622a2dd2a1cc08b.dir
      size: 1452384
      nfiles: 514
    - path: ddos/reports/gzip_knn/20/train/
      hash: md5
      md5: 69518d6bf12dde705dd3b50cd987f1af.dir
      size: 1062291
      nfiles: 1163
  grid_search@20-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/20/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: 847d4d804fff0b6f2533f90820eebd04
      size: 2205
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/20
      hash: md5
      md5: 862388e015eae9fb28dd1de9e79f12ce.dir
      size: 1384742
      nfiles: 513
    - path: ddos/reports/gzip_logistic/20/train/
      hash: md5
      md5: f7b00527e60c1f473954a36991327b51.dir
      size: 560045
      nfiles: 369
  grid_search@20-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=20
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/20 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/20/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/20 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 957922cb6993eb99866232d944a4a106
      size: 2131
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/20
      hash: md5
      md5: dc81f350e6d3bf8d34c4a550d3e3c9bd.dir
      size: 1337099
      nfiles: 513
    - path: ddos/reports/gzip_svc/20/train/
      hash: md5
      md5: b86c76493d70bb1732050043f72b63a5.dir
      size: 551373
      nfiles: 384
  grid_search@100-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/100
      hash: md5
      md5: 627b7ee87613bc63fbee1347dff2a211.dir
      size: 1331375
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/100/train/
      hash: md5
      md5: e2ce656f9f6ac2cf23f557a32dac018c.dir
      size: 374498
      nfiles: 352
  grid_search@100-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/100
      hash: md5
      md5: d10fc206ea64ee1d63eaed14f5b60879.dir
      size: 1443430
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/100/train/
      hash: md5
      md5: b343d0870fadbfbdecb47d5538943279.dir
      size: 564631
      nfiles: 357
  grid_search@100-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/100/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/100
      hash: md5
      md5: 1cbd3a1e7a5989ec7e6bcd4c71feb722.dir
      size: 1409321
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/100/train/
      hash: md5
      md5: a3702590a0e52e5bc7cf0e6cc6a551da.dir
      size: 551152
      nfiles: 381
  grid_search@100-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/100
      hash: md5
      md5: 04a5bc31a55d435d8e6932285fc3de4a.dir
      size: 1346194
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/100/train/
      hash: md5
      md5: 54df7266d8f6c76d39c28839b372482a.dir
      size: 363058
      nfiles: 352
  grid_search@100-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/100
      hash: md5
      md5: 8851ae1ca8a7c9fd94a42d7253eb0f14.dir
      size: 1461033
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/100/train/
      hash: md5
      md5: aaf46ef58b9daf76df06fbb7c877eddc.dir
      size: 555616
      nfiles: 365
  grid_search@100-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/100/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/100
      hash: md5
      md5: 626f846dddb8ec2a392050e2a193195d.dir
      size: 1415375
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/100/train/
      hash: md5
      md5: 4026ab65c9681a20924d9f39bbce753d.dir
      size: 546562
      nfiles: 384
  grid_search@100-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/100
      hash: md5
      md5: e6b50d168b377158bf22fb8598508874.dir
      size: 1342714
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/100/train/
      hash: md5
      md5: e53ac2a974976f6f97794b1705182563.dir
      size: 352911
      nfiles: 360
  find_best_model@ddos-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_ddos --config_subdir model --params_file best_gzip_knn_ddos --default_config
      gzip_knn
    deps:
    - path: ddos/logs/gzip_knn/
      hash: md5
      md5: d2c6441e85e3509b8968240a48196d07.dir
      size: 4193267
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_knn_ddos.yaml
      hash: md5
      md5: bdea475d3a2bc59106f27dccd0fc27fc
      size: 419
  find_best_model@ddos-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_ddos --config_subdir model --params_file best_gzip_svc_ddos --default_config
      gzip_svc
    deps:
    - path: ddos/logs/gzip_svc/
      hash: md5
      md5: 78cd23f301a93a7c9842abb061e3cc7b.dir
      size: 7447727
      nfiles: 2570
    outs:
    - path: conf/model/best_gzip_svc_ddos.yaml
      hash: md5
      md5: 3a7f27dd470ec9e55c10403814f550f2
      size: 442
  find_best_model@ddos-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_ddos --config_subdir model --params_file best_gzip_logistic_ddos
      --default_config gzip_logistic
    deps:
    - path: ddos/logs/gzip_logistic/
      hash: md5
      md5: b28cadbd10b9bbe40802e39b1beaee18.dir
      size: 6561328
      nfiles: 2056
    outs:
    - path: conf/model/best_gzip_logistic_ddos.yaml
      hash: md5
      md5: d5e603d6386dd6cf1167088eaecbdde5
      size: 498
  condense@ddos-knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_knn model=gzip_knn files.directory=ddos
      files.reports=reports/condense/knn/ hydra.sweeper.study_name=condense_knn_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/knn/
      hydra.callbacks.study_dump.output_file=ddos/logs/knn/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_knn --multirun
    deps:
    - path: conf/condense_knn.yaml
      hash: md5
      md5: abd25d17a742e467d39dda34b448ba88
      size: 2181
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/knn/
      hash: md5
      md5: d83b6c64d5535fba4d371a6244c71140.dir
      size: 11142600
      nfiles: 4097
    - path: ddos/reports/condense/knn/
      hash: md5
      md5: 31d7e7a0e89685ab46147b3bc1e9a57b.dir
      size: 2849297
      nfiles: 3044
  condense@ddos-svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_svc model=gzip_svc files.directory=ddos
      files.reports=reports/condense/svc/ hydra.sweeper.study_name=condense_svc_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/svc/
      hydra.callbacks.study_dump.output_file=ddos/logs/svc/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_svc --multirun
    deps:
    - path: conf/condense_svc.yaml
      hash: md5
      md5: 7a311db45e697a23a2bed8180fd45e64
      size: 2182
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/svc/
      hash: md5
      md5: 959fc2f99c93ccc2d0e8fc00ade34ed9.dir
      size: 11235717
      nfiles: 4097
    - path: ddos/reports/condense/svc/
      hash: md5
      md5: 4cd4cd510b2d1729094f4b704d22d2f7.dir
      size: 4482040
      nfiles: 3072
  condense@ddos-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=condensed_logistic model=gzip_logistic
      files.directory=ddos files.reports=reports/condense/logistic/ hydra.sweeper.study_name=condense_logistic_ddos
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=ddos/logs/condense/logistic/
      hydra.callbacks.study_dump.output_file=ddos/logs/logistic/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_logistic --multirun
    deps:
    - path: conf/condense_logistic.yaml
      hash: md5
      md5: 85b6d1d835afd7e95b5b9f804fbd7119
      size: 2326
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: ddos/logs/condense/logistic/
      hash: md5
      md5: c355ecaa55c8b6015007c7b3912b9b02.dir
      size: 11953607
      nfiles: 4097
    - path: ddos/reports/condense/logistic/
      hash: md5
      md5: 5ae0bcd484eb00652d8db28c795b72ac.dir
      size: 4549745
      nfiles: 3040
  grid_search@100-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/100/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/100
      hash: md5
      md5: 5118d2a533a4710bee7c9447a31878fc.dir
      size: 1356595
      nfiles: 514
    - path: ddos/reports/gzip_knn/100/train/
      hash: md5
      md5: 2033427b1f841dcb0076888e16e5baae.dir
      size: 345741
      nfiles: 382
  grid_search@100-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/100/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/100
      hash: md5
      md5: 4c1c97038945eb418ac31d94a00760aa.dir
      size: 1450826
      nfiles: 514
    - path: ddos/reports/gzip_logistic/100/train/
      hash: md5
      md5: 85a4ef22f2dcc23827d34ccf182bcd70.dir
      size: 560355
      nfiles: 373
  grid_search@100-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=100
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/100/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/100
      hash: md5
      md5: 7ad3d8a6e94e26be1554eb05596f7135.dir
      size: 1396897
      nfiles: 514
    - path: ddos/reports/gzip_svc/100/train/
      hash: md5
      md5: d2f54e80307679736c4af3be015a967e.dir
      size: 552243
      nfiles: 384
  find_best_model@kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_kdd_nsl --config_subdir model --params_file best_gzip_knn_kdd_nsl --default_config
      gzip_knn
    deps:
    - path: kdd_nsl/logs/gzip_knn/
      hash: md5
      md5: 6418750af32f15be9c6f35e0975b3276.dir
      size: 4024441
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_knn_kdd_nsl.yaml
      hash: md5
      md5: f9ad25a19931041146b4b1eab45fda68
      size: 420
  find_best_model@kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_kdd_nsl --config_subdir model --params_file best_gzip_svc_kdd_nsl --default_config
      gzip_svc
    deps:
    - path: kdd_nsl/logs/gzip_svc/
      hash: md5
      md5: 381879c377b6eeccbb9d1aa42f78fec2.dir
      size: 4366326
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_svc_kdd_nsl.yaml
      hash: md5
      md5: 0542c20ce7b5a74a20d4ab1c38fdf213
      size: 434
  find_best_model@kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_kdd_nsl --config_subdir model --params_file best_gzip_logistic_kdd_nsl
      --default_config gzip_logistic
    deps:
    - path: kdd_nsl/logs/gzip_logistic/
      hash: md5
      md5: 34325e24d16a4af0ec3286ec4b034e14.dir
      size: 4504884
      nfiles: 1542
    outs:
    - path: conf/model/best_gzip_logistic_kdd_nsl.yaml
      hash: md5
      md5: e21d828b4b1ad122d7755e986de5b93d
      size: 353
  find_best_model@sms_spam-gzip_knn:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_knn_sms_spam --config_subdir model --params_file best_gzip_knn_sms_spam
      --default_config gzip_knn
    deps:
    - path: sms_spam/logs/gzip_knn/
      hash: md5
      md5: 689c69db8c621101649ddef5bd0c1bb5.dir
      size: 2713750
      nfiles: 1028
    outs:
    - path: conf/model/best_gzip_knn_sms_spam.yaml
      hash: md5
      md5: 41fad710bcb8b8b8dd548d669b2ed748
      size: 419
  find_best_model@sms_spam-gzip_svc:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_svc_sms_spam --config_subdir model --params_file best_gzip_svc_sms_spam
      --default_config gzip_svc
    deps:
    - path: sms_spam/logs/gzip_svc/
      hash: md5
      md5: b91e15f0eb5ee57aed8aeb5a5d6feeab.dir
      size: 2777710
      nfiles: 1028
    outs:
    - path: conf/model/best_gzip_svc_sms_spam.yaml
      hash: md5
      md5: bb3008613c3311a696d32fb683732c00
      size: 442
  find_best_model@sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.find_best --storage sqlite:///optuna.db --study_name
      gzip_logistic_sms_spam --config_subdir model --params_file best_gzip_logistic_sms_spam
      --default_config gzip_logistic
    deps:
    - path: sms_spam/logs/gzip_logistic/
      hash: md5
      md5: 89191dbe147b40192129776ef2652900.dir
      size: 1649284
      nfiles: 578
    outs:
    - path: conf/model/best_gzip_logistic_sms_spam.yaml
      hash: md5
      md5: fd1d0481be57844d935aea28e995a369
      size: 485
  condense@kdd_nsl-knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=kdd_nsl files.reports=reports/condense/knn/ hydra.sweeper.study_name=condense_knn_kdd_nsl
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/knn/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/knn/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_knn --multirun
    deps:
    - path: conf/condense_knn.yaml
      hash: md5
      md5: abd25d17a742e467d39dda34b448ba88
      size: 2181
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/knn/
      hash: md5
      md5: 378298d488efbdb9adf7ecdb9f82124c.dir
      size: 10970993
      nfiles: 4097
    - path: kdd_nsl/reports/condense/knn/
      hash: md5
      md5: 93ada0fdd4ee34c1a90811b419492a55.dir
      size: 3050193
      nfiles: 2814
  condense@kdd_nsl-svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=kdd_nsl files.reports=reports/condense/svc/ hydra.sweeper.study_name=condense_svc_kdd_nsl
      hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/svc/
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/svc/study.csv hydra.launcher.n_jobs=-1
      --config-name condense_svc --multirun
    deps:
    - path: conf/condense_svc.yaml
      hash: md5
      md5: 7a311db45e697a23a2bed8180fd45e64
      size: 2182
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/svc/
      hash: md5
      md5: 776eda5429781a85addde97d20c7b265.dir
      size: 11185990
      nfiles: 4097
    - path: kdd_nsl/reports/condense/svc/
      hash: md5
      md5: 203675ff458bef2b81282c5bdfc2a784.dir
      size: 4456054
      nfiles: 2974
  condense@kdd_nsl-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=kdd_nsl files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_kdd_nsl hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=kdd_nsl/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/condense_logistic.yaml
      hash: md5
      md5: 85b6d1d835afd7e95b5b9f804fbd7119
      size: 2326
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: kdd_nsl/logs/condense/logistic/
      hash: md5
      md5: 1dc74c36e9ba875544f225b89a6da453.dir
      size: 11922297
      nfiles: 4097
    - path: kdd_nsl/reports/condense/logistic/
      hash: md5
      md5: ea7bb298a46f2f3f6cbbd56cae254637.dir
      size: 4572006
      nfiles: 2967
  condense@truthseeker-knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=truthseeker files.reports=reports/condense/knn/
      hydra.sweeper.study_name=condense_knn_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/knn/ hydra.callbacks.study_dump.output_file=truthseeker/logs/knn/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_knn --multirun
    deps:
    - path: conf/condense_knn.yaml
      hash: md5
      md5: abd25d17a742e467d39dda34b448ba88
      size: 2181
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/knn/
      hash: md5
      md5: e3674e8225bdf6253493734e4aaeae1b.dir
      size: 10942128
      nfiles: 4097
    - path: truthseeker/reports/condense/knn/
      hash: md5
      md5: 1324be810ca9c33934d2d66d4dee0f24.dir
      size: 3043315
      nfiles: 2762
  condense@truthseeker-svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=truthseeker files.reports=reports/condense/svc/
      hydra.sweeper.study_name=condense_svc_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/svc/ hydra.callbacks.study_dump.output_file=truthseeker/logs/svc/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_svc --multirun
    deps:
    - path: conf/model/best_gzip_svc_truthseeker.yaml
      hash: md5
      md5: 97d9d5857744b1cc077513ac5a659f62
      size: 302
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/svc/
      hash: md5
      md5: 845724e35dc3a54bea549410a35d6afd.dir
      size: 11192018
      nfiles: 4097
    - path: truthseeker/reports/condense/svc/
      hash: md5
      md5: 6cbdc47d51df656dcf7e8ae6221795b3.dir
      size: 2825163
      nfiles: 3064
  condense@truthseeker-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=truthseeker files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_truthseeker hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=truthseeker/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/model/best_gzip_logistic_truthseeker.yaml
      hash: md5
      md5: 448e12c542f48c074057e9374743d61e
      size: 326
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: truthseeker/logs/condense/logistic/
      hash: md5
      md5: f7e754346e500d1b007b519d86f4c608.dir
      size: 11847643
      nfiles: 4097
    - path: truthseeker/reports/condense/logistic/
      hash: md5
      md5: 8bd6876fc856ea5bd1e95b54093aedb8.dir
      size: 2976098
      nfiles: 3011
  condense@sms_spam-knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_knn
      model=gzip_knn files.directory=sms_spam files.reports=reports/condense/knn/
      hydra.sweeper.study_name=condense_knn_sms_spam hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/condense/knn/ hydra.callbacks.study_dump.output_file=sms_spam/logs/knn/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_knn --multirun
    deps:
    - path: conf/condense_knn.yaml
      hash: md5
      md5: abd25d17a742e467d39dda34b448ba88
      size: 2181
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/knn/
      hash: md5
      md5: ee1eda16b8989f2a23a7dfeba27b4437.dir
      size: 10519093
      nfiles: 4097
    - path: sms_spam/reports/condense/knn/
      hash: md5
      md5: 84b8fcb1e78a8685141409736c6d6afa.dir
      size: 4713599
      nfiles: 4258
  condense@sms_spam-svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_svc
      model=gzip_svc files.directory=sms_spam files.reports=reports/condense/svc/
      hydra.sweeper.study_name=condense_svc_sms_spam hydra.sweeper.n_trials=1024 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/condense/svc/ hydra.callbacks.study_dump.output_file=sms_spam/logs/svc/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_svc --multirun
    deps:
    - path: conf/condense_svc.yaml
      hash: md5
      md5: 7a311db45e697a23a2bed8180fd45e64
      size: 2182
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/svc/
      hash: md5
      md5: 9d28ee3f4494d207369bd35c2f5d2164.dir
      size: 11082621
      nfiles: 4097
    - path: sms_spam/reports/condense/svc/
      hash: md5
      md5: 200cad31398ec4545e7a490011218c47.dir
      size: 4416840
      nfiles: 3068
  condense@sms_spam-logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=condensed_logistic
      model=gzip_logistic files.directory=sms_spam files.reports=reports/condense/logistic/
      hydra.sweeper.study_name=condense_logistic_sms_spam hydra.sweeper.n_trials=1024
      hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/condense/logistic/ hydra.callbacks.study_dump.output_file=sms_spam/logs/logistic/study.csv
      hydra.launcher.n_jobs=-1 --config-name condense_logistic --multirun
    deps:
    - path: conf/condense_logistic.yaml
      hash: md5
      md5: 85b6d1d835afd7e95b5b9f804fbd7119
      size: 2326
    - path: params.yaml
      hash: md5
      md5: 8be0cf0b5f453ffb12b19a1bf1af6468
      size: 1435
    params:
      conf/condense.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/condense/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              seed: 123
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            direction: ${direction}
            max_failure_rate: 1.0
            params:
              ++data.sample.train_size: 1000
              ++data.sample.random_state: int(interval(10000, 20000))
              model.init.m: tag(log, interval(.01, .1))
              +model.init.sampling_method: medoid,sum,svc,random,hardness,nearmiss,knn
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
    outs:
    - path: sms_spam/logs/condense/logistic/
      hash: md5
      md5: 3846050e3a2341b246c2c3366debe0dc.dir
      size: 11620551
      nfiles: 4097
    - path: sms_spam/reports/condense/logistic/
      hash: md5
      md5: 05562ae582796b70d35ae7062a5030d7.dir
      size: 9597627
      nfiles: 6388
  compile@sms_spam-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/logistic  --results_file
      sms_spam/reports/condense/logistic.csv
    deps:
    - path: sms_spam/reports/condense/logistic/
      hash: md5
      md5: 05562ae582796b70d35ae7062a5030d7.dir
      size: 9597627
      nfiles: 6388
    outs:
    - path: sms_spam/reports/condense/logistic.csv
      hash: md5
      md5: 7094b26a582820cc1f88512573ce8c25
      size: 3430438
  compile@kdd_nsl-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/svc  --results_file
      kdd_nsl/reports/condense/svc.csv
    deps:
    - path: kdd_nsl/reports/condense/svc/
      hash: md5
      md5: 203675ff458bef2b81282c5bdfc2a784.dir
      size: 4456054
      nfiles: 2974
    outs:
    - path: kdd_nsl/reports/condense/svc.csv
      hash: md5
      md5: ab6577b1dc3e0043e39abbe6d3e08572
      size: 1430670
  compile@kdd_nsl-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/logistic  --results_file
      kdd_nsl/reports/condense/logistic.csv
    deps:
    - path: kdd_nsl/reports/condense/logistic/
      hash: md5
      md5: ea7bb298a46f2f3f6cbbd56cae254637.dir
      size: 4572006
      nfiles: 2967
    outs:
    - path: kdd_nsl/reports/condense/logistic.csv
      hash: md5
      md5: ca33966ea5c59774aada0a45e7989bf4
      size: 1469929
  compile@ddos-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/svc  --results_file
      ddos/reports/condense/svc.csv
    deps:
    - path: ddos/reports/condense/svc/
      hash: md5
      md5: 4cd4cd510b2d1729094f4b704d22d2f7.dir
      size: 4482040
      nfiles: 3072
    outs:
    - path: ddos/reports/condense/svc.csv
      hash: md5
      md5: aa784bb40bb07d842dc0a91a4db363de
      size: 1427146
  compile@truthseeker-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/knn  --results_file
      truthseeker/reports/condense/knn.csv
    deps:
    - path: truthseeker/reports/condense/knn/
      hash: md5
      md5: 1565eb2348976cc6ac9108396141080b.dir
      size: 2831604
      nfiles: 3016
    outs:
    - path: truthseeker/reports/condense/knn.csv
      hash: md5
      md5: b4ec50d98f613984be6261a059120255
      size: 1595839
  compile@truthseeker-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/svc  --results_file
      truthseeker/reports/condense/svc.csv
    deps:
    - path: truthseeker/reports/condense/svc/
      hash: md5
      md5: 6cbdc47d51df656dcf7e8ae6221795b3.dir
      size: 2825163
      nfiles: 3064
    outs:
    - path: truthseeker/reports/condense/svc.csv
      hash: md5
      md5: 4cdede4407c88bcda2afc8bbeae91ace
      size: 1617655
  compile@ddos-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/knn  --results_file
      ddos/reports/condense/knn.csv
    deps:
    - path: ddos/reports/condense/knn/
      hash: md5
      md5: 31d7e7a0e89685ab46147b3bc1e9a57b.dir
      size: 2849297
      nfiles: 3044
    outs:
    - path: ddos/reports/condense/knn.csv
      hash: md5
      md5: 755a891a9010614c0320ba6957a08de7
      size: 1418049
  compile@sms_spam-condense/svc:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/svc  --results_file
      sms_spam/reports/condense/svc.csv
    deps:
    - path: sms_spam/reports/condense/svc/
      hash: md5
      md5: 200cad31398ec4545e7a490011218c47.dir
      size: 4416840
      nfiles: 3068
    outs:
    - path: sms_spam/reports/condense/svc.csv
      hash: md5
      md5: 32f06cbea623f845dcfa7400d707abad
      size: 1573621
  compile@kdd_nsl-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder kdd_nsl/reports/condense/knn  --results_file
      kdd_nsl/reports/condense/knn.csv
    deps:
    - path: kdd_nsl/reports/condense/knn/
      hash: md5
      md5: 93ada0fdd4ee34c1a90811b419492a55.dir
      size: 3050193
      nfiles: 2814
    outs:
    - path: kdd_nsl/reports/condense/knn.csv
      hash: md5
      md5: 5718185a5ba5dfa47d3a807a7860c79d
      size: 1383948
  compile@truthseeker-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder truthseeker/reports/condense/logistic  --results_file
      truthseeker/reports/condense/logistic.csv
    deps:
    - path: truthseeker/reports/condense/logistic/
      hash: md5
      md5: 8bd6876fc856ea5bd1e95b54093aedb8.dir
      size: 2976098
      nfiles: 3011
    outs:
    - path: truthseeker/reports/condense/logistic.csv
      hash: md5
      md5: 5c01852f352ac96150fb36c2df9bcbbf
      size: 1648856
  compile@sms_spam-condense/knn:
    cmd: python -m deckard.layers.compile  --report_folder sms_spam/reports/condense/knn  --results_file
      sms_spam/reports/condense/knn.csv
    deps:
    - path: sms_spam/reports/condense/knn/
      hash: md5
      md5: 84b8fcb1e78a8685141409736c6d6afa.dir
      size: 4713599
      nfiles: 4258
    outs:
    - path: sms_spam/reports/condense/knn.csv
      hash: md5
      md5: c8d4f7036e0c3e1cf8fa5a0b922c6ecc
      size: 2287605
  compile@ddos-condense/logistic:
    cmd: python -m deckard.layers.compile  --report_folder ddos/reports/condense/logistic  --results_file
      ddos/reports/condense/logistic.csv
    deps:
    - path: ddos/reports/condense/logistic/
      hash: md5
      md5: 5ae0bcd484eb00652d8db28c795b72ac.dir
      size: 4549745
      nfiles: 3040
    outs:
    - path: ddos/reports/condense/logistic.csv
      hash: md5
      md5: 43603ccd44d31553618819d6d8a21b26
      size: 1459732
  clean@sms_spam-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/svc.csv
      -o sms_spam/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/svc.csv
      hash: md5
      md5: 32f06cbea623f845dcfa7400d707abad
      size: 1573621
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/svc.csv
      hash: md5
      md5: 92b8648f6759e0a56c65aeec4a15aa92
      size: 1223675
  clean@ddos-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/knn.csv -o
      ddos/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/knn.csv
      hash: md5
      md5: 755a891a9010614c0320ba6957a08de7
      size: 1418049
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/knn.csv
      hash: md5
      md5: be16b853ccb87973e0e61b37b3d79cc9
      size: 1144970
  clean@truthseeker-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/svc.csv
      -o truthseeker/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/svc.csv
      hash: md5
      md5: 4cdede4407c88bcda2afc8bbeae91ace
      size: 1617655
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/svc.csv
      hash: md5
      md5: a17c0cdb6a3fbfae5bd4fcfca1938a96
      size: 1257671
  clean@kdd_nsl-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/knn.csv
      -o kdd_nsl/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/knn.csv
      hash: md5
      md5: 5718185a5ba5dfa47d3a807a7860c79d
      size: 1383948
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/knn.csv
      hash: md5
      md5: d8857cdd7c5cddaeb94e66c665635e99
      size: 902457
  clean@kdd_nsl-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/svc.csv
      -o kdd_nsl/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/svc.csv
      hash: md5
      md5: 643a67cb6d5974a787efa6339e3af058
      size: 3003804
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/svc.csv
      hash: md5
      md5: c9b2ff8546f531fa439c664c63fc06fd
      size: 2021393
  clean@kdd_nsl-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i kdd_nsl/reports/condense/logistic.csv
      -o kdd_nsl/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: kdd_nsl/reports/condense/logistic.csv
      hash: md5
      md5: ca33966ea5c59774aada0a45e7989bf4
      size: 1469929
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: kdd_nsl/plots/clean/condense/logistic.csv
      hash: md5
      md5: 13df9ba9765236429909d36811493425
      size: 1127465
  clean@sms_spam-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/knn.csv
      -o sms_spam/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/knn.csv
      hash: md5
      md5: c8d4f7036e0c3e1cf8fa5a0b922c6ecc
      size: 2287605
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/knn.csv
      hash: md5
      md5: 7dda620e8ae59aab14ac83c0071a8b96
      size: 1268504
  clean@sms_spam-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i sms_spam/reports/condense/logistic.csv
      -o sms_spam/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: sms_spam/reports/condense/logistic.csv
      hash: md5
      md5: 7094b26a582820cc1f88512573ce8c25
      size: 3430438
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: sms_spam/plots/clean/condense/logistic.csv
      hash: md5
      md5: 1f89cfa87c87f195079e49eb5d6e7ce5
      size: 2461824
  clean@truthseeker-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/logistic.csv
      -o truthseeker/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/logistic.csv
      hash: md5
      md5: 5c01852f352ac96150fb36c2df9bcbbf
      size: 1648856
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/logistic.csv
      hash: md5
      md5: 9710addb440069a5ea884d90ed4c394a
      size: 1237939
  clean@truthseeker-condense/knn:
    cmd: python -m deckard.layers.clean_data  -i truthseeker/reports/condense/knn.csv
      -o truthseeker/plots/clean/condense/knn.csv -c conf/clean.yaml
    deps:
    - path: truthseeker/reports/condense/knn.csv
      hash: md5
      md5: b4ec50d98f613984be6261a059120255
      size: 1595839
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: truthseeker/plots/clean/condense/knn.csv
      hash: md5
      md5: a0c8deb8fe7617477ec43fae2a851b4d
      size: 1191230
  clean@ddos-condense/svc:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/svc.csv -o
      ddos/plots/clean/condense/svc.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/svc.csv
      hash: md5
      md5: aa784bb40bb07d842dc0a91a4db363de
      size: 1427146
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/svc.csv
      hash: md5
      md5: e8672b519a9feabd7a83f366684ae65f
      size: 1172482
  clean@ddos-condense/logistic:
    cmd: python -m deckard.layers.clean_data  -i ddos/reports/condense/logistic.csv
      -o ddos/plots/clean/condense/logistic.csv -c conf/clean.yaml
    deps:
    - path: ddos/reports/condense/logistic.csv
      hash: md5
      md5: 43603ccd44d31553618819d6d8a21b26
      size: 1459732
    params:
      conf/clean.yaml:
        replace:
          model.init.metric:
            jaro: Jaro
            _winkler: -Winkler
            levenshtein: Levenshtein
            ncd: NCD
            ratio: Ratio
            seqRatio: SeqRatio
            hamming: Hamming
            gzip: Gzip
            pkl: Pickle
            bz2: BZ2
            zstd: Zstd
            lzma: Lzma
          model_name:
            GzipSVC: k-SVC
            GzipLogisticRegressor: k-Logistic
            GzipKNN: k-KNN
          model.init.symmetric:
            true: Symmetric
            false: Asymmetric
    outs:
    - path: ddos/plots/clean/condense/logistic.csv
      hash: md5
      md5: d4141b866045a61b758909b680459363
      size: 1190145
  merge_condense@ddos:
    cmd: python merge.py --big_dir ddos/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      ddos/plots/ --output_file condensed_merged.csv
    deps:
    - path: ddos/plots/clean/condense/knn.csv
      hash: md5
      md5: be16b853ccb87973e0e61b37b3d79cc9
      size: 1144970
    - path: ddos/plots/clean/condense/logistic.csv
      hash: md5
      md5: d4141b866045a61b758909b680459363
      size: 1190145
    - path: ddos/plots/clean/condense/svc.csv
      hash: md5
      md5: e8672b519a9feabd7a83f366684ae65f
      size: 1172482
    outs:
    - path: ddos/plots/condensed_merged.csv
      hash: md5
      md5: bf84ec4bd2b08cc23e35154584619a51
      size: 3628680
  merge_condense@kdd_nsl:
    cmd: python merge.py --big_dir kdd_nsl/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      kdd_nsl/plots/ --output_file condensed_merged.csv
    deps:
    - path: kdd_nsl/plots/clean/condense/knn.csv
      hash: md5
      md5: 23789b08b0fd1616555611d0e7971db9
      size: 1204868
    - path: kdd_nsl/plots/clean/condense/logistic.csv
      hash: md5
      md5: 55a0ac50149a3e3d93b69c63ccd0d7a3
      size: 1174964
    - path: kdd_nsl/plots/clean/condense/svc.csv
      hash: md5
      md5: c9b2ff8546f531fa439c664c63fc06fd
      size: 2021393
    outs:
    - path: kdd_nsl/plots/condensed_merged.csv
      hash: md5
      md5: 1ddcee7de7db0c1a7d4898de4a03d7b7
      size: 4543759
  merge_condense@sms_spam:
    cmd: python merge.py --big_dir sms_spam/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      sms_spam/plots/ --output_file condensed_merged.csv
    deps:
    - path: sms_spam/plots/clean/condense/knn.csv
      hash: md5
      md5: 7dda620e8ae59aab14ac83c0071a8b96
      size: 1268504
    - path: sms_spam/plots/clean/condense/logistic.csv
      hash: md5
      md5: 1f89cfa87c87f195079e49eb5d6e7ce5
      size: 2461824
    - path: sms_spam/plots/clean/condense/svc.csv
      hash: md5
      md5: 92b8648f6759e0a56c65aeec4a15aa92
      size: 1223675
    outs:
    - path: sms_spam/plots/condensed_merged.csv
      hash: md5
      md5: 8f549743001ca622a6c7c8cbb2b3d17d
      size: 5114716
  merge_condense@truthseeker:
    cmd: python merge.py --big_dir truthseeker/plots/ --data_file clean/condense/knn.csv
      --little_dir_data_file  clean/condense/logistic.csv clean/condense/svc.csv --output_folder
      truthseeker/plots/ --output_file condensed_merged.csv
    deps:
    - path: truthseeker/plots/clean/condense/knn.csv
      hash: md5
      md5: a0c8deb8fe7617477ec43fae2a851b4d
      size: 1191230
    - path: truthseeker/plots/clean/condense/logistic.csv
      hash: md5
      md5: 9710addb440069a5ea884d90ed4c394a
      size: 1237939
    - path: truthseeker/plots/clean/condense/svc.csv
      hash: md5
      md5: a17c0cdb6a3fbfae5bd4fcfca1938a96
      size: 1257671
    outs:
    - path: truthseeker/plots/condensed_merged.csv
      hash: md5
      md5: 738dc93bfff1b9c167949e722ee79665
      size: 3805499
  grid_search@300-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/300/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/300
      hash: md5
      md5: c47afee2ee6085e856fe4e32b58b3f6b.dir
      size: 1379773
      nfiles: 514
    - path: ddos/reports/gzip_knn/300/train/
      hash: md5
      md5: 25965cb19ec15de45784c43768bd2bdd.dir
      size: 350250
      nfiles: 378
  plot_condense@sms_spam:
    cmd: python -m deckard.layers.plots  --path sms_spam/plots/  --file sms_spam/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: sms_spam/plots/condensed_merged.csv
      hash: md5
      md5: 8f549743001ca622a6c7c8cbb2b3d17d
      size: 5114716
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: sms_spam/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 8d3c7b03379f2f16bdb6de450083608b
      size: 40643
    - path: sms_spam/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 095622e64533aedee66d72079f141c0d
      size: 53902
    - path: sms_spam/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: da26bd3fc967c9925975f6c8ad189a88
      size: 50367
  plot_condense@ddos:
    cmd: python -m deckard.layers.plots  --path ddos/plots/  --file ddos/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: ddos/plots/condensed_merged.csv
      hash: md5
      md5: dc147a2e9c585b39c5e212a46ade70ac
      size: 9306964
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: ddos/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 09737e6b272979bf7fc879ece10d25e5
      size: 57907
    - path: ddos/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 78e2e0111219f86d189dfb952d81cdba
      size: 78230
    - path: ddos/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: ab34ce0b71b6c0153525b0194178ecaf
      size: 64512
  plot_condense@kdd_nsl:
    cmd: python -m deckard.layers.plots  --path kdd_nsl/plots/  --file kdd_nsl/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: kdd_nsl/plots/condensed_merged.csv
      hash: md5
      md5: 1ddcee7de7db0c1a7d4898de4a03d7b7
      size: 4543759
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: kdd_nsl/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 1c673220cd32e3f9bd2aa92516d0b20e
      size: 38546
    - path: kdd_nsl/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: 4bcb086fcd47e05d2b79e30a12d15869
      size: 50187
    - path: kdd_nsl/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 2b3e91d9b656ba35d06f8e97d1e8359d
      size: 45992
  grid_search@300-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/300/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/300
      hash: md5
      md5: 6bc5b9e70b4f6cc47a8837d6d25690ac.dir
      size: 1466899
      nfiles: 514
    - path: ddos/reports/gzip_logistic/300/train/
      hash: md5
      md5: df4930132e36fd4e726c5e00751d721b.dir
      size: 561713
      nfiles: 362
  grid_search@300-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=300
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/300/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/300
      hash: md5
      md5: 13800a1369da0609d0ec9837b11356a1.dir
      size: 1424704
      nfiles: 514
    - path: ddos/reports/gzip_svc/300/train/
      hash: md5
      md5: c101119b56b4799eb8f9ba8557c12c12.dir
      size: 552863
      nfiles: 384
  plot_condense@truthseeker:
    cmd: python -m deckard.layers.plots  --path truthseeker/plots/  --file truthseeker/plots/condensed_merged.csv  -c
      conf/condensed_plots.yaml
    deps:
    - path: truthseeker/plots/condensed_merged.csv
      hash: md5
      md5: 738dc93bfff1b9c167949e722ee79665
      size: 3805499
    params:
      conf/condensed_plots.yaml:
        line_plot:
        - file: sampling_method_vs_accuracy.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: accuracy
          ylabel: Accuracy
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          y_scale: linear
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_train_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: train_time
          ylabel: Training Time (s)
          y_scale: linear
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
        - file: sampling_method_vs_predict_time.pdf
          hue: model.init.sampling_method
          title:
          x: model.init.m
          xlabel: Percentage of Samples per Class
          y: predict_time
          ylabel: Prediction Time (s)
          y_scale: log
          hue_order:
          - random
          - svc
          - knn
          - sum
          - medoid
          - nearmiss
          - hardness
          errorbar: se
          err_style: bars
          xlim:
          - 0
          - 1
          legend:
            title: Sampling Method
            bbox_to_anchor:
            - 1.05
            - 0.5
            loc: center left
            prop:
              size: 14
    outs:
    - path: truthseeker/plots/sampling_method_vs_accuracy.pdf
      hash: md5
      md5: 0d293f64173585cb19c88218a7327f83
      size: 18158
    - path: truthseeker/plots/sampling_method_vs_predict_time.pdf
      hash: md5
      md5: bb494d7b950451096bb639f3a9f1b4cb
      size: 45092
    - path: truthseeker/plots/sampling_method_vs_train_time.pdf
      hash: md5
      md5: 85a9eeb8f5aecc63f5634b12483941cf
      size: 39796
  grid_search@500-ddos-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_logistic model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_logistic_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_logistic/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_logistic/500/study.csv
      files.directory=ddos files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: ddos/logs/gzip_logistic/500
      hash: md5
      md5: 42d78356c1051b3e6e5abdc29213c86d.dir
      size: 1478191
      nfiles: 514
    - path: ddos/reports/gzip_logistic/500/train/
      hash: md5
      md5: ffef0f292ad2278bc05a9c793d5e3a2b.dir
      size: 562303
      nfiles: 348
  grid_search@500-ddos-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_svc/500/study.csv
      files.directory=ddos files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: ddos/logs/gzip_svc/500
      hash: md5
      md5: 1cc5d8464699536811534a66f6b03832.dir
      size: 1450430
      nfiles: 514
    - path: ddos/reports/gzip_svc/500/train/
      hash: md5
      md5: 071cf73270503508839388cff5402e51.dir
      size: 552304
      nfiles: 384
  grid_search@100-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/100
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/100
      hash: md5
      md5: d1fc93e695de0fb34abc1f3e4db475b6.dir
      size: 1457735
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/100/train/
      hash: md5
      md5: 0e43a98c22a07ff0db5a21c8a1b29f02.dir
      size: 551398
      nfiles: 371
  grid_search@100-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=100 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/100 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/100/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/100 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/100
      hash: md5
      md5: 70b8aaf7b9f4131c24a190371f3bb84d.dir
      size: 1396460
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/100/train/
      hash: md5
      md5: b42fb7cda94841da420570f78c0360ab.dir
      size: 542097
      nfiles: 384
  grid_search@300-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/300/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/300
      hash: md5
      md5: ba73756b84e38a9124b6404330eeb6f6.dir
      size: 1356596
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/300/train/
      hash: md5
      md5: ab75c77771b3c94585d64d8e5e446390.dir
      size: 377430
      nfiles: 349
  grid_search@300-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/300
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/300/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/300
      hash: md5
      md5: a82fb69301d5b4c25a98b08e9c51a03d.dir
      size: 1473960
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/300/train/
      hash: md5
      md5: f8ead22c1c2154ea1b5fc4271e76a807.dir
      size: 565055
      nfiles: 358
  grid_search@300-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/300/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/300
      hash: md5
      md5: b9967495b4a69d493478d118c005bcb0.dir
      size: 1439921
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/300/train/
      hash: md5
      md5: 483c44c484684bfa4be6afbe8785d19e.dir
      size: 556311
      nfiles: 384
  grid_search@300-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/300/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/300
      hash: md5
      md5: 37a32ed4e0e8746093c0cc9773c20428.dir
      size: 1360206
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/300/train/
      hash: md5
      md5: b562ce528647cbc5691881eca20d14c3.dir
      size: 360305
      nfiles: 354
  grid_search@300-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/300
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/300/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/300
      hash: md5
      md5: c4a6659a9a42438e4cda46204110f152.dir
      size: 1492305
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/300/train/
      hash: md5
      md5: c390bf9ff240c2b33fb66a43bc5e49b5.dir
      size: 552096
      nfiles: 373
  grid_search@300-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/300/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/300
      hash: md5
      md5: faef37bd655980292a1cba1eb6019e02.dir
      size: 1432029
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/300/train/
      hash: md5
      md5: 6e8a5812a59700fdfac04e31e4f91c15.dir
      size: 543601
      nfiles: 384
  grid_search@300-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/300 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/300/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/300
      hash: md5
      md5: fe0d8d1efc5205e73c00a325158a32d0.dir
      size: 1379955
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/300/train/
      hash: md5
      md5: 6cf4811545ac6bbcb931dec166f94146.dir
      size: 361320
      nfiles: 356
  grid_search@300-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/300
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/300/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/300
      hash: md5
      md5: 3646366e6e334601019e84ac4afaba0a.dir
      size: 1505405
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/300/train/
      hash: md5
      md5: 08a33f0c2516868b6f96d07144938775.dir
      size: 555605
      nfiles: 375
  grid_search@300-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=300 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/300 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/300/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/300 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/300
      hash: md5
      md5: 03113827d2b60e43967131d724c3d9b3.dir
      size: 1447847
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/300/train/
      hash: md5
      md5: 269b7351222860a080573a1460cdc1b4.dir
      size: 547528
      nfiles: 384
  grid_search@500-ddos-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=ddos dataset=ddos data.sample.train_size=500
      data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_ddos hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=ddos/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=ddos/logs/gzip_knn/500/study.csv
      files.directory=ddos files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: ddos/logs/gzip_knn/500
      hash: md5
      md5: fe25eeb3a1a7651381057f046b09750b.dir
      size: 1400909
      nfiles: 514
    - path: ddos/reports/gzip_knn/500/train/
      hash: md5
      md5: 04c061f1c2bf5fcebf3e65ae1df23961.dir
      size: 352339
      nfiles: 375
  grid_search@500-kdd_nsl-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_knn/500/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: kdd_nsl/logs/gzip_knn/500
      hash: md5
      md5: f549b868c9b1d774b5aa5333d8abe45e.dir
      size: 1376339
      nfiles: 514
    - path: kdd_nsl/reports/gzip_knn/500/train/
      hash: md5
      md5: 094b000f73371e65f91890452d9d69f3.dir
      size: 381867
      nfiles: 342
  grid_search@500-kdd_nsl-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_kdd_nsl
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=kdd_nsl/logs/gzip_logistic/500
      hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_logistic/500/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: kdd_nsl/logs/gzip_logistic/500
      hash: md5
      md5: 6b01fe4a99e91bc633976aa3c798ec5d.dir
      size: 1521620
      nfiles: 514
    - path: kdd_nsl/reports/gzip_logistic/500/train/
      hash: md5
      md5: 1730d6ac6bc42b13b1b4ef64a3812598.dir
      size: 563747
      nfiles: 373
  grid_search@500-kdd_nsl-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=kdd_nsl dataset=kdd_nsl
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_kdd_nsl hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=kdd_nsl/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=kdd_nsl/logs/gzip_svc/500/study.csv
      files.directory=kdd_nsl files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: kdd_nsl/logs/gzip_svc/500
      hash: md5
      md5: 8147396e4c263c06694eaf9acc5fda79.dir
      size: 1465954
      nfiles: 514
    - path: kdd_nsl/reports/gzip_svc/500/train/
      hash: md5
      md5: 452d9298ae9b99f1da7f423b7e13949d.dir
      size: 555623
      nfiles: 384
  grid_search@500-sms_spam-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_knn/500/study.csv
      files.directory=sms_spam files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: sms_spam/logs/gzip_knn/500
      hash: md5
      md5: 6a032a4fa187f7444d1a6dcef094e3f1.dir
      size: 1365875
      nfiles: 514
    - path: sms_spam/reports/gzip_knn/500/train/
      hash: md5
      md5: 4b62eb85519a3c3b7faf6b00b673b94d.dir
      size: 372575
      nfiles: 331
  grid_search@500-sms_spam-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_sms_spam
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=sms_spam/logs/gzip_logistic/500
      hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_logistic/500/study.csv
      files.directory=sms_spam files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: sms_spam/logs/gzip_logistic/500
      hash: md5
      md5: 270344776fa2cc88fce23f89b15a0882.dir
      size: 1517330
      nfiles: 514
    - path: sms_spam/reports/gzip_logistic/500/train/
      hash: md5
      md5: 72776456839e39a213bf000db2ca2c44.dir
      size: 551977
      nfiles: 369
  grid_search@500-sms_spam-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=sms_spam dataset=sms_spam
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_sms_spam hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=sms_spam/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=sms_spam/logs/gzip_svc/500/study.csv
      files.directory=sms_spam files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: sms_spam/logs/gzip_svc/500
      hash: md5
      md5: eefe1bc86da71e9b275bb91a94c7e1e5.dir
      size: 1460547
      nfiles: 514
    - path: sms_spam/reports/gzip_svc/500/train/
      hash: md5
      md5: 71e3b0cc05eadc9ccec862d8a314ae76.dir
      size: 543107
      nfiles: 384
  grid_search@500-truthseeker-gzip_knn:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_knn model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_knn_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_knn/500 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_knn/500/study.csv
      files.directory=truthseeker files.reports=reports/gzip_knn/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_knn --multirun
    deps:
    - path: conf/gzip_knn.yaml
      hash: md5
      md5: ceff1a602afc3323e49200a1da539310
      size: 2046
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_knn.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.num}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            direction: ${direction}
            storage: sqlite:///optuna.db
            study_name: ${dataset}_${model_name}_${stage}
            n_trials: 2
            n_jobs: 2
            max_failure_rate: 1.0
            params:
              model.init.k: 1,3,5,7,11
              +model.init.weights: uniform,distance
              +model.init.algorithm: brute
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              ++data.sample.random_state: int(interval(1, 10000))
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_knn
    outs:
    - path: truthseeker/logs/gzip_knn/500
      hash: md5
      md5: b54fab88a876d95f9b2d92b0c287fbf4.dir
      size: 1374058
      nfiles: 514
    - path: truthseeker/reports/gzip_knn/500/train/
      hash: md5
      md5: de58821607d6834fb53f8f0aec1e08df.dir
      size: 383103
      nfiles: 329
  grid_search@500-truthseeker-gzip_logistic:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_logistic
      model.init.distance_matrix=null hydra.sweeper.study_name=gzip_logistic_truthseeker
      hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8 hydra.sweep.dir=truthseeker/logs/gzip_logistic/500
      hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_logistic/500/study.csv
      files.directory=truthseeker files.reports=reports/gzip_logistic/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_logistic --multirun
    deps:
    - path: conf/gzip_logistic.yaml
      hash: md5
      md5: a051c1bd6690aa80000909c49eb45023
      size: 2189
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_logistic.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions: ${direction}
              metric_names: ${optimizers}
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 1
            n_trials: 1
            params:
              +model.init.solver: saga
              +model.init.penalty: l2,l1,l2,none
              +model.init.tol: 1e-4,1e-3,1e-2
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.fit_intercept: True,False
              +model.init.class_weight: balanced,None
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_logistic
    outs:
    - path: truthseeker/logs/gzip_logistic/500
      hash: md5
      md5: 28faffb212522c53212996b0a17adad4.dir
      size: 1533992
      nfiles: 514
    - path: truthseeker/reports/gzip_logistic/500/train/
      hash: md5
      md5: 3e62c32091d4e6cf11f8746d3023ea2b.dir
      size: 555653
      nfiles: 371
  grid_search@500-truthseeker-gzip_svc:
    cmd: python -m deckard.layers.optimise stage=train data=truthseeker dataset=truthseeker
      data.sample.train_size=500 data.sample.test_size=100 model_name=gzip_svc model.init.distance_matrix=null
      hydra.sweeper.study_name=gzip_svc_truthseeker hydra.sweeper.n_trials=128 hydra.sweeper.n_jobs=8
      hydra.sweep.dir=truthseeker/logs/gzip_svc/500 hydra.callbacks.study_dump.output_file=truthseeker/logs/gzip_svc/500/study.csv
      files.directory=truthseeker files.reports=reports/gzip_svc/500 hydra.launcher.n_jobs=-1
      ++raise_exception=True                --config-name gzip_svc --multirun
    deps:
    - path: conf/gzip_svc.yaml
      hash: md5
      md5: 71702231d42f4d68a2237772b3475697
      size: 2115
    - path: params.yaml
      hash: md5
      md5: 486532089f9aed37612260a1f0a2bead
      size: 1469
    params:
      conf/gzip_svc.yaml:
        hydra:
          run:
            dir: ${dataset}/logs/${stage}/
          sweep:
            dir: ???
            subdir: ${hydra.job.id}
          callbacks:
            study_dump:
              _target_: database.OptunaStudyDumpCallback
              storage: ${hydra.sweeper.storage}
              study_name: ${hydra.sweeper.study_name}
              directions:
              - maximize
              metric_names:
              - accuracy
              output_file: ${dataset}/logs/${model_name}/${data.sample.train_size}/study.csv
          sweeper:
            sampler:
              _target_: optuna.samplers.TPESampler
              consider_prior: true
              prior_weight: 1.0
              consider_magic_clip: true
              consider_endpoints: false
              n_startup_trials: 10
              n_ei_candidates: 24
              multivariate: true
            _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
            study_name: ${dataset}_${model_name}_${stage}
            storage: sqlite:///optuna.db
            n_jobs: 2
            n_trials: 2
            params:
              +model.init.kernel: rbf,precomputed
              +model.init.C: 1e-2,1e-1,1e0,1e1,1e2
              +model.init.gamma: scale,auto
              +model.init.class_weight: balanced,null
              model.init.symmetric: True,False
              ++model.init.precompute: true
              model.init.metric: gzip,lzma,bz2,pkl,zstd,levenshtein,ratio,hamming,jaro,jaro_winkler,seqratio
              model_name: ${model_name}
              data.sample.random_state: int(interval(1, 10000))
            direction: ${direction}
            max_failure_rate: 1.0
          launcher:
            _target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher
            n_jobs: 8
            prefer: processes
            verbose: 1
            timeout:
            pre_dispatch: ${hydra.sweeper.n_jobs}
            batch_size: auto
            temp_folder: /tmp/deckard
            max_nbytes: 100000
            mmap_mode: r
        model_name: gzip_svc
    outs:
    - path: truthseeker/logs/gzip_svc/500
      hash: md5
      md5: 7aabf6a304d62119b25bf04f87fbf1e6.dir
      size: 1477307
      nfiles: 514
    - path: truthseeker/reports/gzip_svc/500/train/
      hash: md5
      md5: 40fe30277b8a7d712eaee252561a010d.dir
      size: 547190
      nfiles: 384
