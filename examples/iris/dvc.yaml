stages:
  prepare:
    cmd: python ../../deckard/layers/prepare.py
    params:
      - prepare.config
    outs: 
      - params.prepare.outputs.file
      - params.prepare.outputs.folder
    # deps:
    #   - 
    # metrics:
    #   - prepare.scores
    # plots:
    #   - prepare.plots
  train:
    cmd:  python ../../deckard/layers/sklearn_model.py --layer_name train
    deps:
    - data.pkl
    params:
    - train
    outs:
    - train/:
        cache: true
  preprocess:
    cmd: python  ../../deckard/layers/preprocess .py --layer_name preprocess --position 0
    deps:
    - train/
    params:
      - preprocess
    outs:
    - ${preprocess.outputs.folder}:
        cache: true
  featurize:
    cmd: python  ../../deckard/layers/preprocess.py --layer_name featurize --position 1
    deps:
    - preprocess/
    params:
      - featurize
    outs:
    - ${featurize.outputs.folder}:
        cache: true
  visualise:
    cmd: python  ../../deckard/layers/visualise.py --layer_name visualise
    deps: 
      - train/
    params:
      - visualise
    outs:
      - plots/:
          cache: true
  control:
    cmd:  python  ../../deckard/layers/art_model.py --layer_name control
    deps:
    - data.pkl
    params:
    - control
    outs:
    - control/:
        cache: true
  defend:
    cmd:  python  ../../deckard/layers/defend.py --layer_name defend
    deps:
    - data.pkl
    - control/
    params:
    - defend
    outs:
    - defences/:
        cache: true
  attack:
    cmd:  python  ../../deckard/layers/attack.py --layer_name attack
    deps:
    - data.pkl
    - defences/
    params:
    - attack
    outs:
    - attacks/:
        cache: true
  evaluate:
    cmd: python  ../../deckard/layers/evaluate.py --layer_name evaluate
    deps: 
      - featurize/
      - control/
      - preprocess/
      - train/
      - attacks/
      - defences/
    params:
      - evaluate
    outs:
      - scores/
