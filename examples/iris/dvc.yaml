stages:
  prepare:
    cmd: python -m deckard.layers.prepare
    params:
      - prepare.config
    outs: 
      - params.prepare.outputs.file
      - params.prepare.outputs.folder
    # deps:
    #   - 
    # metrics:
    #   - prepare.scores
    # plots:
    #   - prepare.plots
  train:
    cmd: python -m deckard.layers.sklearn_model --layer_name train
    params:
      - train.config
    outs: 
      - ${train.outputs.folder}/${train.outputs.model}
      - ${train.outputs.folder}/${train.outputs.params}
      - ${train.outputs.folder}/${train.outputs.ground_truth}
      - ${train.outputs.folder}/${train.outputs.predictions}
    deps:
      - ${prepare.outputs.folder}/${prepare.outputs.file}
    # metrics:
    #   - train.scores
    # plots:
    #   - train.plots
  preprocess:
    cmd: python -m deckard.layers.preprocess --layer_name preprocess
    params:
      - preprocess.config
    outs: 
      - ${preprocess.outputs.folder}/${preprocess.outputs.model}
      - ${preprocess.outputs.folder}/${preprocess.outputs.params}
      - ${preprocess.outputs.folder}/${preprocess.outputs.ground_truth}
      - ${preprocess.outputs.folder}/${preprocess.outputs.predictions}
    deps:
      - ${train.outputs.folder}/${train.outputs.model}
      - ${prepare.outputs.folder}/${prepare.outputs.file}
    # metrics:
    #   - preprocess.scores
    # plots:
    #   - preprocess.plots  
  featurize:
      cmd: python -m deckard.layers.featurize --layer_name featurize
      params:
        - featurize.config
      outs: 
        - ${featurize.outputs.folder}/${featurize.outputs.model}
        - ${featurize.outputs.folder}/${featurize.outputs.params}
        - ${featurize.outputs.folder}/${featurize.outputs.ground_truth}
        - ${featurize.outputs.folder}/${featurize.outputs.predictions}
      deps:
        - ${train.outputs.folder}/${train.outputs.model}
        - ${prepare.outputs.folder}/${prepare.outputs.file}
      # metrics:
      #   - featurize.scores
      # plots:
      #   - featurize.plots  
  art_model:
      cmd: python -m deckard.layers.art_model --layer_name art_model
      params:
        - art_model.config
      outs: 
        - ${art_model.outputs.folder}/${art_model.outputs.model}
        - ${art_model.outputs.folder}/${art_model.outputs.params}
        - ${art_model.outputs.folder}/${art_model.outputs.ground_truth}
        - ${art_model.outputs.folder}/${art_model.outputs.predictions}
      deps:
        - ${train.outputs.folder}/${train.outputs.model}
        - ${prepare.outputs.folder}/${prepare.outputs.file}
      # metrics:
      #   - art_model.scores
      # plots:
      #   - art_model.plots 
  defend:
      cmd: python -m deckard.layers.defend --layer_name defend
      params:
        - defend.config
      outs: 
        - ${defend.outputs.folder}/${defend.outputs.model}
        - ${defend.outputs.folder}/${defend.outputs.params}
        - ${defend.outputs.folder}/${defend.outputs.ground_truth}
        - ${defend.outputs.folder}/${defend.outputs.predictions}
      deps:
        - ${train.outputs.folder}/${train.outputs.model}
        - ${prepare.outputs.folder}/${prepare.outputs.file}
      # metrics:
      #   - defend.scores
      # plots:
      #   - defend.plots  
  attack:
      cmd: python -m deckard.layers.preprocess --layer_name preprocess
      params:
        - preprocess.config
      outs: 
        - ${preprocess.outputs.folder}/${preprocess.outputs.model}
        - ${preprocess.outputs.folder}/${preprocess.outputs.params}
        - ${preprocess.outputs.folder}/${preprocess.outputs.ground_truth}
        - ${preprocess.outputs.folder}/${preprocess.outputs.predictions}
      deps:
        - ${train.outputs.folder}/${train.outputs.model}
        - ${prepare.outputs.folder}/${prepare.outputs.file}
      # metrics:
      #   - preprocess.scores
      # plots:
      #   - preprocess.plots  
  visualise:
      cmd: python -m deckard.layers.visualise --layer_name visualise
      params:
        - visualise.config
      outs: 
        - ${visualise.outputs.folder}/${visualise.outputs.model}
        - ${visualise.outputs.folder}/${visualise.outputs.params}
        - ${visualise.outputs.folder}/${visualise.outputs.ground_truth}
        - ${visualise.outputs.folder}/${visualise.outputs.predictions}
      deps:
        - ${train.outputs.folder}/${train.outputs.model}
        - ${prepare.outputs.folder}/${prepare.outputs.file}
      # metrics:
      #   - visualise.scores
      # plots:
      #   - visualise.plots
  evaluate:
      cmd: python -m deckard.layers.evaluate --layer_name evaluate
      params:
        - evaluate.config
      outs: 
        - ${evaluate.outputs.folder}/${evaluate.outputs.model}
        - ${evaluate.outputs.folder}/${evaluate.outputs.params}
        - ${evaluate.outputs.folder}/${evaluate.outputs.ground_truth}
        - ${evaluate.outputs.folder}/${evaluate.outputs.predictions}
      deps:
        - ${train.outputs.folder}/${train.outputs.model}
        - ${prepare.outputs.folder}/${prepare.outputs.file}
    # metrics:
    #   - evaluate.scores
    # plots:
    #   - evaluate.plots  















