stages:
  # parse_params:
  #   cmd : python -m deckard.layers.parse
  #   deps:
  #    - conf
    # outs:
    #  - params.yaml
  generate_data:
    cmd: python -m deckard.layers.runner generate_data --layer data
    params:
      - data
      - files
    outs:
      - generate_data/${data.files.data_path}
  train:
    cmd: python -m deckard.layers.runner
    params:
      - data
      - model.files
      - model.init
      - files
      - plots
      - scorers
    deps:
      - generate_data/${data.files.data_path}
    outs:
      - train/${model.files.model_path}
      - train/${data.files.data_path}
      - ${files.path}/train
  pipeline:
    cmd: python -m deckard.layers.runner pipeline
    params:
      - data
      - model.files
      - model.init
      - files
      - plots
      - scorers
    deps:
      - train/${model.files.model_path}
      - train/${data.files.data_path}
    outs:
      - ${files.path}/pipeline
      - pipeline/${model.files.model_path}
      - pipeline/${data.files.data_path}
  defend:
    cmd: python -m deckard.layers.runner defend
    params:
      - data
      - model.files
      - model.init
      - model.art_pipeline
      - files
      - plots
      - scorers
    deps:
      - pipeline/${model.files.model_path}
      - pipeline/${data.files.data_path}
    outs:
      - ${files.path}/defend
      - defend/${model.files.model_path}
      - defend/${data.files.data_path}
  attack:
    cmd: python -m deckard.layers.runner attack
    params:
      - data
      - model.files
      - model.init
      - model.art_pipeline
      - attack
      - files
      - plots
      - scorers
    deps:
      - defend/${model.files.model_path}
      - defend/${data.files.data_path}
    outs:
      - ${files.path}/attack

  # visualise:
  #     cmd: python -m deckard.layers.visualise --layer_name visualise
  #     params:
  #       - visualise.config
  #     plots:
  #       - ${visualise.outputs.folder}/${visualise.plots.roc_auc}
  #     deps:
  #       - ${defend.outputs.folder}/${defend.outputs.model}
  #       - ${prepare.outputs.folder}/${prepare.outputs.file}
  #     # metrics:
  #     #   - visualise.scores
  # evaluate:
  #     cmd: python -m deckard.layers.evaluate --layer_name evaluate
  #     params:
  #       - evaluate.config
  #     metrics:
  #       - ${evaluate.outputs.folder}/${evaluate.metrics.scores}
  #     deps:
  #       - ${train.outputs.folder}
  #       - ${prepare.outputs.folder}
  #       - ${pipeline.outputs.folder}
  #       - ${featurize.outputs.folder}
  #       - ${art_model.outputs.folder}
  #       - ${defend.outputs.folder}
  #       - ${attack.outputs.folder}
  #     # plots:
  #     #   - evaluate.plots
